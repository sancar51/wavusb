
wavusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e590  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800e718  0800e718  0001e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8ac  0800e8ac  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8ac  0800e8ac  0001e8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b4  0800e8b4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b4  0800e8b4  0001e8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b8  0800e8b8  0001e8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004958  20000090  0800e94c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200049e8  0800e94c  000249e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a330  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005730  00000000  00000000  0004a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0004fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00050f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d40  00000000  00000000  000521e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002047f  00000000  00000000  00078f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbcd  00000000  00000000  0009939f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005424  00000000  00000000  00164fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e700 	.word	0x0800e700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800e700 	.word	0x0800e700

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004d6:	f107 020c 	add.w	r2, r7, #12
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	2194      	movs	r1, #148	; 0x94
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <write_register+0x30>)
 80004e4:	f003 feea 	bl	80042bc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000ac 	.word	0x200000ac

080004f4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000504:	f107 020c 	add.w	r2, r7, #12
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	2194      	movs	r1, #148	; 0x94
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <read_register+0x3c>)
 8000512:	f003 fed3 	bl	80042bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	2194      	movs	r1, #148	; 0x94
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <read_register+0x3c>)
 8000522:	f003 ffc9 	bl	80044b8 <HAL_I2C_Master_Receive>
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000ac 	.word	0x200000ac

08000534 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000534:	b084      	sub	sp, #16
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	f107 0c10 	add.w	ip, r7, #16
 8000540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000544:	4b7b      	ldr	r3, [pc, #492]	; (8000734 <CS43_Init+0x200>)
 8000546:	2200      	movs	r2, #0
 8000548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b79      	ldr	r3, [pc, #484]	; (8000734 <CS43_Init+0x200>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	69da      	ldr	r2, [r3, #28]
 8000552:	4b78      	ldr	r3, [pc, #480]	; (8000734 <CS43_Init+0x200>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2110      	movs	r1, #16
 8000560:	4875      	ldr	r0, [pc, #468]	; (8000738 <CS43_Init+0x204>)
 8000562:	f001 ffdd 	bl	8002520 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000566:	4b75      	ldr	r3, [pc, #468]	; (800073c <CS43_Init+0x208>)
 8000568:	4618      	mov	r0, r3
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2254      	movs	r2, #84	; 0x54
 8000570:	4619      	mov	r1, r3
 8000572:	f00d ffe7 	bl	800e544 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000576:	2301      	movs	r3, #1
 8000578:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	4619      	mov	r1, r3
 800057e:	2002      	movs	r0, #2
 8000580:	f7ff ff9e 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000588:	797b      	ldrb	r3, [r7, #5]
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	b2db      	uxtb	r3, r3
 8000590:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000592:	797b      	ldrb	r3, [r7, #5]
 8000594:	f043 030c 	orr.w	r3, r3, #12
 8000598:	b2db      	uxtb	r3, r3
 800059a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800059c:	797b      	ldrb	r3, [r7, #5]
 800059e:	f043 0303 	orr.w	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	3301      	adds	r3, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	2004      	movs	r0, #4
 80005ae:	f7ff ff87 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	3301      	adds	r3, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	2005      	movs	r0, #5
 80005be:	f7ff ff7f 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	2006      	movs	r0, #6
 80005c8:	f7ff ff94 	bl	80004f4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005cc:	797b      	ldrb	r3, [r7, #5]
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e0:	797b      	ldrb	r3, [r7, #5]
 80005e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	f023 0310 	bic.w	r3, r3, #16
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005f4:	797b      	ldrb	r3, [r7, #5]
 80005f6:	f023 0304 	bic.w	r3, r3, #4
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	b2db      	uxtb	r3, r3
 8000606:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000608:	797b      	ldrb	r3, [r7, #5]
 800060a:	f043 0303 	orr.w	r3, r3, #3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	3301      	adds	r3, #1
 8000616:	4619      	mov	r1, r3
 8000618:	2006      	movs	r0, #6
 800061a:	f7ff ff51 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	3301      	adds	r3, #1
 8000622:	4619      	mov	r1, r3
 8000624:	2008      	movs	r0, #8
 8000626:	f7ff ff65 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800062a:	797b      	ldrb	r3, [r7, #5]
 800062c:	f023 030f 	bic.w	r3, r3, #15
 8000630:	b2db      	uxtb	r3, r3
 8000632:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000634:	797b      	ldrb	r3, [r7, #5]
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	3301      	adds	r3, #1
 8000642:	4619      	mov	r1, r3
 8000644:	2008      	movs	r0, #8
 8000646:	f7ff ff3b 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	3301      	adds	r3, #1
 800064e:	4619      	mov	r1, r3
 8000650:	2009      	movs	r0, #9
 8000652:	f7ff ff4f 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	f023 030f 	bic.w	r3, r3, #15
 800065c:	b2db      	uxtb	r3, r3
 800065e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	3301      	adds	r3, #1
 800066e:	4619      	mov	r1, r3
 8000670:	2009      	movs	r0, #9
 8000672:	f7ff ff25 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	200e      	movs	r0, #14
 800067e:	f7ff ff39 	bl	80004f4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000682:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000686:	2b03      	cmp	r3, #3
 8000688:	d119      	bne.n	80006be <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800068a:	797b      	ldrb	r3, [r7, #5]
 800068c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000690:	b2db      	uxtb	r3, r3
 8000692:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069a:	b2db      	uxtb	r3, r3
 800069c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800069e:	797b      	ldrb	r3, [r7, #5]
 80006a0:	f023 0320 	bic.w	r3, r3, #32
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006a8:	797b      	ldrb	r3, [r7, #5]
 80006aa:	f023 0310 	bic.w	r3, r3, #16
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	f023 0308 	bic.w	r3, r3, #8
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	717b      	strb	r3, [r7, #5]
 80006bc:	e005      	b.n	80006ca <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006c6:	2302      	movs	r3, #2
 80006c8:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	3301      	adds	r3, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	200e      	movs	r0, #14
 80006d2:	f7ff fef5 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	3301      	adds	r3, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	200f      	movs	r0, #15
 80006de:	f7ff ff09 	bl	80004f4 <read_register>
	iData[1] = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	3301      	adds	r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	200f      	movs	r0, #15
 80006ee:	f7ff fee7 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	3301      	adds	r3, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	2014      	movs	r0, #20
 80006fe:	f7ff fedf 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	3301      	adds	r3, #1
 8000706:	4619      	mov	r1, r3
 8000708:	2015      	movs	r0, #21
 800070a:	f7ff fed9 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	201a      	movs	r0, #26
 8000716:	f7ff fed3 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	201b      	movs	r0, #27
 8000722:	f7ff fecd 	bl	80004c0 <write_register>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr
 8000734:	20002244 	.word	0x20002244
 8000738:	40020c00 	.word	0x40020c00
 800073c:	200000ac 	.word	0x200000ac

08000740 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d82b      	bhi.n	80007a8 <CS43_Enable_RightLeft+0x68>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <CS43_Enable_RightLeft+0x18>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000769 	.word	0x08000769
 800075c:	08000779 	.word	0x08000779
 8000760:	08000789 	.word	0x08000789
 8000764:	08000799 	.word	0x08000799
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000768:	23c0      	movs	r3, #192	; 0xc0
 800076a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000772:	b2db      	uxtb	r3, r3
 8000774:	737b      	strb	r3, [r7, #13]
			break;
 8000776:	e018      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000782:	b2db      	uxtb	r3, r3
 8000784:	737b      	strb	r3, [r7, #13]
			break;
 8000786:	e010      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000788:	23c0      	movs	r3, #192	; 0xc0
 800078a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800078c:	7b7b      	ldrb	r3, [r7, #13]
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	b2db      	uxtb	r3, r3
 8000794:	737b      	strb	r3, [r7, #13]
			break;
 8000796:	e008      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	f043 0320 	orr.w	r3, r3, #32
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	737b      	strb	r3, [r7, #13]
			break;
 80007a6:	e000      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007a8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007aa:	7b7b      	ldrb	r3, [r7, #13]
 80007ac:	f043 030c 	orr.w	r3, r3, #12
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	f043 0303 	orr.w	r3, r3, #3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2004      	movs	r0, #4
 80007c8:	f7ff fe7a 	bl	80004c0 <write_register>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3319      	adds	r3, #25
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	3301      	adds	r3, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	2020      	movs	r0, #32
 80007f0:	f7ff fe66 	bl	80004c0 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	3301      	adds	r3, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	2021      	movs	r0, #33	; 0x21
 80007fe:	f7ff fe5f 	bl	80004c0 <write_register>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d019      	beq.n	800084e <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	3301      	adds	r3, #1
 8000824:	4619      	mov	r1, r3
 8000826:	2004      	movs	r0, #4
 8000828:	f7ff fe4a 	bl	80004c0 <write_register>
    iData[1] = 0x01;
 800082c:	2301      	movs	r3, #1
 800082e:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	3301      	adds	r3, #1
 8000836:	4619      	mov	r1, r3
 8000838:	2022      	movs	r0, #34	; 0x22
 800083a:	f7ff fe41 	bl	80004c0 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	3301      	adds	r3, #1
 8000844:	4619      	mov	r1, r3
 8000846:	2023      	movs	r0, #35	; 0x23
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 800084c:	e018      	b.n	8000880 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800084e:	2300      	movs	r3, #0
 8000850:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	3301      	adds	r3, #1
 8000858:	4619      	mov	r1, r3
 800085a:	2022      	movs	r0, #34	; 0x22
 800085c:	f7ff fe30 	bl	80004c0 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	3301      	adds	r3, #1
 8000866:	4619      	mov	r1, r3
 8000868:	2023      	movs	r0, #35	; 0x23
 800086a:	f7ff fe29 	bl	80004c0 <write_register>
    iData[1] = 0xAF;
 800086e:	23af      	movs	r3, #175	; 0xaf
 8000870:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	3301      	adds	r3, #1
 8000878:	4619      	mov	r1, r3
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff fe20 	bl	80004c0 <write_register>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffbb 	bl	800080a <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000894:	2399      	movs	r3, #153	; 0x99
 8000896:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	3301      	adds	r3, #1
 800089c:	4619      	mov	r1, r3
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fe0e 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	3301      	adds	r3, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	2047      	movs	r0, #71	; 0x47
 80008b0:	f7ff fe06 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	3301      	adds	r3, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	2032      	movs	r0, #50	; 0x32
 80008bc:	f7ff fe1a 	bl	80004f4 <read_register>
	iData[1] |= 0x80;
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	3301      	adds	r3, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f7ff fdf5 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	3301      	adds	r3, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fe09 	bl	80004f4 <read_register>
	iData[1] &= ~(0x80);
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	3301      	adds	r3, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	2032      	movs	r0, #50	; 0x32
 80008f4:	f7ff fde4 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	3301      	adds	r3, #1
 8000900:	4619      	mov	r1, r3
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fddc 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000908:	239e      	movs	r3, #158	; 0x9e
 800090a:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	3301      	adds	r3, #1
 8000910:	4619      	mov	r1, r3
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fdd4 	bl	80004c0 <write_register>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <CS43_Stop>:

void CS43_Stop(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff ff6f 	bl	800080a <CS43_SetMute>
  iData[1] = 0x04;
 800092c:	2304      	movs	r3, #4
 800092e:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	3301      	adds	r3, #1
 8000934:	4619      	mov	r1, r3
 8000936:	200e      	movs	r0, #14
 8000938:	f7ff fdc2 	bl	80004c0 <write_register>
	iData[1] = 0x9F;
 800093c:	239f      	movs	r3, #159	; 0x9f
 800093e:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	3301      	adds	r3, #1
 8000944:	4619      	mov	r1, r3
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fdba 	bl	80004c0 <write_register>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800095c:	2300      	movs	r3, #0
 800095e:	77fb      	strb	r3, [r7, #31]
 8000960:	23ff      	movs	r3, #255	; 0xff
 8000962:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	e00b      	b.n	8000982 <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <audioI2S_pllClockConfig+0x8c>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	d101      	bne.n	800097c <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	3301      	adds	r3, #1
 8000980:	77fb      	strb	r3, [r7, #31]
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	2b07      	cmp	r3, #7
 8000986:	d9f0      	bls.n	800096a <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4618      	mov	r0, r3
 800098e:	f006 fd63 	bl	8007458 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000992:	7fbb      	ldrb	r3, [r7, #30]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	2b00      	cmp	r3, #0
 800099a:	d111      	bne.n	80009c0 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800099c:	2301      	movs	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a0:	7fbb      	ldrb	r3, [r7, #30]
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <audioI2S_pllClockConfig+0x90>)
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009aa:	7fbb      	ldrb	r3, [r7, #30]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <audioI2S_pllClockConfig+0x94>)
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fc6b 	bl	8007294 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009be:	e00b      	b.n	80009d8 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009c4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009c8:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009ca:	2303      	movs	r3, #3
 80009cc:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 fc5e 	bl	8007294 <HAL_RCCEx_PeriphCLKConfig>
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	0800e798 	.word	0x0800e798
 80009e4:	0800e7b8 	.word	0x0800e7b8
 80009e8:	0800e7d8 	.word	0x0800e7d8

080009ec <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <I2S3_freqUpdate+0x80>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <I2S3_freqUpdate+0x84>)
 80009fa:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a0e:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a38:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a42:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 ff23 	bl	800589c <HAL_I2S_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e000      	b.n	8000a62 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a60:	2301      	movs	r3, #1
  }
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000100 	.word	0x20000100
 8000a70:	40003c00 	.word	0x40003c00

08000a74 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <audioI2S_setHandle+0x1c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000100 	.word	0x20000100

08000a94 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff59 	bl	8000954 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <I2S3_freqUpdate>
  return true;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000abe:	f7ff fee3 	bl	8000888 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <audioI2S_play+0x38>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000acc:	d203      	bcs.n	8000ad6 <audioI2S_play+0x22>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	e001      	b.n	8000ada <audioI2S_play+0x26>
 8000ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ada:	461a      	mov	r2, r3
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f005 f81d 	bl	8005b1c <HAL_I2S_Transmit_DMA>
  return true;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000100 	.word	0x20000100

08000af0 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000af4:	f7ff ff14 	bl	8000920 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <audioI2S_pause+0x18>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 f8b5 	bl	8005c6c <HAL_I2S_DMAPause>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000100 	.word	0x20000100

08000b0c <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b10:	f7ff feba 	bl	8000888 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <audioI2S_resume+0x18>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 f909 	bl	8005d30 <HAL_I2S_DMAResume>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000100 	.word	0x20000100

08000b28 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b2c:	f7ff fef8 	bl	8000920 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <audioI2S_stop+0x18>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f005 f98f 	bl	8005e58 <HAL_I2S_DMAStop>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000100 	.word	0x20000100

08000b44 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_I2S_TxCpltCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b56:	f000 f929 	bl	8000dac <audioI2S_fullTransfer_Callback>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00

08000b68 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b7a:	f000 f90b 	bl	8000d94 <audioI2S_halfTransfer_Callback>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40003c00 	.word	0x40003c00

08000b8c <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <wavPlayer_reset+0x1c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <wavPlayer_reset+0x20>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20002138 	.word	0x20002138
 8000bac:	20002140 	.word	0x20002140

08000bb0 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <wavPlayer_fileSelect+0x48>)
 8000bc2:	f00c fad9 	bl	800d178 <f_open>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e00e      	b.n	8000bee <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	f107 010c 	add.w	r1, r7, #12
 8000bd8:	222c      	movs	r2, #44	; 0x2c
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <wavPlayer_fileSelect+0x48>)
 8000bdc:	f00c fc98 	bl	800d510 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <wavPlayer_fileSelect+0x4c>)
 8000be4:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <wavPlayer_fileSelect+0x50>)
 8000bea:	6013      	str	r3, [r2, #0]
  return true;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000104 	.word	0x20000104
 8000bfc:	20001134 	.word	0x20001134
 8000c00:	2000213c 	.word	0x2000213c

08000c04 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <wavPlayer_play+0x48>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <wavPlayer_play+0x4c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff3e 	bl	8000a94 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <wavPlayer_play+0x50>)
 8000c1c:	f00c fe7f 	bl	800d91e <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <wavPlayer_play+0x54>)
 8000c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <wavPlayer_play+0x58>)
 8000c28:	480a      	ldr	r0, [pc, #40]	; (8000c54 <wavPlayer_play+0x50>)
 8000c2a:	f00c fc71 	bl	800d510 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <wavPlayer_play+0x5c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <wavPlayer_play+0x54>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <wavPlayer_play+0x60>)
 8000c3a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <wavPlayer_play+0x58>)
 8000c42:	f7ff ff37 	bl	8000ab4 <audioI2S_play>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20002144 	.word	0x20002144
 8000c50:	2000213c 	.word	0x2000213c
 8000c54:	20000104 	.word	0x20000104
 8000c58:	20002140 	.word	0x20002140
 8000c5c:	20001138 	.word	0x20001138
 8000c60:	20001134 	.word	0x20001134
 8000c64:	20002138 	.word	0x20002138

08000c68 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <wavPlayer_process+0xc8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d859      	bhi.n	8000d2a <wavPlayer_process+0xc2>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <wavPlayer_process+0x14>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000d29 	.word	0x08000d29
 8000c80:	08000c8d 	.word	0x08000c8d
 8000c84:	08000ccf 	.word	0x08000ccf
 8000c88:	08000d11 	.word	0x08000d11
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <wavPlayer_process+0xcc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <wavPlayer_process+0xc8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <wavPlayer_process+0xcc>)
 8000c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9e:	4926      	ldr	r1, [pc, #152]	; (8000d38 <wavPlayer_process+0xd0>)
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <wavPlayer_process+0xd4>)
 8000ca2:	f00c fc35 	bl	800d510 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <wavPlayer_process+0xd8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cae:	d907      	bls.n	8000cc0 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cbc:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cbe:	e034      	b.n	8000d2a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <wavPlayer_process+0xc8>)
 8000cc8:	2203      	movs	r2, #3
 8000cca:	701a      	strb	r2, [r3, #0]
    break;
 8000ccc:	e02d      	b.n	8000d2a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <wavPlayer_process+0xc8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <wavPlayer_process+0xdc>)
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <wavPlayer_process+0xd4>)
 8000ce4:	f00c fc14 	bl	800d510 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf0:	d907      	bls.n	8000d02 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cfe:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d00:	e013      	b.n	8000d2a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <wavPlayer_process+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <wavPlayer_process+0xc8>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
    break;
 8000d0e:	e00c      	b.n	8000d2a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <wavPlayer_process+0xd4>)
 8000d12:	f00c fdda 	bl	800d8ca <f_close>
    wavPlayer_reset();
 8000d16:	f7ff ff39 	bl	8000b8c <wavPlayer_reset>
    isFinished = true;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <wavPlayer_process+0xe0>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <wavPlayer_process+0xc8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
    break;
 8000d26:	e000      	b.n	8000d2a <wavPlayer_process+0xc2>
    break;
 8000d28:	bf00      	nop
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20002145 	.word	0x20002145
 8000d34:	20002140 	.word	0x20002140
 8000d38:	20001138 	.word	0x20001138
 8000d3c:	20000104 	.word	0x20000104
 8000d40:	20002138 	.word	0x20002138
 8000d44:	20001938 	.word	0x20001938
 8000d48:	20002144 	.word	0x20002144

08000d4c <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d50:	f7ff feea 	bl	8000b28 <audioI2S_stop>
  isFinished = true;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <wavPlayer_stop+0x14>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20002144 	.word	0x20002144

08000d64 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d68:	f7ff fec2 	bl	8000af0 <audioI2S_pause>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d74:	f7ff feca 	bl	8000b0c <audioI2S_resume>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return isFinished;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <wavPlayer_isFinished+0x14>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20002144 	.word	0x20002144

08000d94 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <audioI2S_halfTransfer_Callback+0x14>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20002145 	.word	0x20002145

08000dac <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <audioI2S_fullTransfer_Callback+0x14>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20002145 	.word	0x20002145

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b095      	sub	sp, #84	; 0x54
 8000dc8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fc6d 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f90f 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f000 fa0b 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd6:	f000 f9e9 	bl	80011ac <MX_DMA_Init>
  MX_I2C1_Init();
 8000dda:	f000 f98b 	bl	80010f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dde:	f000 f9b7 	bl	8001150 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000de2:	f007 fb7b 	bl	80084dc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000de6:	f00d f81b 	bl	800de20 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000dea:	4c72      	ldr	r4, [pc, #456]	; (8000fb4 <main+0x1f0>)
 8000dec:	2300      	movs	r3, #0
 8000dee:	9311      	str	r3, [sp, #68]	; 0x44
 8000df0:	4668      	mov	r0, sp
 8000df2:	f104 0310 	add.w	r3, r4, #16
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f00d fba3 	bl	800e544 <memcpy>
 8000dfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e02:	f7ff fb97 	bl	8000534 <CS43_Init>
  CS43_SetVolume(85);//0-255
 8000e06:	2055      	movs	r0, #85	; 0x55
 8000e08:	f7ff fce4 	bl	80007d4 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fc97 	bl	8000740 <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 8000e12:	4869      	ldr	r0, [pc, #420]	; (8000fb8 <main+0x1f4>)
 8000e14:	f7ff fe2e 	bl	8000a74 <audioI2S_setHandle>
  bool isSdcCardMounted=0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToogle=0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int x=0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
  WAW_FILE=WAW_FILE7;
 8000e24:	4b65      	ldr	r3, [pc, #404]	; (8000fbc <main+0x1f8>)
 8000e26:	4a66      	ldr	r2, [pc, #408]	; (8000fc0 <main+0x1fc>)
 8000e28:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e2a:	f00d f81f 	bl	800de6c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state==APPLICATION_START)
 8000e2e:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <main+0x200>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d106      	bne.n	8000e44 <main+0x80>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3c:	4862      	ldr	r0, [pc, #392]	; (8000fc8 <main+0x204>)
 8000e3e:	f001 fb6f 	bl	8002520 <HAL_GPIO_WritePin>
 8000e42:	e009      	b.n	8000e58 <main+0x94>
    }
    else if(Appli_state==APPLICATION_DISCONNECT)
 8000e44:	4b5f      	ldr	r3, [pc, #380]	; (8000fc4 <main+0x200>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d105      	bne.n	8000e58 <main+0x94>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e52:	485d      	ldr	r0, [pc, #372]	; (8000fc8 <main+0x204>)
 8000e54:	f001 fb64 	bl	8002520 <HAL_GPIO_WritePin>
    }
    if(Appli_state==APPLICATION_READY)
 8000e58:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <main+0x200>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d1e4      	bne.n	8000e2a <main+0x66>
    {
    	if(!isSdcCardMounted)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f083 0301 	eor.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <main+0xb6>
    	{
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4957      	ldr	r1, [pc, #348]	; (8000fcc <main+0x208>)
 8000e70:	4857      	ldr	r0, [pc, #348]	; (8000fd0 <main+0x20c>)
 8000e72:	f00c f93b 	bl	800d0ec <f_mount>
    		isSdcCardMounted=1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]
    	}
    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4855      	ldr	r0, [pc, #340]	; (8000fd4 <main+0x210>)
 8000e7e:	f001 fb37 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0d0      	beq.n	8000e2a <main+0x66>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	484e      	ldr	r0, [pc, #312]	; (8000fc8 <main+0x204>)
 8000e90:	f001 fb46 	bl	8002520 <HAL_GPIO_WritePin>
    		HAL_Delay(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e98:	f000 fc78 	bl	800178c <HAL_Delay>

    		x++;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]
    		if(x==1) WAW_FILE=WAW_FILE1;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <main+0xea>
 8000ea8:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <main+0x1f8>)
 8000eaa:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <main+0x214>)
 8000eac:	601a      	str	r2, [r3, #0]
    		if(x==2) WAW_FILE=WAW_FILE2;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d102      	bne.n	8000eba <main+0xf6>
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <main+0x1f8>)
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <main+0x218>)
 8000eb8:	601a      	str	r2, [r3, #0]
    		if(x==3) WAW_FILE=WAW_FILE3;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d102      	bne.n	8000ec6 <main+0x102>
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <main+0x1f8>)
 8000ec2:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <main+0x21c>)
 8000ec4:	601a      	str	r2, [r3, #0]
    		if(x==4) WAW_FILE=WAW_FILE4;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d102      	bne.n	8000ed2 <main+0x10e>
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <main+0x1f8>)
 8000ece:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <main+0x220>)
 8000ed0:	601a      	str	r2, [r3, #0]
    		if(x==5) WAW_FILE=WAW_FILE5;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d102      	bne.n	8000ede <main+0x11a>
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <main+0x1f8>)
 8000eda:	4a43      	ldr	r2, [pc, #268]	; (8000fe8 <main+0x224>)
 8000edc:	601a      	str	r2, [r3, #0]
    		if(x==6) WAW_FILE=WAW_FILE6;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d102      	bne.n	8000eea <main+0x126>
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <main+0x1f8>)
 8000ee6:	4a41      	ldr	r2, [pc, #260]	; (8000fec <main+0x228>)
 8000ee8:	601a      	str	r2, [r3, #0]
    		if(x==7) WAW_FILE=WAW_FILE7;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d102      	bne.n	8000ef6 <main+0x132>
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <main+0x1f8>)
 8000ef2:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <main+0x1fc>)
 8000ef4:	601a      	str	r2, [r3, #0]
    		if(x>8) x=0;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	dd01      	ble.n	8000f00 <main+0x13c>
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
    		if(wavPlayer_fileSelect(WAW_FILE))
 8000f00:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <main+0x1f8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe53 	bl	8000bb0 <wavPlayer_fileSelect>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <main+0x152>
    		{
    			wavPlayer_play();
 8000f10:	f7ff fe78 	bl	8000c04 <wavPlayer_play>
 8000f14:	e03e      	b.n	8000f94 <main+0x1d0>
    		}
    		else
    		{
    			isSdcCardMounted=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]

    		}

    		while(wavPlayer_isFinished())
 8000f1a:	e03b      	b.n	8000f94 <main+0x1d0>
    		{
    			wavPlayer_process();
 8000f1c:	f7ff fea4 	bl	8000c68 <wavPlayer_process>
    			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f20:	2101      	movs	r1, #1
 8000f22:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <main+0x210>)
 8000f24:	f001 fae4 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d032      	beq.n	8000f94 <main+0x1d0>
    			   {
    				pauseResumeToogle=!pauseResumeToogle;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2301      	movne	r3, #1
 8000f36:	2300      	moveq	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	71bb      	strb	r3, [r7, #6]
    				if(pauseResumeToogle)
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <main+0x1a4>
    				{
    					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <main+0x204>)
 8000f58:	f001 fae2 	bl	8002520 <HAL_GPIO_WritePin>
    					wavPlayer_pause();
 8000f5c:	f7ff ff02 	bl	8000d64 <wavPlayer_pause>
    					HAL_Delay(200);
 8000f60:	20c8      	movs	r0, #200	; 0xc8
 8000f62:	f000 fc13 	bl	800178c <HAL_Delay>
 8000f66:	e015      	b.n	8000f94 <main+0x1d0>
    				}
    				else
    				{
    					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <main+0x204>)
 8000f70:	f001 fad6 	bl	8002520 <HAL_GPIO_WritePin>
    					HAL_Delay(1000);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f000 fc08 	bl	800178c <HAL_Delay>
    					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <main+0x210>)
 8000f80:	f001 fab6 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <main+0x1cc>
    					{
    						wavPlayer_stop();
 8000f8a:	f7ff fedf 	bl	8000d4c <wavPlayer_stop>
 8000f8e:	e001      	b.n	8000f94 <main+0x1d0>
    					}
    					else	wavPlayer_resume();
 8000f90:	f7ff feee 	bl	8000d70 <wavPlayer_resume>
    		while(wavPlayer_isFinished())
 8000f94:	f7ff fef2 	bl	8000d7c <wavPlayer_isFinished>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1be      	bne.n	8000f1c <main+0x158>

    				}

    			   }
    		}
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <main+0x204>)
 8000fa6:	f001 fabb 	bl	8002520 <HAL_GPIO_WritePin>
    		HAL_Delay(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f000 fbed 	bl	800178c <HAL_Delay>
    MX_USB_HOST_Process();
 8000fb2:	e73a      	b.n	8000e2a <main+0x66>
 8000fb4:	2000218c 	.word	0x2000218c
 8000fb8:	20002244 	.word	0x20002244
 8000fbc:	200021e0 	.word	0x200021e0
 8000fc0:	0800e718 	.word	0x0800e718
 8000fc4:	20002180 	.word	0x20002180
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	20002290 	.word	0x20002290
 8000fd0:	200032c4 	.word	0x200032c4
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	0800e720 	.word	0x0800e720
 8000fdc:	0800e728 	.word	0x0800e728
 8000fe0:	0800e730 	.word	0x0800e730
 8000fe4:	0800e738 	.word	0x0800e738
 8000fe8:	0800e740 	.word	0x0800e740
 8000fec:	0800e748 	.word	0x0800e748

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b098      	sub	sp, #96	; 0x60
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00d faae 	bl	800e560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <SystemClock_Config+0xfc>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <SystemClock_Config+0xfc>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <SystemClock_Config+0xfc>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <SystemClock_Config+0x100>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <SystemClock_Config+0x100>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <SystemClock_Config+0x100>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105a:	2301      	movs	r3, #1
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001068:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800106e:	2308      	movs	r3, #8
 8001070:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001072:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800107c:	2307      	movs	r3, #7
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fca5 	bl	80069d4 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001090:	f000 f93e 	bl	8001310 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2105      	movs	r1, #5
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 ff06 	bl	8006ec4 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010be:	f000 f927 	bl	8001310 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010c2:	2301      	movs	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80010c6:	f240 130f 	movw	r3, #271	; 0x10f
 80010ca:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80010cc:	2306      	movs	r3, #6
 80010ce:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 f8dd 	bl	8007294 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80010e0:	f000 f916 	bl	8001310 <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3760      	adds	r7, #96	; 0x60
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_I2C1_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_I2C1_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_I2C1_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x50>)
 8001132:	f002 ff7f 	bl	8004034 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f8e8 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000218c 	.word	0x2000218c
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <MX_I2S3_Init+0x58>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2S3_Init+0x54>)
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_32B;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2S3_Init+0x54>)
 800116a:	2205      	movs	r2, #5
 800116c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001178:	f64a 4244 	movw	r2, #44100	; 0xac44
 800117c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2S3_Init+0x54>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2S3_Init+0x54>)
 8001192:	f004 fb83 	bl	800589c <HAL_I2S_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800119c:	f000 f8b8 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20002244 	.word	0x20002244
 80011a8:	40003c00 	.word	0x40003c00

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2010      	movs	r0, #16
 80011d4:	f000 fbd9 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011d8:	2010      	movs	r0, #16
 80011da:	f000 fbf2 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <MX_GPIO_Init+0x114>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <MX_GPIO_Init+0x114>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <MX_GPIO_Init+0x114>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <MX_GPIO_Init+0x114>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <MX_GPIO_Init+0x114>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_GPIO_Init+0x114>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MX_GPIO_Init+0x114>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <MX_GPIO_Init+0x114>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0x114>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0x114>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <MX_GPIO_Init+0x114>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0x114>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_GPIO_Init+0x114>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_GPIO_Init+0x114>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_GPIO_Init+0x114>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <MX_GPIO_Init+0x118>)
 8001294:	f001 f944 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001298:	2200      	movs	r2, #0
 800129a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <MX_GPIO_Init+0x11c>)
 80012a0:	f001 f93e 	bl	8002520 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <MX_GPIO_Init+0x118>)
 80012bc:	f000 ff7c 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <MX_GPIO_Init+0x120>)
 80012d4:	f000 ff70 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80012d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0x11c>)
 80012f2:	f000 ff61 	bl	80021b8 <HAL_GPIO_Init>

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40020000 	.word	0x40020000

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>
	...

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_MspInit+0x4c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135a:	2007      	movs	r0, #7
 800135c:	f000 fb0a 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_I2C_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80013aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b0:	2312      	movs	r3, #18
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013bc:	2304      	movs	r3, #4
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <HAL_I2C_MspInit+0x8c>)
 80013c8:	f000 fef6 	bl	80021b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a45      	ldr	r2, [pc, #276]	; (8001530 <HAL_I2S_MspInit+0x134>)
 800141a:	4293      	cmp	r3, r2
 800141c:	f040 8083 	bne.w	8001526 <HAL_I2S_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_I2S_MspInit+0x138>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a42      	ldr	r2, [pc, #264]	; (8001534 <HAL_I2S_MspInit+0x138>)
 800142a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b40      	ldr	r3, [pc, #256]	; (8001534 <HAL_I2S_MspInit+0x138>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_I2S_MspInit+0x138>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a3b      	ldr	r2, [pc, #236]	; (8001534 <HAL_I2S_MspInit+0x138>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_I2S_MspInit+0x138>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_I2S_MspInit+0x138>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a34      	ldr	r2, [pc, #208]	; (8001534 <HAL_I2S_MspInit+0x138>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_I2S_MspInit+0x138>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001474:	2310      	movs	r3, #16
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001484:	2306      	movs	r3, #6
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	482a      	ldr	r0, [pc, #168]	; (8001538 <HAL_I2S_MspInit+0x13c>)
 8001490:	f000 fe92 	bl	80021b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001494:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014a6:	2306      	movs	r3, #6
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <HAL_I2S_MspInit+0x140>)
 80014b2:	f000 fe81 	bl	80021b8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014b8:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_I2S_MspInit+0x148>)
 80014ba:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014dc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_I2S_MspInit+0x144>)
 80014fa:	2203      	movs	r2, #3
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_I2S_MspInit+0x144>)
 8001500:	2200      	movs	r2, #0
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_I2S_MspInit+0x144>)
 8001506:	2200      	movs	r2, #0
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <HAL_I2S_MspInit+0x144>)
 800150c:	f000 fa74 	bl	80019f8 <HAL_DMA_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 8001516:	f7ff fefb 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_I2S_MspInit+0x144>)
 800151e:	639a      	str	r2, [r3, #56]	; 0x38
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_I2S_MspInit+0x144>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40003c00 	.word	0x40003c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020800 	.word	0x40020800
 8001540:	200021e4 	.word	0x200021e4
 8001544:	40026088 	.word	0x40026088

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f8da 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DMA1_Stream5_IRQHandler+0x10>)
 80015a2:	f000 fb9f 	bl	8001ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200021e4 	.word	0x200021e4

080015b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <OTG_FS_IRQHandler+0x10>)
 80015b6:	f001 fa37 	bl	8002a28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200046d4 	.word	0x200046d4

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f00c ff6c 	bl	800e4d0 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00002000 	.word	0x00002000
 8001628:	20002148 	.word	0x20002148
 800162c:	200049e8 	.word	0x200049e8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd7 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f00c ff2b 	bl	800e4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fb9d 	bl	8000dc4 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001698:	0800e8bc 	.word	0x0800e8bc
  ldr r2, =_sbss
 800169c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80016a0:	200049e8 	.word	0x200049e8

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f94f 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe1e 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f967 	bl	80019de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f92f 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	2000228c 	.word	0x2000228c

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000228c 	.word	0x2000228c

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff feb6 	bl	8001774 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e099      	b.n	8001b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	e00f      	b.n	8001a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a36:	f7ff fe9d 	bl	8001774 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d908      	bls.n	8001a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e078      	b.n	8001b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e8      	bne.n	8001a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_DMA_Init+0x158>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d117      	bne.n	8001b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fadf 	bl	80020c0 <DMA_CheckFifoParam>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b16:	2301      	movs	r3, #1
 8001b18:	e016      	b.n	8001b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa96 	bl	8002054 <DMA_CalcBaseAndBitshift>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	223f      	movs	r2, #63	; 0x3f
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	f010803f 	.word	0xf010803f

08001b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_DMA_Start_IT+0x26>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e040      	b.n	8001bfc <HAL_DMA_Start_IT+0xa8>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d12f      	bne.n	8001bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fa28 	bl	8001ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	223f      	movs	r2, #63	; 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0216 	orr.w	r2, r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e005      	b.n	8001bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c12:	f7ff fdaf 	bl	8001774 <HAL_GetTick>
 8001c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e052      	b.n	8001cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0216 	bic.w	r2, r2, #22
 8001c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <HAL_DMA_Abort+0x62>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	e013      	b.n	8001cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c88:	f7ff fd74 	bl	8001774 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d90c      	bls.n	8001cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e015      	b.n	8001cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e4      	bne.n	8001c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	223f      	movs	r2, #63	; 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_DMA_IRQHandler+0x258>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_DMA_IRQHandler+0x25c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2208      	movs	r2, #8
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0204 	bic.w	r2, r2, #4
 8001d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2201      	movs	r2, #1
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2201      	movs	r2, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2204      	movs	r2, #4
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d043      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03c      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2210      	movs	r2, #16
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
 8001e12:	e01f      	b.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e016      	b.n	8001e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0208 	bic.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2220      	movs	r2, #32
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 808e 	beq.w	8001f82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8086 	beq.w	8001f82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d136      	bne.n	8001efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0216 	bic.w	r2, r2, #22
 8001e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x1da>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0208 	bic.w	r2, r2, #8
 8001ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	223f      	movs	r2, #63	; 0x3f
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d07d      	beq.n	8001fee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
        }
        return;
 8001efa:	e078      	b.n	8001fee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01c      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d030      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e02b      	b.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d027      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
 8001f3a:	e022      	b.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0210 	bic.w	r2, r2, #16
 8001f60:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d032      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d022      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d307      	bcc.n	8001fca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f2      	bne.n	8001fae <HAL_DMA_IRQHandler+0x2ca>
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e000      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fee:	bf00      	nop
    }
  }
}
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop

08001ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d108      	bne.n	8002038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002036:	e007      	b.n	8002048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3b10      	subs	r3, #16
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <DMA_CalcBaseAndBitshift+0x68>)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d909      	bls.n	8002096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	1d1a      	adds	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	659a      	str	r2, [r3, #88]	; 0x58
 8002094:	e007      	b.n	80020a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	aaaaaaab 	.word	0xaaaaaaab
 80020bc:	0800e810 	.word	0x0800e810

080020c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11f      	bne.n	800211a <DMA_CheckFifoParam+0x5a>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d856      	bhi.n	800218e <DMA_CheckFifoParam+0xce>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <DMA_CheckFifoParam+0x28>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	0800210b 	.word	0x0800210b
 80020f0:	080020f9 	.word	0x080020f9
 80020f4:	0800218f 	.word	0x0800218f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d046      	beq.n	8002192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002108:	e043      	b.n	8002192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002112:	d140      	bne.n	8002196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002118:	e03d      	b.n	8002196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002122:	d121      	bne.n	8002168 <DMA_CheckFifoParam+0xa8>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d837      	bhi.n	800219a <DMA_CheckFifoParam+0xda>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <DMA_CheckFifoParam+0x70>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002141 	.word	0x08002141
 8002134:	08002147 	.word	0x08002147
 8002138:	08002141 	.word	0x08002141
 800213c:	08002159 	.word	0x08002159
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      break;
 8002144:	e030      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d025      	beq.n	800219e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002156:	e022      	b.n	800219e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002160:	d11f      	bne.n	80021a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002166:	e01c      	b.n	80021a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d903      	bls.n	8002176 <DMA_CheckFifoParam+0xb6>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d003      	beq.n	800217c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002174:	e018      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      break;
 800217a:	e015      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      break;
 800218c:	e00b      	b.n	80021a6 <DMA_CheckFifoParam+0xe6>
      break;
 800218e:	bf00      	nop
 8002190:	e00a      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e008      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e006      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e004      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
    }
  } 
  
  return status; 
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e16b      	b.n	80024ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 815a 	bne.w	80024a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80b4 	beq.w	80024a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a5f      	ldr	r2, [pc, #380]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235a:	4a5b      	ldr	r2, [pc, #364]	; (80024c8 <HAL_GPIO_Init+0x310>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_GPIO_Init+0x314>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x226>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a51      	ldr	r2, [pc, #324]	; (80024d0 <HAL_GPIO_Init+0x318>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x222>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a50      	ldr	r2, [pc, #320]	; (80024d4 <HAL_GPIO_Init+0x31c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x21e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_GPIO_Init+0x320>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x21a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <HAL_GPIO_Init+0x324>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x216>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4d      	ldr	r2, [pc, #308]	; (80024e0 <HAL_GPIO_Init+0x328>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x212>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x20e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4b      	ldr	r2, [pc, #300]	; (80024e8 <HAL_GPIO_Init+0x330>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x20a>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00e      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023c2:	2308      	movs	r3, #8
 80023c4:	e00c      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00a      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_GPIO_Init+0x310>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002422:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_GPIO_Init+0x334>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_GPIO_Init+0x334>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_GPIO_Init+0x334>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_GPIO_Init+0x334>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f ae90 	bls.w	80021d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40021c00 	.word	0x40021c00
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e001      	b.n	8002512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800253c:	e003      	b.n	8002546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	041a      	lsls	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	619a      	str	r2, [r3, #24]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002554:	b08f      	sub	sp, #60	; 0x3c
 8002556:	af0a      	add	r7, sp, #40	; 0x28
 8002558:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e054      	b.n	800260e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f00b fcac 	bl	800dedc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f005 f854 	bl	8007650 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	687e      	ldr	r6, [r7, #4]
 80025b0:	466d      	mov	r5, sp
 80025b2:	f106 0410 	add.w	r4, r6, #16
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c6:	1d33      	adds	r3, r6, #4
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f004 ffce 	bl	800756c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 f84b 	bl	8007672 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	687e      	ldr	r6, [r7, #4]
 80025e4:	466d      	mov	r5, sp
 80025e6:	f106 0410 	add.w	r4, r6, #16
 80025ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80025fa:	1d33      	adds	r3, r6, #4
 80025fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fe:	6838      	ldr	r0, [r7, #0]
 8002600:	f005 f9b2 	bl	8007968 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002616 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002616:	b590      	push	{r4, r7, lr}
 8002618:	b089      	sub	sp, #36	; 0x24
 800261a:	af04      	add	r7, sp, #16
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	4608      	mov	r0, r1
 8002620:	4611      	mov	r1, r2
 8002622:	461a      	mov	r2, r3
 8002624:	4603      	mov	r3, r0
 8002626:	70fb      	strb	r3, [r7, #3]
 8002628:	460b      	mov	r3, r1
 800262a:	70bb      	strb	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_HCD_HC_Init+0x28>
 800263a:	2302      	movs	r3, #2
 800263c:	e076      	b.n	800272c <HAL_HCD_HC_Init+0x116>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	333d      	adds	r3, #61	; 0x3d
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3338      	adds	r3, #56	; 0x38
 8002666:	787a      	ldrb	r2, [r7, #1]
 8002668:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3340      	adds	r3, #64	; 0x40
 8002678:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800267a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3339      	adds	r3, #57	; 0x39
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	333f      	adds	r3, #63	; 0x3f
 800269c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80026a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	78ba      	ldrb	r2, [r7, #2]
 80026a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026aa:	b2d0      	uxtb	r0, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	333a      	adds	r3, #58	; 0x3a
 80026b8:	4602      	mov	r2, r0
 80026ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80026bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da09      	bge.n	80026d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333b      	adds	r3, #59	; 0x3b
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e008      	b.n	80026ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	333b      	adds	r3, #59	; 0x3b
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333c      	adds	r3, #60	; 0x3c
 80026f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	787c      	ldrb	r4, [r7, #1]
 8002704:	78ba      	ldrb	r2, [r7, #2]
 8002706:	78f9      	ldrb	r1, [r7, #3]
 8002708:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4623      	mov	r3, r4
 800271a:	f005 fa9f 	bl	8007c5c <USB_HC_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}

08002734 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_HCD_HC_Halt+0x1e>
 800274e:	2302      	movs	r3, #2
 8002750:	e00f      	b.n	8002772 <HAL_HCD_HC_Halt+0x3e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f005 fcdb 	bl	800811e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	70fb      	strb	r3, [r7, #3]
 800278e:	460b      	mov	r3, r1
 8002790:	70bb      	strb	r3, [r7, #2]
 8002792:	4613      	mov	r3, r2
 8002794:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	333b      	adds	r3, #59	; 0x3b
 80027a4:	78ba      	ldrb	r2, [r7, #2]
 80027a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	333f      	adds	r3, #63	; 0x3f
 80027b6:	787a      	ldrb	r2, [r7, #1]
 80027b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80027ba:	7c3b      	ldrb	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d112      	bne.n	80027e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3342      	adds	r3, #66	; 0x42
 80027ce:	2203      	movs	r2, #3
 80027d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	333d      	adds	r3, #61	; 0x3d
 80027e0:	7f3a      	ldrb	r2, [r7, #28]
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e008      	b.n	80027f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3342      	adds	r3, #66	; 0x42
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	f200 80c6 	bhi.w	800298c <HAL_HCD_HC_SubmitRequest+0x210>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	08002819 	.word	0x08002819
 800280c:	08002979 	.word	0x08002979
 8002810:	0800287d 	.word	0x0800287d
 8002814:	080028fb 	.word	0x080028fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002818:	7c3b      	ldrb	r3, [r7, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	f040 80b8 	bne.w	8002990 <HAL_HCD_HC_SubmitRequest+0x214>
 8002820:	78bb      	ldrb	r3, [r7, #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80b4 	bne.w	8002990 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002828:	8b3b      	ldrh	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3355      	adds	r3, #85	; 0x55
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3355      	adds	r3, #85	; 0x55
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3342      	adds	r3, #66	; 0x42
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002866:	e093      	b.n	8002990 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3342      	adds	r3, #66	; 0x42
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
      break;
 800287a:	e089      	b.n	8002990 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800287c:	78bb      	ldrb	r3, [r7, #2]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d11d      	bne.n	80028be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3355      	adds	r3, #85	; 0x55
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3342      	adds	r3, #66	; 0x42
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80028a8:	e073      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3342      	adds	r3, #66	; 0x42
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
      break;
 80028bc:	e069      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3354      	adds	r3, #84	; 0x54
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3342      	adds	r3, #66	; 0x42
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
      break;
 80028e4:	e055      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3342      	adds	r3, #66	; 0x42
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
      break;
 80028f8:	e04b      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028fa:	78bb      	ldrb	r3, [r7, #2]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11d      	bne.n	800293c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3355      	adds	r3, #85	; 0x55
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3342      	adds	r3, #66	; 0x42
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002926:	e034      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3342      	adds	r3, #66	; 0x42
 8002936:	2202      	movs	r2, #2
 8002938:	701a      	strb	r2, [r3, #0]
      break;
 800293a:	e02a      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3354      	adds	r3, #84	; 0x54
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3342      	adds	r3, #66	; 0x42
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
      break;
 8002962:	e016      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3342      	adds	r3, #66	; 0x42
 8002972:	2202      	movs	r2, #2
 8002974:	701a      	strb	r2, [r3, #0]
      break;
 8002976:	e00c      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3342      	adds	r3, #66	; 0x42
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
      break;
 800298a:	e002      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800298c:	bf00      	nop
 800298e:	e000      	b.n	8002992 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002990:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3344      	adds	r3, #68	; 0x44
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	8b3a      	ldrh	r2, [r7, #24]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	202c      	movs	r0, #44	; 0x2c
 80029ac:	fb00 f303 	mul.w	r3, r0, r3
 80029b0:	440b      	add	r3, r1
 80029b2:	334c      	adds	r3, #76	; 0x4c
 80029b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3360      	adds	r3, #96	; 0x60
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3350      	adds	r3, #80	; 0x50
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3339      	adds	r3, #57	; 0x39
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	222c      	movs	r2, #44	; 0x2c
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	3338      	adds	r3, #56	; 0x38
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	18d1      	adds	r1, r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	f005 fa2e 	bl	8007e78 <USB_HC_StartXfer>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop

08002a28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 ff51 	bl	80078e6 <USB_GetMode>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 80f6 	bne.w	8002c38 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 ff35 	bl	80078c0 <USB_ReadInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80ec 	beq.w	8002c36 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 ff2c 	bl	80078c0 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a72:	d104      	bne.n	8002a7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 ff1c 	bl	80078c0 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d104      	bne.n	8002a9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 ff0c 	bl	80078c0 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab2:	d104      	bne.n	8002abe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002abc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fefc 	bl	80078c0 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d103      	bne.n	8002ada <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 feee 	bl	80078c0 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aee:	d11c      	bne.n	8002b2a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002af8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	6938      	ldr	r0, [r7, #16]
 8002b0e:	f004 fdfd 	bl	800770c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b12:	6938      	ldr	r0, [r7, #16]
 8002b14:	f004 fe1e 	bl	8007754 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 ffd6 	bl	8007ad0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f00b fa57 	bl	800dfd8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fec6 	bl	80078c0 <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3e:	d102      	bne.n	8002b46 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f001 fa03 	bl	8003f4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 feb8 	bl	80078c0 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d106      	bne.n	8002b68 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f00b fa20 	bl	800dfa0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 fea7 	bl	80078c0 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d101      	bne.n	8002b80 <HAL_HCD_IRQHandler+0x158>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_HCD_IRQHandler+0x15a>
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0210 	bic.w	r2, r2, #16
 8002b94:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f001 f906 	bl	8003da8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0210 	orr.w	r2, r2, #16
 8002baa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fe85 	bl	80078c0 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc0:	d13a      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 fa98 	bl	80080fc <USB_HC_ReadInterrupt>
 8002bcc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e025      	b.n	8002c20 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d018      	beq.n	8002c1a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfe:	d106      	bne.n	8002c0e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8ab 	bl	8002d62 <HCD_HC_IN_IRQHandler>
 8002c0c:	e005      	b.n	8002c1a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fcc6 	bl	80035a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d3d4      	bcc.n	8002bd4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	e000      	b.n	8002c38 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c36:	bf00      	nop
    }
  }
}
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_HCD_Start+0x16>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e013      	b.n	8002c7c <HAL_HCD_Start+0x3e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 ff98 	bl	8007b98 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fcde 	bl	800762e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_HCD_Stop+0x16>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e00d      	b.n	8002cb6 <HAL_HCD_Stop+0x32>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f005 fb92 	bl	80083d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 ff3a 	bl	8007b44 <USB_ResetPort>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	781b      	ldrb	r3, [r3, #0]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3350      	adds	r3, #80	; 0x50
 8002d1c:	681b      	ldr	r3, [r3, #0]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 ff7e 	bl	8007c38 <USB_GetCurrentFrame>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 ff59 	bl	8007c0a <USB_GetHostSpeed>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d119      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2304      	movs	r3, #4
 8002da2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	0151      	lsls	r1, r2, #5
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	440a      	add	r2, r1
 8002dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	60d3      	str	r3, [r2, #12]
 8002dc4:	e101      	b.n	8002fca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d12b      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3361      	adds	r3, #97	; 0x61
 8002e00:	2207      	movs	r2, #7
 8002e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	0151      	lsls	r1, r2, #5
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	440a      	add	r2, r1
 8002e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 f975 	bl	800811e <USB_HC_Halt>
 8002e34:	e0c9      	b.n	8002fca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d109      	bne.n	8002e60 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	6093      	str	r3, [r2, #8]
 8002e5e:	e0b4      	b.n	8002fca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d133      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3361      	adds	r3, #97	; 0x61
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2308      	movs	r3, #8
 8002eca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f005 f921 	bl	800811e <USB_HC_Halt>
 8002edc:	e075      	b.n	8002fca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef4:	d134      	bne.n	8002f60 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	0151      	lsls	r1, r2, #5
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	440a      	add	r2, r1
 8002f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	2208      	movs	r2, #8
 8002f26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	2310      	movs	r3, #16
 8002f38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	461a      	mov	r2, r3
 8002f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f005 f8e0 	bl	800811e <USB_HC_Halt>
 8002f5e:	e034      	b.n	8002fca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d129      	bne.n	8002fca <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	0151      	lsls	r1, r2, #5
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	440a      	add	r2, r1
 8002f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3361      	adds	r3, #97	; 0x61
 8002fa4:	2206      	movs	r2, #6
 8002fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f005 f8b3 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d122      	bne.n	8003028 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f005 f886 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003024:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003026:	e2ba      	b.n	800359e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 811b 	bne.w	8003276 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d019      	beq.n	800307c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3348      	adds	r3, #72	; 0x48
 8003056:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	0159      	lsls	r1, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	440b      	add	r3, r1
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	202c      	movs	r0, #44	; 0x2c
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	440b      	add	r3, r1
 8003078:	3350      	adds	r3, #80	; 0x50
 800307a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3361      	adds	r3, #97	; 0x61
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	335c      	adds	r3, #92	; 0x5c
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	2301      	movs	r3, #1
 80030b0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	333f      	adds	r3, #63	; 0x3f
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	333f      	adds	r3, #63	; 0x3f
 80030d4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d121      	bne.n	800311e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	0151      	lsls	r1, r2, #5
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	440a      	add	r2, r1
 80030f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f005 f80a 	bl	800811e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	461a      	mov	r2, r3
 8003118:	2310      	movs	r3, #16
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	e066      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	333f      	adds	r3, #63	; 0x3f
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d127      	bne.n	8003182 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	0151      	lsls	r1, r2, #5
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	440a      	add	r2, r1
 8003148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800314c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003150:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3360      	adds	r3, #96	; 0x60
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	b2d9      	uxtb	r1, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	202c      	movs	r0, #44	; 0x2c
 800316e:	fb00 f303 	mul.w	r3, r0, r3
 8003172:	4413      	add	r3, r2
 8003174:	3360      	adds	r3, #96	; 0x60
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f00a ff3a 	bl	800dff4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003180:	e034      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	333f      	adds	r3, #63	; 0x3f
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d12a      	bne.n	80031ec <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3360      	adds	r3, #96	; 0x60
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3354      	adds	r3, #84	; 0x54
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2d8      	uxtb	r0, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3354      	adds	r3, #84	; 0x54
 80031cc:	4602      	mov	r2, r0
 80031ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3360      	adds	r3, #96	; 0x60
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f00a ff04 	bl	800dff4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d12b      	bne.n	800324c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3348      	adds	r3, #72	; 0x48
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	202c      	movs	r0, #44	; 0x2c
 800320a:	fb00 f202 	mul.w	r2, r0, r2
 800320e:	440a      	add	r2, r1
 8003210:	3240      	adds	r2, #64	; 0x40
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	fbb3 f3f2 	udiv	r3, r3, r2
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 81be 	beq.w	800359e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3354      	adds	r3, #84	; 0x54
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b2d8      	uxtb	r0, r3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3354      	adds	r3, #84	; 0x54
 8003246:	4602      	mov	r2, r0
 8003248:	701a      	strb	r2, [r3, #0]
}
 800324a:	e1a8      	b.n	800359e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3354      	adds	r3, #84	; 0x54
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2d8      	uxtb	r0, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3354      	adds	r3, #84	; 0x54
 8003270:	4602      	mov	r2, r0
 8003272:	701a      	strb	r2, [r3, #0]
}
 8003274:	e193      	b.n	800359e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	f040 8106 	bne.w	800349a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	0151      	lsls	r1, r2, #5
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	440a      	add	r2, r1
 80032a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a8:	f023 0302 	bic.w	r3, r3, #2
 80032ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3361      	adds	r3, #97	; 0x61
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d109      	bne.n	80032d6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e0c9      	b.n	800346a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3361      	adds	r3, #97	; 0x61
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d109      	bne.n	80032fe <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3360      	adds	r3, #96	; 0x60
 80032f8:	2205      	movs	r2, #5
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e0b5      	b.n	800346a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3361      	adds	r3, #97	; 0x61
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d009      	beq.n	8003326 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3361      	adds	r3, #97	; 0x61
 8003320:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003322:	2b08      	cmp	r3, #8
 8003324:	d150      	bne.n	80033c8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	335c      	adds	r3, #92	; 0x5c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	202c      	movs	r0, #44	; 0x2c
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	440b      	add	r3, r1
 8003344:	335c      	adds	r3, #92	; 0x5c
 8003346:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	335c      	adds	r3, #92	; 0x5c
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d912      	bls.n	8003382 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	335c      	adds	r3, #92	; 0x5c
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3360      	adds	r3, #96	; 0x60
 800337c:	2204      	movs	r2, #4
 800337e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003380:	e073      	b.n	800346a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3360      	adds	r3, #96	; 0x60
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033aa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033b2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033c6:	e050      	b.n	800346a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3361      	adds	r3, #97	; 0x61
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d122      	bne.n	8003422 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3360      	adds	r3, #96	; 0x60
 80033ea:	2202      	movs	r2, #2
 80033ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003404:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e023      	b.n	800346a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	3361      	adds	r3, #97	; 0x61
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b07      	cmp	r3, #7
 8003434:	d119      	bne.n	800346a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	202c      	movs	r0, #44	; 0x2c
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	440b      	add	r3, r1
 8003454:	335c      	adds	r3, #92	; 0x5c
 8003456:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3360      	adds	r3, #96	; 0x60
 8003466:	2204      	movs	r2, #4
 8003468:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	2302      	movs	r3, #2
 800347a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	b2d9      	uxtb	r1, r3
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	202c      	movs	r0, #44	; 0x2c
 8003486:	fb00 f303 	mul.w	r3, r0, r3
 800348a:	4413      	add	r3, r2
 800348c:	3360      	adds	r3, #96	; 0x60
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f00a fdae 	bl	800dff4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003498:	e081      	b.n	800359e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d176      	bne.n	800359e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	333f      	adds	r3, #63	; 0x3f
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d121      	bne.n	8003508 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	335c      	adds	r3, #92	; 0x5c
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	0151      	lsls	r1, r2, #5
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	440a      	add	r2, r1
 80034ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f004 fe0c 	bl	800811e <USB_HC_Halt>
 8003506:	e041      	b.n	800358c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	333f      	adds	r3, #63	; 0x3f
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	333f      	adds	r3, #63	; 0x3f
 800352a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800352c:	2b02      	cmp	r3, #2
 800352e:	d12d      	bne.n	800358c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	335c      	adds	r3, #92	; 0x5c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d120      	bne.n	800358c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3361      	adds	r3, #97	; 0x61
 8003558:	2203      	movs	r2, #3
 800355a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	0151      	lsls	r1, r2, #5
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	440a      	add	r2, r1
 8003572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fdc9 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2310      	movs	r3, #16
 800359c:	6093      	str	r3, [r2, #8]
}
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d119      	bne.n	800360a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	2304      	movs	r3, #4
 80035e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003608:	e3ca      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d13e      	bne.n	800369e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	2320      	movs	r3, #32
 8003630:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	333d      	adds	r3, #61	; 0x3d
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 83ac 	bne.w	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	333d      	adds	r3, #61	; 0x3d
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3360      	adds	r3, #96	; 0x60
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	440a      	add	r2, r1
 8003682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fd41 	bl	800811e <USB_HC_Halt>
}
 800369c:	e380      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d122      	bne.n	80036fc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 fd1c 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	461a      	mov	r2, r3
 80036f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f8:	6093      	str	r3, [r2, #8]
}
 80036fa:	e351      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d150      	bne.n	80037b4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	335c      	adds	r3, #92	; 0x5c
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d111      	bne.n	800375e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	333d      	adds	r3, #61	; 0x3d
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	2340      	movs	r3, #64	; 0x40
 800375c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	0151      	lsls	r1, r2, #5
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	440a      	add	r2, r1
 8003774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f004 fcc8 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	2301      	movs	r3, #1
 800379e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3361      	adds	r3, #97	; 0x61
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
}
 80037b2:	e2f5      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d13c      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3361      	adds	r3, #97	; 0x61
 80037d8:	2204      	movs	r2, #4
 80037da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	333d      	adds	r3, #61	; 0x3d
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	335c      	adds	r3, #92	; 0x5c
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	440a      	add	r2, r1
 8003816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fc77 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	6093      	str	r3, [r2, #8]
}
 8003842:	e2ad      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b08      	cmp	r3, #8
 8003858:	d12a      	bne.n	80038b0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	461a      	mov	r2, r3
 8003868:	2308      	movs	r3, #8
 800386a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	440a      	add	r2, r1
 8003882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f004 fc41 	bl	800811e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3361      	adds	r3, #97	; 0x61
 80038aa:	2205      	movs	r2, #5
 80038ac:	701a      	strb	r2, [r3, #0]
}
 80038ae:	e277      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d150      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	335c      	adds	r3, #92	; 0x5c
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	3361      	adds	r3, #97	; 0x61
 80038e6:	2203      	movs	r2, #3
 80038e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	333d      	adds	r3, #61	; 0x3d
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d112      	bne.n	8003924 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	333c      	adds	r3, #60	; 0x3c
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	212c      	movs	r1, #44	; 0x2c
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	4413      	add	r3, r2
 800391e:	333d      	adds	r3, #61	; 0x3d
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	440a      	add	r2, r1
 800393a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f004 fbe5 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2310      	movs	r3, #16
 8003964:	6093      	str	r3, [r2, #8]
}
 8003966:	e21b      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	4413      	add	r3, r2
 8003970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d174      	bne.n	8003a68 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d121      	bne.n	80039ca <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3361      	adds	r3, #97	; 0x61
 8003994:	2206      	movs	r2, #6
 8003996:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 fbab 	bl	800811e <USB_HC_Halt>
 80039c8:	e044      	b.n	8003a54 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	335c      	adds	r3, #92	; 0x5c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	202c      	movs	r0, #44	; 0x2c
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	440b      	add	r3, r1
 80039e8:	335c      	adds	r3, #92	; 0x5c
 80039ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	335c      	adds	r3, #92	; 0x5c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d920      	bls.n	8003a42 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	335c      	adds	r3, #92	; 0x5c
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3360      	adds	r3, #96	; 0x60
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	b2d9      	uxtb	r1, r3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	202c      	movs	r0, #44	; 0x2c
 8003a2e:	fb00 f303 	mul.w	r3, r0, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3360      	adds	r3, #96	; 0x60
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f00a fada 	bl	800dff4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a40:	e008      	b.n	8003a54 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3360      	adds	r3, #96	; 0x60
 8003a50:	2202      	movs	r2, #2
 8003a52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	6093      	str	r3, [r2, #8]
}
 8003a66:	e19b      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7e:	d134      	bne.n	8003aea <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fb37 	bl	800811e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	461a      	mov	r2, r3
 8003abe:	2310      	movs	r3, #16
 8003ac0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3361      	adds	r3, #97	; 0x61
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	701a      	strb	r2, [r3, #0]
}
 8003ae8:	e15a      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f040 814f 	bne.w	8003da0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
 8003b20:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3361      	adds	r3, #97	; 0x61
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d17d      	bne.n	8003c32 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3360      	adds	r3, #96	; 0x60
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	333f      	adds	r3, #63	; 0x3f
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d00a      	beq.n	8003b72 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	333f      	adds	r3, #63	; 0x3f
 8003b6a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	f040 8100 	bne.w	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d113      	bne.n	8003ba2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3355      	adds	r3, #85	; 0x55
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f083 0301 	eor.w	r3, r3, #1
 8003b8e:	b2d8      	uxtb	r0, r3
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3355      	adds	r3, #85	; 0x55
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	f040 80e3 	bne.w	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	334c      	adds	r3, #76	; 0x4c
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80d8 	beq.w	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	334c      	adds	r3, #76	; 0x4c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	202c      	movs	r0, #44	; 0x2c
 8003bd8:	fb00 f202 	mul.w	r2, r0, r2
 8003bdc:	440a      	add	r2, r1
 8003bde:	3240      	adds	r2, #64	; 0x40
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	3b01      	subs	r3, #1
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	202c      	movs	r0, #44	; 0x2c
 8003bec:	fb00 f202 	mul.w	r2, r0, r2
 8003bf0:	440a      	add	r2, r1
 8003bf2:	3240      	adds	r2, #64	; 0x40
 8003bf4:	8812      	ldrh	r2, [r2, #0]
 8003bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80b5 	beq.w	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3355      	adds	r3, #85	; 0x55
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2d8      	uxtb	r0, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3355      	adds	r3, #85	; 0x55
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e09f      	b.n	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3361      	adds	r3, #97	; 0x61
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d109      	bne.n	8003c5a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e08b      	b.n	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3361      	adds	r3, #97	; 0x61
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d109      	bne.n	8003c82 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	3360      	adds	r3, #96	; 0x60
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e077      	b.n	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	212c      	movs	r1, #44	; 0x2c
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3361      	adds	r3, #97	; 0x61
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d109      	bne.n	8003caa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3360      	adds	r3, #96	; 0x60
 8003ca4:	2205      	movs	r2, #5
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e063      	b.n	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3361      	adds	r3, #97	; 0x61
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d009      	beq.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3361      	adds	r3, #97	; 0x61
 8003ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d14f      	bne.n	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	335c      	adds	r3, #92	; 0x5c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	202c      	movs	r0, #44	; 0x2c
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	440b      	add	r3, r1
 8003cf0:	335c      	adds	r3, #92	; 0x5c
 8003cf2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	335c      	adds	r3, #92	; 0x5c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d912      	bls.n	8003d2e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	335c      	adds	r3, #92	; 0x5c
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3360      	adds	r3, #96	; 0x60
 8003d28:	2204      	movs	r2, #4
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	e021      	b.n	8003d72 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3360      	adds	r3, #96	; 0x60
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d56:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d5e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2302      	movs	r3, #2
 8003d82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	b2d9      	uxtb	r1, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	202c      	movs	r0, #44	; 0x2c
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3360      	adds	r3, #96	; 0x60
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f00a f92a 	bl	800dff4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003da0:	bf00      	nop
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	0c5b      	lsrs	r3, r3, #17
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ddc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d004      	beq.n	8003dee <HCD_RXQLVL_IRQHandler+0x46>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	f000 80a9 	beq.w	8003f3e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dec:	e0aa      	b.n	8003f44 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80a6 	beq.w	8003f42 <HCD_RXQLVL_IRQHandler+0x19a>
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3344      	adds	r3, #68	; 0x44
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 809b 	beq.w	8003f42 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3350      	adds	r3, #80	; 0x50
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	441a      	add	r2, r3
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	202c      	movs	r0, #44	; 0x2c
 8003e26:	fb00 f303 	mul.w	r3, r0, r3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334c      	adds	r3, #76	; 0x4c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d87a      	bhi.n	8003f2a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3344      	adds	r3, #68	; 0x44
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f003 fcdf 	bl	8007810 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3344      	adds	r3, #68	; 0x44
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	441a      	add	r2, r3
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	202c      	movs	r0, #44	; 0x2c
 8003e6c:	fb00 f303 	mul.w	r3, r0, r3
 8003e70:	440b      	add	r3, r1
 8003e72:	3344      	adds	r3, #68	; 0x44
 8003e74:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3350      	adds	r3, #80	; 0x50
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	441a      	add	r2, r3
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	202c      	movs	r0, #44	; 0x2c
 8003e90:	fb00 f303 	mul.w	r3, r0, r3
 8003e94:	440b      	add	r3, r1
 8003e96:	3350      	adds	r3, #80	; 0x50
 8003e98:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	0cdb      	lsrs	r3, r3, #19
 8003eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3340      	adds	r3, #64	; 0x40
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d13c      	bne.n	8003f42 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d039      	beq.n	8003f42 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ee4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eec:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	461a      	mov	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3354      	adds	r3, #84	; 0x54
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2d8      	uxtb	r0, r3
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3354      	adds	r3, #84	; 0x54
 8003f24:	4602      	mov	r2, r0
 8003f26:	701a      	strb	r2, [r3, #0]
      break;
 8003f28:	e00b      	b.n	8003f42 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	3360      	adds	r3, #96	; 0x60
 8003f38:	2204      	movs	r2, #4
 8003f3a:	701a      	strb	r2, [r3, #0]
      break;
 8003f3c:	e001      	b.n	8003f42 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f42:	bf00      	nop
  }
}
 8003f44:	bf00      	nop
 8003f46:	3728      	adds	r7, #40	; 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d10b      	bne.n	8003f9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d102      	bne.n	8003f94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f00a f814 	bl	800dfbc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f043 0302 	orr.w	r3, r3, #2
 8003f9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d132      	bne.n	800400c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d126      	bne.n	8004006 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d113      	bne.n	8003fe8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fca:	d106      	bne.n	8003fda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fd7c 	bl	8007ad0 <USB_InitFSLSPClkSel>
 8003fd8:	e011      	b.n	8003ffe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f003 fd75 	bl	8007ad0 <USB_InitFSLSPClkSel>
 8003fe6:	e00a      	b.n	8003ffe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ffc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f00a f806 	bl	800e010 <HAL_HCD_PortEnabled_Callback>
 8004004:	e002      	b.n	800400c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f00a f810 	bl	800e02c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b20      	cmp	r3, #32
 8004014:	d103      	bne.n	800401e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f043 0320 	orr.w	r3, r3, #32
 800401c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e12b      	b.n	800429e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd f986 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004098:	f003 f8e8 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a81      	ldr	r2, [pc, #516]	; (80042a8 <HAL_I2C_Init+0x274>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d807      	bhi.n	80040b8 <HAL_I2C_Init+0x84>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a80      	ldr	r2, [pc, #512]	; (80042ac <HAL_I2C_Init+0x278>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e006      	b.n	80040c6 <HAL_I2C_Init+0x92>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a7d      	ldr	r2, [pc, #500]	; (80042b0 <HAL_I2C_Init+0x27c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	bf94      	ite	ls
 80040c0:	2301      	movls	r3, #1
 80040c2:	2300      	movhi	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0e7      	b.n	800429e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a78      	ldr	r2, [pc, #480]	; (80042b4 <HAL_I2C_Init+0x280>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0c9b      	lsrs	r3, r3, #18
 80040d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a6a      	ldr	r2, [pc, #424]	; (80042a8 <HAL_I2C_Init+0x274>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d802      	bhi.n	8004108 <HAL_I2C_Init+0xd4>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3301      	adds	r3, #1
 8004106:	e009      	b.n	800411c <HAL_I2C_Init+0xe8>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	4a69      	ldr	r2, [pc, #420]	; (80042b8 <HAL_I2C_Init+0x284>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	3301      	adds	r3, #1
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800412e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	495c      	ldr	r1, [pc, #368]	; (80042a8 <HAL_I2C_Init+0x274>)
 8004138:	428b      	cmp	r3, r1
 800413a:	d819      	bhi.n	8004170 <HAL_I2C_Init+0x13c>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e59      	subs	r1, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fbb1 f3f3 	udiv	r3, r1, r3
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004150:	400b      	ands	r3, r1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_I2C_Init+0x138>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1e59      	subs	r1, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fbb1 f3f3 	udiv	r3, r1, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416a:	e051      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 800416c:	2304      	movs	r3, #4
 800416e:	e04f      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <HAL_I2C_Init+0x168>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	440b      	add	r3, r1
 8004186:	fbb0 f3f3 	udiv	r3, r0, r3
 800418a:	3301      	adds	r3, #1
 800418c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e012      	b.n	80041c2 <HAL_I2C_Init+0x18e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e58      	subs	r0, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	0099      	lsls	r1, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Init+0x196>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e022      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10e      	bne.n	80041f0 <HAL_I2C_Init+0x1bc>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e58      	subs	r0, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	440b      	add	r3, r1
 80041e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ee:	e00f      	b.n	8004210 <HAL_I2C_Init+0x1dc>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	0099      	lsls	r1, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	6809      	ldr	r1, [r1, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800423e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6911      	ldr	r1, [r2, #16]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	000186a0 	.word	0x000186a0
 80042ac:	001e847f 	.word	0x001e847f
 80042b0:	003d08ff 	.word	0x003d08ff
 80042b4:	431bde83 	.word	0x431bde83
 80042b8:	10624dd3 	.word	0x10624dd3

080042bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	460b      	mov	r3, r1
 80042ca:	817b      	strh	r3, [r7, #10]
 80042cc:	4613      	mov	r3, r2
 80042ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042d0:	f7fd fa50 	bl	8001774 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	f040 80e0 	bne.w	80044a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2319      	movs	r3, #25
 80042ea:	2201      	movs	r2, #1
 80042ec:	4970      	ldr	r1, [pc, #448]	; (80044b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f001 f8f6 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0d3      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2C_Master_Transmit+0x50>
 8004308:	2302      	movs	r3, #2
 800430a:	e0cc      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d007      	beq.n	8004332 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004340:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2221      	movs	r2, #33	; 0x21
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2210      	movs	r2, #16
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	893a      	ldrh	r2, [r7, #8]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a50      	ldr	r2, [pc, #320]	; (80044b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004374:	8979      	ldrh	r1, [r7, #10]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fde2 	bl	8004f44 <I2C_MasterRequestWrite>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e08d      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043a0:	e066      	b.n	8004470 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	6a39      	ldr	r1, [r7, #32]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f001 f970 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00d      	beq.n	80043ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d107      	bne.n	80043ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e06b      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d11b      	bne.n	8004444 <HAL_I2C_Master_Transmit+0x188>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d017      	beq.n	8004444 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	6a39      	ldr	r1, [r7, #32]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f001 f960 	bl	800570e <I2C_WaitOnBTFFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2b04      	cmp	r3, #4
 800445a:	d107      	bne.n	800446c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e01a      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d194      	bne.n	80043a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	00100002 	.word	0x00100002
 80044b4:	ffff0000 	.word	0xffff0000

080044b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08c      	sub	sp, #48	; 0x30
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	461a      	mov	r2, r3
 80044c4:	460b      	mov	r3, r1
 80044c6:	817b      	strh	r3, [r7, #10]
 80044c8:	4613      	mov	r3, r2
 80044ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7fd f952 	bl	8001774 <HAL_GetTick>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b20      	cmp	r3, #32
 80044dc:	f040 820b 	bne.w	80048f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	497c      	ldr	r1, [pc, #496]	; (80046dc <HAL_I2C_Master_Receive+0x224>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fff8 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	e1fe      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2C_Master_Receive+0x50>
 8004504:	2302      	movs	r3, #2
 8004506:	e1f7      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d007      	beq.n	800452e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2222      	movs	r2, #34	; 0x22
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2210      	movs	r2, #16
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	893a      	ldrh	r2, [r7, #8]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a5c      	ldr	r2, [pc, #368]	; (80046e0 <HAL_I2C_Master_Receive+0x228>)
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fd66 	bl	8005048 <I2C_MasterRequestRead>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1b8      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d113      	bne.n	80045b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e18c      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d11b      	bne.n	80045f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e16c      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d11b      	bne.n	8004636 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	e14c      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800465c:	e138      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	2b03      	cmp	r3, #3
 8004664:	f200 80f1 	bhi.w	800484a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b01      	cmp	r3, #1
 800466e:	d123      	bne.n	80046b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f001 f88b 	bl	8005790 <I2C_WaitOnRXNEFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e139      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b6:	e10b      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d14e      	bne.n	800475e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2200      	movs	r2, #0
 80046c8:	4906      	ldr	r1, [pc, #24]	; (80046e4 <HAL_I2C_Master_Receive+0x22c>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 ff08 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e10e      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
 80046da:	bf00      	nop
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000
 80046e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800475c:	e0b8      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	2200      	movs	r2, #0
 8004766:	4966      	ldr	r1, [pc, #408]	; (8004900 <HAL_I2C_Master_Receive+0x448>)
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 feb9 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0bf      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2200      	movs	r2, #0
 80047c2:	494f      	ldr	r1, [pc, #316]	; (8004900 <HAL_I2C_Master_Receive+0x448>)
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fe8b 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e091      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004848:	e042      	b.n	80048d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 ff9e 	bl	8005790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e04c      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b04      	cmp	r3, #4
 800489c:	d118      	bne.n	80048d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f47f aec2 	bne.w	800465e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	00010004 	.word	0x00010004

08004904 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4603      	mov	r3, r0
 8004914:	817b      	strh	r3, [r7, #10]
 8004916:	460b      	mov	r3, r1
 8004918:	813b      	strh	r3, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800491e:	f7fc ff29 	bl	8001774 <HAL_GetTick>
 8004922:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	f040 80d9 	bne.w	8004ae4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2319      	movs	r3, #25
 8004938:	2201      	movs	r2, #1
 800493a:	496d      	ldr	r1, [pc, #436]	; (8004af0 <HAL_I2C_Mem_Write+0x1ec>)
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fdcf 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	e0cc      	b.n	8004ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_I2C_Mem_Write+0x56>
 8004956:	2302      	movs	r3, #2
 8004958:	e0c5      	b.n	8004ae6 <HAL_I2C_Mem_Write+0x1e2>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d007      	beq.n	8004980 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2221      	movs	r2, #33	; 0x21
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a4d      	ldr	r2, [pc, #308]	; (8004af4 <HAL_I2C_Mem_Write+0x1f0>)
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c2:	88f8      	ldrh	r0, [r7, #6]
 80049c4:	893a      	ldrh	r2, [r7, #8]
 80049c6:	8979      	ldrh	r1, [r7, #10]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4603      	mov	r3, r0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fc06 	bl	80051e4 <I2C_RequestMemoryWrite>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d052      	beq.n	8004a84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e081      	b.n	8004ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fe50 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e06b      	b.n	8004ae6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	781a      	ldrb	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d11b      	bne.n	8004a84 <HAL_I2C_Mem_Write+0x180>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d017      	beq.n	8004a84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1aa      	bne.n	80049e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fe3c 	bl	800570e <I2C_WaitOnBTFFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d107      	bne.n	8004ab4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e016      	b.n	8004ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	00100002 	.word	0x00100002
 8004af4:	ffff0000 	.word	0xffff0000

08004af8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08c      	sub	sp, #48	; 0x30
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b12:	f7fc fe2f 	bl	8001774 <HAL_GetTick>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	f040 8208 	bne.w	8004f36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	2319      	movs	r3, #25
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	497b      	ldr	r1, [pc, #492]	; (8004d1c <HAL_I2C_Mem_Read+0x224>)
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fcd5 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e1fb      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_I2C_Mem_Read+0x56>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e1f4      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d007      	beq.n	8004b74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2222      	movs	r2, #34	; 0x22
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2240      	movs	r2, #64	; 0x40
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a5b      	ldr	r2, [pc, #364]	; (8004d20 <HAL_I2C_Mem_Read+0x228>)
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bb6:	88f8      	ldrh	r0, [r7, #6]
 8004bb8:	893a      	ldrh	r2, [r7, #8]
 8004bba:	8979      	ldrh	r1, [r7, #10]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fba2 	bl	8005310 <I2C_RequestMemoryRead>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e1b0      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d113      	bne.n	8004c06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e184      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d11b      	bne.n	8004c46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e164      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d11b      	bne.n	8004c86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	e144      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c9c:	e138      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	f200 80f1 	bhi.w	8004e8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d123      	bne.n	8004cf8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fd6b 	bl	8005790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e139      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf6:	e10b      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d14e      	bne.n	8004d9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	2200      	movs	r2, #0
 8004d08:	4906      	ldr	r1, [pc, #24]	; (8004d24 <HAL_I2C_Mem_Read+0x22c>)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fbe8 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e10e      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
 8004d1a:	bf00      	nop
 8004d1c:	00100002 	.word	0x00100002
 8004d20:	ffff0000 	.word	0xffff0000
 8004d24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d9c:	e0b8      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	2200      	movs	r2, #0
 8004da6:	4966      	ldr	r1, [pc, #408]	; (8004f40 <HAL_I2C_Mem_Read+0x448>)
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fb99 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0bf      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2200      	movs	r2, #0
 8004e02:	494f      	ldr	r1, [pc, #316]	; (8004f40 <HAL_I2C_Mem_Read+0x448>)
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fb6b 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e091      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e88:	e042      	b.n	8004f10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fc7e 	bl	8005790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e04c      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d118      	bne.n	8004f10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f aec2 	bne.w	8004c9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3728      	adds	r7, #40	; 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	00010004 	.word	0x00010004

08004f44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	460b      	mov	r3, r1
 8004f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d006      	beq.n	8004f6e <I2C_MasterRequestWrite+0x2a>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d003      	beq.n	8004f6e <I2C_MasterRequestWrite+0x2a>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f6c:	d108      	bne.n	8004f80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e00b      	b.n	8004f98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	2b12      	cmp	r3, #18
 8004f86:	d107      	bne.n	8004f98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fa9b 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbe:	d103      	bne.n	8004fc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e035      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd4:	d108      	bne.n	8004fe8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e01b      	b.n	8005020 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fe8:	897b      	ldrh	r3, [r7, #10]
 8004fea:	11db      	asrs	r3, r3, #7
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f063 030f 	orn	r3, r3, #15
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <I2C_MasterRequestWrite+0xfc>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fac1 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e010      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005016:	897b      	ldrh	r3, [r7, #10]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4907      	ldr	r1, [pc, #28]	; (8005044 <I2C_MasterRequestWrite+0x100>)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fab1 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	00010008 	.word	0x00010008
 8005044:	00010002 	.word	0x00010002

08005048 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d006      	beq.n	8005082 <I2C_MasterRequestRead+0x3a>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d003      	beq.n	8005082 <I2C_MasterRequestRead+0x3a>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005080:	d108      	bne.n	8005094 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e00b      	b.n	80050ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	2b11      	cmp	r3, #17
 800509a:	d107      	bne.n	80050ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fa11 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d2:	d103      	bne.n	80050dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e079      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e8:	d108      	bne.n	80050fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]
 80050fa:	e05f      	b.n	80051bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050fc:	897b      	ldrh	r3, [r7, #10]
 80050fe:	11db      	asrs	r3, r3, #7
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f063 030f 	orn	r3, r3, #15
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4930      	ldr	r1, [pc, #192]	; (80051dc <I2C_MasterRequestRead+0x194>)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fa37 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e054      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4929      	ldr	r1, [pc, #164]	; (80051e0 <I2C_MasterRequestRead+0x198>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fa27 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e044      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f9af 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00d      	beq.n	80051a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005196:	d103      	bne.n	80051a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e017      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051a4:	897b      	ldrh	r3, [r7, #10]
 80051a6:	11db      	asrs	r3, r3, #7
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f063 030e 	orn	r3, r3, #14
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4907      	ldr	r1, [pc, #28]	; (80051e0 <I2C_MasterRequestRead+0x198>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f9e3 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	00010008 	.word	0x00010008
 80051e0:	00010002 	.word	0x00010002

080051e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	817b      	strh	r3, [r7, #10]
 80051f6:	460b      	mov	r3, r1
 80051f8:	813b      	strh	r3, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2200      	movs	r2, #0
 8005216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f960 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005234:	d103      	bne.n	800523e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e05f      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005250:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	492d      	ldr	r1, [pc, #180]	; (800530c <I2C_RequestMemoryWrite+0x128>)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f998 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04c      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa02 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e02b      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b0:	893b      	ldrh	r3, [r7, #8]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	e021      	b.n	8005300 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052bc:	893b      	ldrh	r3, [r7, #8]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052cc:	6a39      	ldr	r1, [r7, #32]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f9dc 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00d      	beq.n	80052f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d107      	bne.n	80052f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e005      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f6:	893b      	ldrh	r3, [r7, #8]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	00010002 	.word	0x00010002

08005310 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4603      	mov	r3, r0
 8005320:	817b      	strh	r3, [r7, #10]
 8005322:	460b      	mov	r3, r1
 8005324:	813b      	strh	r3, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005338:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2200      	movs	r2, #0
 8005352:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f8c2 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d103      	bne.n	800537a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e0aa      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800538c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	4952      	ldr	r1, [pc, #328]	; (80054dc <I2C_RequestMemoryRead+0x1cc>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f8fa 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e097      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f964 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e076      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	e021      	b.n	800543c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053f8:	893b      	ldrh	r3, [r7, #8]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f93e 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e050      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005432:	893b      	ldrh	r3, [r7, #8]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800543c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543e:	6a39      	ldr	r1, [r7, #32]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f923 	bl	800568c <I2C_WaitOnTXEFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	2b04      	cmp	r3, #4
 8005452:	d107      	bne.n	8005464 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005462:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e035      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005476:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2200      	movs	r2, #0
 8005480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f82b 	bl	80054e0 <I2C_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d103      	bne.n	80054a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e013      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	6a3a      	ldr	r2, [r7, #32]
 80054c0:	4906      	ldr	r1, [pc, #24]	; (80054dc <I2C_RequestMemoryRead+0x1cc>)
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f863 	bl	800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	00010002 	.word	0x00010002

080054e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f0:	e025      	b.n	800553e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d021      	beq.n	800553e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fc f93b 	bl	8001774 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d116      	bne.n	800553e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e023      	b.n	8005586 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d10d      	bne.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	43da      	mvns	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4013      	ands	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	bf0c      	ite	eq
 800555a:	2301      	moveq	r3, #1
 800555c:	2300      	movne	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	e00c      	b.n	800557e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	43da      	mvns	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d0b6      	beq.n	80054f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800559c:	e051      	b.n	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	d123      	bne.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f043 0204 	orr.w	r2, r3, #4
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e046      	b.n	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d021      	beq.n	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fc f8b9 	bl	8001774 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d116      	bne.n	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e020      	b.n	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d10c      	bne.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e00b      	b.n	800567e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	43da      	mvns	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d18d      	bne.n	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005698:	e02d      	b.n	80056f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f8ce 	bl	800583c <I2C_IsAcknowledgeFailed>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e02d      	b.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d021      	beq.n	80056f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7fc f85f 	bl	8001774 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d116      	bne.n	80056f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f043 0220 	orr.w	r2, r3, #32
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e007      	b.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d1ca      	bne.n	800569a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800571a:	e02d      	b.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f88d 	bl	800583c <I2C_IsAcknowledgeFailed>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e02d      	b.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d021      	beq.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005734:	f7fc f81e 	bl	8001774 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d116      	bne.n	8005778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e007      	b.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b04      	cmp	r3, #4
 8005784:	d1ca      	bne.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800579c:	e042      	b.n	8005824 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d119      	bne.n	80057e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0210 	mvn.w	r2, #16
 80057b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e029      	b.n	8005834 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e0:	f7fb ffc8 	bl	8001774 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d302      	bcc.n	80057f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d116      	bne.n	8005824 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e007      	b.n	8005834 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d1b5      	bne.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d11b      	bne.n	800588c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800585c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	f043 0204 	orr.w	r2, r3, #4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e128      	b.n	8005b00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a90      	ldr	r2, [pc, #576]	; (8005b08 <HAL_I2S_Init+0x26c>)
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fb fd97 	bl	80013fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058e4:	f023 030f 	bic.w	r3, r3, #15
 80058e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2202      	movs	r2, #2
 80058f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d060      	beq.n	80059bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005902:	2310      	movs	r3, #16
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e001      	b.n	800590c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005908:	2320      	movs	r3, #32
 800590a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b20      	cmp	r3, #32
 8005912:	d802      	bhi.n	800591a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800591a:	2001      	movs	r0, #1
 800591c:	f001 fdc8 	bl	80074b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005920:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592a:	d125      	bne.n	8005978 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	fbb2 f2f3 	udiv	r2, r2, r3
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	3305      	adds	r3, #5
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	e01f      	b.n	8005996 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	3305      	adds	r3, #5
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e00e      	b.n	8005996 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	3305      	adds	r3, #5
 8005994:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4a5c      	ldr	r2, [pc, #368]	; (8005b0c <HAL_I2S_Init+0x270>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	08db      	lsrs	r3, r3, #3
 80059a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e003      	b.n	80059c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059bc:	2302      	movs	r3, #2
 80059be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d902      	bls.n	80059d0 <HAL_I2S_Init+0x134>
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2bff      	cmp	r3, #255	; 0xff
 80059ce:	d907      	bls.n	80059e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	f043 0210 	orr.w	r2, r3, #16
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e08f      	b.n	8005b00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	ea42 0103 	orr.w	r1, r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059fe:	f023 030f 	bic.w	r3, r3, #15
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6851      	ldr	r1, [r2, #4]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6892      	ldr	r2, [r2, #8]
 8005a0a:	4311      	orrs	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68d2      	ldr	r2, [r2, #12]
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6992      	ldr	r2, [r2, #24]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d161      	bne.n	8005af0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_I2S_Init+0x274>)
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a37      	ldr	r2, [pc, #220]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <HAL_I2S_Init+0x1a4>
 8005a3c:	4b36      	ldr	r3, [pc, #216]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a3e:	e001      	b.n	8005a44 <HAL_I2S_Init+0x1a8>
 8005a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	4932      	ldr	r1, [pc, #200]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a4c:	428a      	cmp	r2, r1
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2S_Init+0x1b8>
 8005a50:	4a31      	ldr	r2, [pc, #196]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a52:	e001      	b.n	8005a58 <HAL_I2S_Init+0x1bc>
 8005a54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a5c:	f023 030f 	bic.w	r3, r3, #15
 8005a60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_I2S_Init+0x1d4>
 8005a6c:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a6e:	e001      	b.n	8005a74 <HAL_I2S_Init+0x1d8>
 8005a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a74:	2202      	movs	r2, #2
 8005a76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_I2S_Init+0x1ea>
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a84:	e001      	b.n	8005a8a <HAL_I2S_Init+0x1ee>
 8005a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d003      	beq.n	8005aa0 <HAL_I2S_Init+0x204>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e001      	b.n	8005aac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aca:	4313      	orrs	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	897b      	ldrh	r3, [r7, #10]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ad8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <HAL_I2S_Init+0x24c>
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005ae6:	e001      	b.n	8005aec <HAL_I2S_Init+0x250>
 8005ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aec:	897a      	ldrh	r2, [r7, #10]
 8005aee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08006399 	.word	0x08006399
 8005b0c:	cccccccd 	.word	0xcccccccd
 8005b10:	08006521 	.word	0x08006521
 8005b14:	40003800 	.word	0x40003800
 8005b18:	40003400 	.word	0x40003400

08005b1c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_I2S_Transmit_DMA+0x1a>
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e08e      	b.n	8005c58 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_I2S_Transmit_DMA+0x2e>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e086      	b.n	8005c58 <HAL_I2S_Transmit_DMA+0x13c>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d005      	beq.n	8005b6a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
 8005b68:	e076      	b.n	8005c58 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d002      	beq.n	8005b96 <HAL_I2S_Transmit_DMA+0x7a>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d10a      	bne.n	8005bac <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005baa:	e005      	b.n	8005bb8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <HAL_I2S_Transmit_DMA+0x144>)
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <HAL_I2S_Transmit_DMA+0x148>)
 8005bc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <HAL_I2S_Transmit_DMA+0x14c>)
 8005bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005bd8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005be0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005be8:	f7fb ffb4 	bl	8001b54 <HAL_DMA_Start_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00f      	beq.n	8005c12 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	f043 0208 	orr.w	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e022      	b.n	8005c58 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d107      	bne.n	8005c30 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0202 	orr.w	r2, r2, #2
 8005c4c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	08006277 	.word	0x08006277
 8005c64:	08006235 	.word	0x08006235
 8005c68:	08006293 	.word	0x08006293

08005c6c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2S_DMAPause+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e04a      	b.n	8005d1a <HAL_I2S_DMAPause+0xae>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d108      	bne.n	8005caa <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0202 	bic.w	r2, r2, #2
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	e032      	b.n	8005d10 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d108      	bne.n	8005cc8 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	e023      	b.n	8005d10 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b05      	cmp	r3, #5
 8005cd2:	d11d      	bne.n	8005d10 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0203 	bic.w	r2, r2, #3
 8005ce2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <HAL_I2S_DMAPause+0xbc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2S_DMAPause+0x86>
 8005cee:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <HAL_I2S_DMAPause+0xc0>)
 8005cf0:	e001      	b.n	8005cf6 <HAL_I2S_DMAPause+0x8a>
 8005cf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	490a      	ldr	r1, [pc, #40]	; (8005d28 <HAL_I2S_DMAPause+0xbc>)
 8005cfe:	428b      	cmp	r3, r1
 8005d00:	d101      	bne.n	8005d06 <HAL_I2S_DMAPause+0x9a>
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <HAL_I2S_DMAPause+0xc0>)
 8005d04:	e001      	b.n	8005d0a <HAL_I2S_DMAPause+0x9e>
 8005d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d0a:	f022 0203 	bic.w	r2, r2, #3
 8005d0e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40003800 	.word	0x40003800
 8005d2c:	40003400 	.word	0x40003400

08005d30 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2S_DMAResume+0x18>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e07d      	b.n	8005e44 <HAL_I2S_DMAResume+0x114>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d108      	bne.n	8005d6e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0202 	orr.w	r2, r2, #2
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	e056      	b.n	8005e1c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d108      	bne.n	8005d8c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0201 	orr.w	r2, r2, #1
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	e047      	b.n	8005e1c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d141      	bne.n	8005e1c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0203 	orr.w	r2, r2, #3
 8005da6:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <HAL_I2S_DMAResume+0x120>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_I2S_DMAResume+0x86>
 8005db2:	4b28      	ldr	r3, [pc, #160]	; (8005e54 <HAL_I2S_DMAResume+0x124>)
 8005db4:	e001      	b.n	8005dba <HAL_I2S_DMAResume+0x8a>
 8005db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4923      	ldr	r1, [pc, #140]	; (8005e50 <HAL_I2S_DMAResume+0x120>)
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	d101      	bne.n	8005dca <HAL_I2S_DMAResume+0x9a>
 8005dc6:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <HAL_I2S_DMAResume+0x124>)
 8005dc8:	e001      	b.n	8005dce <HAL_I2S_DMAResume+0x9e>
 8005dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dce:	f042 0203 	orr.w	r2, r2, #3
 8005dd2:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_I2S_DMAResume+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_I2S_DMAResume+0xb2>
 8005dde:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_I2S_DMAResume+0x124>)
 8005de0:	e001      	b.n	8005de6 <HAL_I2S_DMAResume+0xb6>
 8005de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d115      	bne.n	8005e1c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <HAL_I2S_DMAResume+0x120>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d101      	bne.n	8005dfe <HAL_I2S_DMAResume+0xce>
 8005dfa:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <HAL_I2S_DMAResume+0x124>)
 8005dfc:	e001      	b.n	8005e02 <HAL_I2S_DMAResume+0xd2>
 8005dfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4911      	ldr	r1, [pc, #68]	; (8005e50 <HAL_I2S_DMAResume+0x120>)
 8005e0a:	428b      	cmp	r3, r1
 8005e0c:	d101      	bne.n	8005e12 <HAL_I2S_DMAResume+0xe2>
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <HAL_I2S_DMAResume+0x124>)
 8005e10:	e001      	b.n	8005e16 <HAL_I2S_DMAResume+0xe6>
 8005e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e1a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e38:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40003800 	.word	0x40003800
 8005e54:	40003400 	.word	0x40003400

08005e58 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6c:	d004      	beq.n	8005e78 <HAL_I2S_DMAStop+0x20>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f040 80d1 	bne.w	800601a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00f      	beq.n	8005ea0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fb febd 	bl	8001c04 <HAL_DMA_Abort>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	f043 0208 	orr.w	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005ea0:	2364      	movs	r3, #100	; 0x64
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb00 	bl	80064ac <I2S_WaitFlagStateUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f043 0201 	orr.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005eca:	2364      	movs	r3, #100	; 0x64
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2180      	movs	r1, #128	; 0x80
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 faeb 	bl	80064ac <I2S_WaitFlagStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	f043 0201 	orr.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f02:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0202 	bic.w	r2, r2, #2
 8005f20:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	f040 8165 	bne.w	80061fa <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00f      	beq.n	8005f58 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb fe61 	bl	8001c04 <HAL_DMA_Abort>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	f043 0208 	orr.w	r2, r3, #8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a8a      	ldr	r2, [pc, #552]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d101      	bne.n	8005f66 <HAL_I2S_DMAStop+0x10e>
 8005f62:	4b8a      	ldr	r3, [pc, #552]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8005f64:	e001      	b.n	8005f6a <HAL_I2S_DMAStop+0x112>
 8005f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4985      	ldr	r1, [pc, #532]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8005f72:	428b      	cmp	r3, r1
 8005f74:	d101      	bne.n	8005f7a <HAL_I2S_DMAStop+0x122>
 8005f76:	4b85      	ldr	r3, [pc, #532]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8005f78:	e001      	b.n	8005f7e <HAL_I2S_DMAStop+0x126>
 8005f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a7e      	ldr	r2, [pc, #504]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_I2S_DMAStop+0x13e>
 8005f92:	4b7e      	ldr	r3, [pc, #504]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8005f94:	e001      	b.n	8005f9a <HAL_I2S_DMAStop+0x142>
 8005f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a79      	ldr	r2, [pc, #484]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_I2S_DMAStop+0x154>
 8005fa8:	4b78      	ldr	r3, [pc, #480]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8005faa:	e001      	b.n	8005fb0 <HAL_I2S_DMAStop+0x158>
 8005fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a73      	ldr	r2, [pc, #460]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d101      	bne.n	8005fc4 <HAL_I2S_DMAStop+0x16c>
 8005fc0:	4b72      	ldr	r3, [pc, #456]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8005fc2:	e001      	b.n	8005fc8 <HAL_I2S_DMAStop+0x170>
 8005fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	496e      	ldr	r1, [pc, #440]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_I2S_DMAStop+0x180>
 8005fd4:	4b6d      	ldr	r3, [pc, #436]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8005fd6:	e001      	b.n	8005fdc <HAL_I2S_DMAStop+0x184>
 8005fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10c      	bne.n	8006004 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006002:	e0fa      	b.n	80061fa <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5f      	ldr	r2, [pc, #380]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d101      	bne.n	8006012 <HAL_I2S_DMAStop+0x1ba>
 800600e:	4b5f      	ldr	r3, [pc, #380]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8006010:	e001      	b.n	8006016 <HAL_I2S_DMAStop+0x1be>
 8006012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006016:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006018:	e0ef      	b.n	80061fa <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006022:	d005      	beq.n	8006030 <HAL_I2S_DMAStop+0x1d8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602c:	f040 80e5 	bne.w	80061fa <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00f      	beq.n	8006058 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	4618      	mov	r0, r3
 800603e:	f7fb fde1 	bl	8001c04 <HAL_DMA_Abort>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604c:	f043 0208 	orr.w	r2, r3, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b05      	cmp	r3, #5
 8006062:	f040 809a 	bne.w	800619a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00f      	beq.n	800608e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	4618      	mov	r0, r3
 8006074:	f7fb fdc6 	bl	8001c04 <HAL_DMA_Abort>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	f043 0208 	orr.w	r2, r3, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800608e:	f7fb fb71 	bl	8001774 <HAL_GetTick>
 8006092:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006094:	e012      	b.n	80060bc <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006096:	f7fb fb6d 	bl	8001774 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b64      	cmp	r3, #100	; 0x64
 80060a2:	d90b      	bls.n	80060bc <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a31      	ldr	r2, [pc, #196]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_I2S_DMAStop+0x272>
 80060c6:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_I2S_DMAStop+0x334>)
 80060c8:	e001      	b.n	80060ce <HAL_I2S_DMAStop+0x276>
 80060ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d1de      	bne.n	8006096 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80060d8:	e012      	b.n	8006100 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80060da:	f7fb fb4b 	bl	8001774 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b64      	cmp	r3, #100	; 0x64
 80060e6:	d90b      	bls.n	8006100 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	f043 0201 	orr.w	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a20      	ldr	r2, [pc, #128]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <HAL_I2S_DMAStop+0x2b6>
 800610a:	4b20      	ldr	r3, [pc, #128]	; (800618c <HAL_I2S_DMAStop+0x334>)
 800610c:	e001      	b.n	8006112 <HAL_I2S_DMAStop+0x2ba>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d0de      	beq.n	80060da <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d101      	bne.n	800612a <HAL_I2S_DMAStop+0x2d2>
 8006126:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8006128:	e001      	b.n	800612e <HAL_I2S_DMAStop+0x2d6>
 800612a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4914      	ldr	r1, [pc, #80]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8006136:	428b      	cmp	r3, r1
 8006138:	d101      	bne.n	800613e <HAL_I2S_DMAStop+0x2e6>
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <HAL_I2S_DMAStop+0x334>)
 800613c:	e001      	b.n	8006142 <HAL_I2S_DMAStop+0x2ea>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <HAL_I2S_DMAStop+0x302>
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8006158:	e001      	b.n	800615e <HAL_I2S_DMAStop+0x306>
 800615a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a07      	ldr	r2, [pc, #28]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_I2S_DMAStop+0x31a>
 800616e:	4b07      	ldr	r3, [pc, #28]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8006170:	e001      	b.n	8006176 <HAL_I2S_DMAStop+0x31e>
 8006172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4902      	ldr	r1, [pc, #8]	; (8006188 <HAL_I2S_DMAStop+0x330>)
 800617e:	428b      	cmp	r3, r1
 8006180:	d106      	bne.n	8006190 <HAL_I2S_DMAStop+0x338>
 8006182:	4b02      	ldr	r3, [pc, #8]	; (800618c <HAL_I2S_DMAStop+0x334>)
 8006184:	e006      	b.n	8006194 <HAL_I2S_DMAStop+0x33c>
 8006186:	bf00      	nop
 8006188:	40003800 	.word	0x40003800
 800618c:	40003400 	.word	0x40003400
 8006190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006194:	f022 0202 	bic.w	r2, r2, #2
 8006198:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d8:	d10c      	bne.n	80061f4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e002      	b.n	80061fa <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006202:	7ffb      	ldrb	r3, [r7, #31]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10e      	bne.n	8006268 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0202 	bic.w	r2, r2, #2
 8006258:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7fa fc6b 	bl	8000b44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7fa fc6f 	bl	8000b68 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0203 	bic.w	r2, r2, #3
 80062ae:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c8:	f043 0208 	orr.w	r2, r3, #8
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff ffa5 	bl	8006220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	881a      	ldrh	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	1c9a      	adds	r2, r3, #2
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10e      	bne.n	8006332 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006322:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa fc09 	bl	8000b44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	b292      	uxth	r2, r2
 800634e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	1c9a      	adds	r2, r3, #2
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10e      	bne.n	8006390 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006380:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff ff3e 	bl	800620c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d13a      	bne.n	800642a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d109      	bne.n	80063d2 <I2S_IRQHandler+0x3a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d102      	bne.n	80063d2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ffb4 	bl	800633a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d126      	bne.n	800642a <I2S_IRQHandler+0x92>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d11f      	bne.n	800642a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063f8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	f043 0202 	orr.w	r2, r3, #2
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fefb 	bl	8006220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d136      	bne.n	80064a4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d109      	bne.n	8006454 <I2S_IRQHandler+0xbc>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644a:	2b80      	cmp	r3, #128	; 0x80
 800644c:	d102      	bne.n	8006454 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff45 	bl	80062de <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b08      	cmp	r3, #8
 800645c:	d122      	bne.n	80064a4 <I2S_IRQHandler+0x10c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b20      	cmp	r3, #32
 800646a:	d11b      	bne.n	80064a4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800647a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	f043 0204 	orr.w	r2, r3, #4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff febe 	bl	8006220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064a4:	bf00      	nop
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80064bc:	f7fb f95a 	bl	8001774 <HAL_GetTick>
 80064c0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80064c2:	e018      	b.n	80064f6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d014      	beq.n	80064f6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80064cc:	f7fb f952 	bl	8001774 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d902      	bls.n	80064e2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e00f      	b.n	8006516 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	429a      	cmp	r2, r3
 8006504:	bf0c      	ite	eq
 8006506:	2301      	moveq	r3, #1
 8006508:	2300      	movne	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	429a      	cmp	r2, r3
 8006512:	d1d7      	bne.n	80064c4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4aa2      	ldr	r2, [pc, #648]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d101      	bne.n	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800653a:	4ba2      	ldr	r3, [pc, #648]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800653c:	e001      	b.n	8006542 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800653e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a9b      	ldr	r2, [pc, #620]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d101      	bne.n	800655c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006558:	4b9a      	ldr	r3, [pc, #616]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800655a:	e001      	b.n	8006560 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800655c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656c:	d004      	beq.n	8006578 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 8099 	bne.w	80066aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	d107      	bne.n	8006592 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f925 	bl	80067dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	d107      	bne.n	80065ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9c8 	bl	800693c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d13a      	bne.n	800662c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d035      	beq.n	800662c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a7e      	ldr	r2, [pc, #504]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80065ca:	4b7e      	ldr	r3, [pc, #504]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065cc:	e001      	b.n	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80065ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4979      	ldr	r1, [pc, #484]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065da:	428b      	cmp	r3, r1
 80065dc:	d101      	bne.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80065de:	4b79      	ldr	r3, [pc, #484]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065e0:	e001      	b.n	80065e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	f043 0202 	orr.w	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fdfa 	bl	8006220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b08      	cmp	r3, #8
 8006634:	f040 80be 	bne.w	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80b8 	beq.w	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006652:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a59      	ldr	r2, [pc, #356]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d101      	bne.n	8006662 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800665e:	4b59      	ldr	r3, [pc, #356]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006660:	e001      	b.n	8006666 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4954      	ldr	r1, [pc, #336]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800666e:	428b      	cmp	r3, r1
 8006670:	d101      	bne.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006672:	4b54      	ldr	r3, [pc, #336]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006674:	e001      	b.n	800667a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800667a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800667e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006680:	2300      	movs	r3, #0
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	f043 0204 	orr.w	r2, r3, #4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fdbc 	bl	8006220 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066a8:	e084      	b.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d107      	bne.n	80066c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8be 	bl	8006840 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d107      	bne.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8fd 	bl	80068d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d12f      	bne.n	8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02a      	beq.n	8006748 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006700:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800670c:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800670e:	e001      	b.n	8006714 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4929      	ldr	r1, [pc, #164]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800671c:	428b      	cmp	r3, r1
 800671e:	d101      	bne.n	8006724 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006720:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006722:	e001      	b.n	8006728 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800672c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	f043 0202 	orr.w	r2, r3, #2
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fd6c 	bl	8006220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d131      	bne.n	80067b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02c      	beq.n	80067b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006766:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006768:	e001      	b.n	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800676a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4912      	ldr	r1, [pc, #72]	; (80067c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006776:	428b      	cmp	r3, r1
 8006778:	d101      	bne.n	800677e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800677a:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800677c:	e001      	b.n	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800677e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006786:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006796:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	f043 0204 	orr.w	r2, r3, #4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff fd37 	bl	8006220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067b2:	e000      	b.n	80067b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067b4:	bf00      	nop
}
 80067b6:	bf00      	nop
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40003800 	.word	0x40003800
 80067c4:	40003400 	.word	0x40003400

080067c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	1c99      	adds	r1, r3, #2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6251      	str	r1, [r2, #36]	; 0x24
 80067ee:	881a      	ldrh	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d113      	bne.n	8006836 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800681c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff ffc9 	bl	80067c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c99      	adds	r1, r3, #2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6251      	str	r1, [r2, #36]	; 0x24
 8006852:	8819      	ldrh	r1, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <I2SEx_TxISR_I2SExt+0x90>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <I2SEx_TxISR_I2SExt+0x22>
 800685e:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <I2SEx_TxISR_I2SExt+0x94>)
 8006860:	e001      	b.n	8006866 <I2SEx_TxISR_I2SExt+0x26>
 8006862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006866:	460a      	mov	r2, r1
 8006868:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d121      	bne.n	80068c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a12      	ldr	r2, [pc, #72]	; (80068d0 <I2SEx_TxISR_I2SExt+0x90>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d101      	bne.n	8006890 <I2SEx_TxISR_I2SExt+0x50>
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <I2SEx_TxISR_I2SExt+0x94>)
 800688e:	e001      	b.n	8006894 <I2SEx_TxISR_I2SExt+0x54>
 8006890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	490d      	ldr	r1, [pc, #52]	; (80068d0 <I2SEx_TxISR_I2SExt+0x90>)
 800689c:	428b      	cmp	r3, r1
 800689e:	d101      	bne.n	80068a4 <I2SEx_TxISR_I2SExt+0x64>
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <I2SEx_TxISR_I2SExt+0x94>)
 80068a2:	e001      	b.n	80068a8 <I2SEx_TxISR_I2SExt+0x68>
 80068a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ff81 	bl	80067c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40003800 	.word	0x40003800
 80068d4:	40003400 	.word	0x40003400

080068d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68d8      	ldr	r0, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	1c99      	adds	r1, r3, #2
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068f0:	b282      	uxth	r2, r0
 80068f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d113      	bne.n	8006934 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800691a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff ff4a 	bl	80067c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <I2SEx_RxISR_I2SExt+0x90>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <I2SEx_RxISR_I2SExt+0x16>
 800694e:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <I2SEx_RxISR_I2SExt+0x94>)
 8006950:	e001      	b.n	8006956 <I2SEx_RxISR_I2SExt+0x1a>
 8006952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006956:	68d8      	ldr	r0, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	1c99      	adds	r1, r3, #2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006962:	b282      	uxth	r2, r0
 8006964:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d121      	bne.n	80069c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a12      	ldr	r2, [pc, #72]	; (80069cc <I2SEx_RxISR_I2SExt+0x90>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d101      	bne.n	800698c <I2SEx_RxISR_I2SExt+0x50>
 8006988:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <I2SEx_RxISR_I2SExt+0x94>)
 800698a:	e001      	b.n	8006990 <I2SEx_RxISR_I2SExt+0x54>
 800698c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	490d      	ldr	r1, [pc, #52]	; (80069cc <I2SEx_RxISR_I2SExt+0x90>)
 8006998:	428b      	cmp	r3, r1
 800699a:	d101      	bne.n	80069a0 <I2SEx_RxISR_I2SExt+0x64>
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <I2SEx_RxISR_I2SExt+0x94>)
 800699e:	e001      	b.n	80069a4 <I2SEx_RxISR_I2SExt+0x68>
 80069a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff03 	bl	80067c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40003800 	.word	0x40003800
 80069d0:	40003400 	.word	0x40003400

080069d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e264      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d075      	beq.n	8006ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069f2:	4ba3      	ldr	r3, [pc, #652]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d00c      	beq.n	8006a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069fe:	4ba0      	ldr	r3, [pc, #640]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d112      	bne.n	8006a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a0a:	4b9d      	ldr	r3, [pc, #628]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a16:	d10b      	bne.n	8006a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a18:	4b99      	ldr	r3, [pc, #612]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d05b      	beq.n	8006adc <HAL_RCC_OscConfig+0x108>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d157      	bne.n	8006adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e23f      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d106      	bne.n	8006a48 <HAL_RCC_OscConfig+0x74>
 8006a3a:	4b91      	ldr	r3, [pc, #580]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a90      	ldr	r2, [pc, #576]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e01d      	b.n	8006a84 <HAL_RCC_OscConfig+0xb0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x98>
 8006a52:	4b8b      	ldr	r3, [pc, #556]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a8a      	ldr	r2, [pc, #552]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b88      	ldr	r3, [pc, #544]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a87      	ldr	r2, [pc, #540]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCC_OscConfig+0xb0>
 8006a6c:	4b84      	ldr	r3, [pc, #528]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a83      	ldr	r2, [pc, #524]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b81      	ldr	r3, [pc, #516]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a80      	ldr	r2, [pc, #512]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fa fe72 	bl	8001774 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fa fe6e 	bl	8001774 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e204      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa6:	4b76      	ldr	r3, [pc, #472]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0xc0>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab4:	f7fa fe5e 	bl	8001774 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fa fe5a 	bl	8001774 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	; 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e1f0      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ace:	4b6c      	ldr	r3, [pc, #432]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0xe8>
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d063      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aea:	4b65      	ldr	r3, [pc, #404]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006af6:	4b62      	ldr	r3, [pc, #392]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d11c      	bne.n	8006b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b02:	4b5f      	ldr	r3, [pc, #380]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d116      	bne.n	8006b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0e:	4b5c      	ldr	r3, [pc, #368]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_RCC_OscConfig+0x152>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d001      	beq.n	8006b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e1c4      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b26:	4b56      	ldr	r3, [pc, #344]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4952      	ldr	r1, [pc, #328]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b3a:	e03a      	b.n	8006bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d020      	beq.n	8006b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b44:	4b4f      	ldr	r3, [pc, #316]	; (8006c84 <HAL_RCC_OscConfig+0x2b0>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4a:	f7fa fe13 	bl	8001774 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b52:	f7fa fe0f 	bl	8001774 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e1a5      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b64:	4b46      	ldr	r3, [pc, #280]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0f0      	beq.n	8006b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b70:	4b43      	ldr	r3, [pc, #268]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	4940      	ldr	r1, [pc, #256]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	600b      	str	r3, [r1, #0]
 8006b84:	e015      	b.n	8006bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b86:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <HAL_RCC_OscConfig+0x2b0>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fa fdf2 	bl	8001774 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b94:	f7fa fdee 	bl	8001774 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e184      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d030      	beq.n	8006c20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bc6:	4b30      	ldr	r3, [pc, #192]	; (8006c88 <HAL_RCC_OscConfig+0x2b4>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bcc:	f7fa fdd2 	bl	8001774 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd4:	f7fa fdce 	bl	8001774 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e164      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006be6:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x200>
 8006bf2:	e015      	b.n	8006c20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf4:	4b24      	ldr	r3, [pc, #144]	; (8006c88 <HAL_RCC_OscConfig+0x2b4>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bfa:	f7fa fdbb 	bl	8001774 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c02:	f7fa fdb7 	bl	8001774 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e14d      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f0      	bne.n	8006c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80a0 	beq.w	8006d6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10f      	bne.n	8006c5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a0e      	ldr	r2, [pc, #56]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <HAL_RCC_OscConfig+0x2b8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d121      	bne.n	8006cae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6a:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <HAL_RCC_OscConfig+0x2b8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a07      	ldr	r2, [pc, #28]	; (8006c8c <HAL_RCC_OscConfig+0x2b8>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c76:	f7fa fd7d 	bl	8001774 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7c:	e011      	b.n	8006ca2 <HAL_RCC_OscConfig+0x2ce>
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800
 8006c84:	42470000 	.word	0x42470000
 8006c88:	42470e80 	.word	0x42470e80
 8006c8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c90:	f7fa fd70 	bl	8001774 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e106      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca2:	4b85      	ldr	r3, [pc, #532]	; (8006eb8 <HAL_RCC_OscConfig+0x4e4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d106      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x2f0>
 8006cb6:	4b81      	ldr	r3, [pc, #516]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	4a80      	ldr	r2, [pc, #512]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cbc:	f043 0301 	orr.w	r3, r3, #1
 8006cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc2:	e01c      	b.n	8006cfe <HAL_RCC_OscConfig+0x32a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d10c      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x312>
 8006ccc:	4b7b      	ldr	r3, [pc, #492]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	4a7a      	ldr	r2, [pc, #488]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cd2:	f043 0304 	orr.w	r3, r3, #4
 8006cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd8:	4b78      	ldr	r3, [pc, #480]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	4a77      	ldr	r2, [pc, #476]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce4:	e00b      	b.n	8006cfe <HAL_RCC_OscConfig+0x32a>
 8006ce6:	4b75      	ldr	r3, [pc, #468]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	4a74      	ldr	r2, [pc, #464]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf2:	4b72      	ldr	r3, [pc, #456]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4a71      	ldr	r2, [pc, #452]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006cf8:	f023 0304 	bic.w	r3, r3, #4
 8006cfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d015      	beq.n	8006d32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d06:	f7fa fd35 	bl	8001774 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d0c:	e00a      	b.n	8006d24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d0e:	f7fa fd31 	bl	8001774 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e0c5      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d24:	4b65      	ldr	r3, [pc, #404]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0ee      	beq.n	8006d0e <HAL_RCC_OscConfig+0x33a>
 8006d30:	e014      	b.n	8006d5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d32:	f7fa fd1f 	bl	8001774 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d38:	e00a      	b.n	8006d50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3a:	f7fa fd1b 	bl	8001774 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e0af      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d50:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1ee      	bne.n	8006d3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d105      	bne.n	8006d6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d62:	4b56      	ldr	r3, [pc, #344]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	4a55      	ldr	r2, [pc, #340]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 809b 	beq.w	8006eae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d78:	4b50      	ldr	r3, [pc, #320]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 030c 	and.w	r3, r3, #12
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d05c      	beq.n	8006e3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d141      	bne.n	8006e10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d8c:	4b4c      	ldr	r3, [pc, #304]	; (8006ec0 <HAL_RCC_OscConfig+0x4ec>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d92:	f7fa fcef 	bl	8001774 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d9a:	f7fa fceb 	bl	8001774 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e081      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dac:	4b43      	ldr	r3, [pc, #268]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f0      	bne.n	8006d9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	019b      	lsls	r3, r3, #6
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	4937      	ldr	r1, [pc, #220]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de2:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <HAL_RCC_OscConfig+0x4ec>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fa fcc4 	bl	8001774 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df0:	f7fa fcc0 	bl	8001774 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e056      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e02:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f0      	beq.n	8006df0 <HAL_RCC_OscConfig+0x41c>
 8006e0e:	e04e      	b.n	8006eae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e10:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <HAL_RCC_OscConfig+0x4ec>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e16:	f7fa fcad 	bl	8001774 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e1e:	f7fa fca9 	bl	8001774 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e03f      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e30:	4b22      	ldr	r3, [pc, #136]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <HAL_RCC_OscConfig+0x44a>
 8006e3c:	e037      	b.n	8006eae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e032      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <HAL_RCC_OscConfig+0x4e8>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d028      	beq.n	8006eaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d121      	bne.n	8006eaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d11a      	bne.n	8006eaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d111      	bne.n	8006eaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	3b01      	subs	r3, #1
 8006e94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d107      	bne.n	8006eaa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	42470060 	.word	0x42470060

08006ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0cc      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed8:	4b68      	ldr	r3, [pc, #416]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d90c      	bls.n	8006f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee6:	4b65      	ldr	r3, [pc, #404]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eee:	4b63      	ldr	r3, [pc, #396]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0b8      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d020      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f18:	4b59      	ldr	r3, [pc, #356]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4a58      	ldr	r2, [pc, #352]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f30:	4b53      	ldr	r3, [pc, #332]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4a52      	ldr	r2, [pc, #328]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3c:	4b50      	ldr	r3, [pc, #320]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	494d      	ldr	r1, [pc, #308]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d044      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d107      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f62:	4b47      	ldr	r3, [pc, #284]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d119      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e07f      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d003      	beq.n	8006f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d107      	bne.n	8006f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e06f      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f92:	4b3b      	ldr	r3, [pc, #236]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e067      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa2:	4b37      	ldr	r3, [pc, #220]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f023 0203 	bic.w	r2, r3, #3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4934      	ldr	r1, [pc, #208]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb4:	f7fa fbde 	bl	8001774 <HAL_GetTick>
 8006fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fba:	e00a      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fbc:	f7fa fbda 	bl	8001774 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e04f      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd2:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 020c 	and.w	r2, r3, #12
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d1eb      	bne.n	8006fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe4:	4b25      	ldr	r3, [pc, #148]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d20c      	bcs.n	800700c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff2:	4b22      	ldr	r3, [pc, #136]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffa:	4b20      	ldr	r3, [pc, #128]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d001      	beq.n	800700c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e032      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4916      	ldr	r1, [pc, #88]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	4313      	orrs	r3, r2
 8007028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	490e      	ldr	r1, [pc, #56]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	4313      	orrs	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800704a:	f000 f821 	bl	8007090 <HAL_RCC_GetSysClockFreq>
 800704e:	4602      	mov	r2, r0
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	490a      	ldr	r1, [pc, #40]	; (8007084 <HAL_RCC_ClockConfig+0x1c0>)
 800705c:	5ccb      	ldrb	r3, [r1, r3]
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <HAL_RCC_ClockConfig+0x1c8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7fa fb3e 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023c00 	.word	0x40023c00
 8007080:	40023800 	.word	0x40023800
 8007084:	0800e7f8 	.word	0x0800e7f8
 8007088:	20000000 	.word	0x20000000
 800708c:	20000004 	.word	0x20000004

08007090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	607b      	str	r3, [r7, #4]
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	2300      	movs	r3, #0
 80070a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070a8:	4b67      	ldr	r3, [pc, #412]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 030c 	and.w	r3, r3, #12
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d00d      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0x40>
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	f200 80bd 	bhi.w	8007234 <HAL_RCC_GetSysClockFreq+0x1a4>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_RCC_GetSysClockFreq+0x34>
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d003      	beq.n	80070ca <HAL_RCC_GetSysClockFreq+0x3a>
 80070c2:	e0b7      	b.n	8007234 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070c4:	4b61      	ldr	r3, [pc, #388]	; (800724c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070c6:	60bb      	str	r3, [r7, #8]
       break;
 80070c8:	e0b7      	b.n	800723a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070ca:	4b61      	ldr	r3, [pc, #388]	; (8007250 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070cc:	60bb      	str	r3, [r7, #8]
      break;
 80070ce:	e0b4      	b.n	800723a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070d0:	4b5d      	ldr	r3, [pc, #372]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070da:	4b5b      	ldr	r3, [pc, #364]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d04d      	beq.n	8007182 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070e6:	4b58      	ldr	r3, [pc, #352]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	099b      	lsrs	r3, r3, #6
 80070ec:	461a      	mov	r2, r3
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	ea02 0800 	and.w	r8, r2, r0
 80070fe:	ea03 0901 	and.w	r9, r3, r1
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	014b      	lsls	r3, r1, #5
 8007110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007114:	0142      	lsls	r2, r0, #5
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	ebb0 0008 	subs.w	r0, r0, r8
 800711e:	eb61 0109 	sbc.w	r1, r1, r9
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	018b      	lsls	r3, r1, #6
 800712c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007130:	0182      	lsls	r2, r0, #6
 8007132:	1a12      	subs	r2, r2, r0
 8007134:	eb63 0301 	sbc.w	r3, r3, r1
 8007138:	f04f 0000 	mov.w	r0, #0
 800713c:	f04f 0100 	mov.w	r1, #0
 8007140:	00d9      	lsls	r1, r3, #3
 8007142:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007146:	00d0      	lsls	r0, r2, #3
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	eb12 0208 	adds.w	r2, r2, r8
 8007150:	eb43 0309 	adc.w	r3, r3, r9
 8007154:	f04f 0000 	mov.w	r0, #0
 8007158:	f04f 0100 	mov.w	r1, #0
 800715c:	0259      	lsls	r1, r3, #9
 800715e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007162:	0250      	lsls	r0, r2, #9
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	461a      	mov	r2, r3
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	f7f9 f828 	bl	80001c8 <__aeabi_uldivmod>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4613      	mov	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e04a      	b.n	8007218 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007182:	4b31      	ldr	r3, [pc, #196]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	099b      	lsrs	r3, r3, #6
 8007188:	461a      	mov	r2, r3
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007192:	f04f 0100 	mov.w	r1, #0
 8007196:	ea02 0400 	and.w	r4, r2, r0
 800719a:	ea03 0501 	and.w	r5, r3, r1
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	014b      	lsls	r3, r1, #5
 80071ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071b0:	0142      	lsls	r2, r0, #5
 80071b2:	4610      	mov	r0, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	1b00      	subs	r0, r0, r4
 80071b8:	eb61 0105 	sbc.w	r1, r1, r5
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	018b      	lsls	r3, r1, #6
 80071c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071ca:	0182      	lsls	r2, r0, #6
 80071cc:	1a12      	subs	r2, r2, r0
 80071ce:	eb63 0301 	sbc.w	r3, r3, r1
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f04f 0100 	mov.w	r1, #0
 80071da:	00d9      	lsls	r1, r3, #3
 80071dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071e0:	00d0      	lsls	r0, r2, #3
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	1912      	adds	r2, r2, r4
 80071e8:	eb45 0303 	adc.w	r3, r5, r3
 80071ec:	f04f 0000 	mov.w	r0, #0
 80071f0:	f04f 0100 	mov.w	r1, #0
 80071f4:	0299      	lsls	r1, r3, #10
 80071f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071fa:	0290      	lsls	r0, r2, #10
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4610      	mov	r0, r2
 8007202:	4619      	mov	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	461a      	mov	r2, r3
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	f7f8 ffdc 	bl	80001c8 <__aeabi_uldivmod>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4613      	mov	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007218:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	3301      	adds	r3, #1
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	60bb      	str	r3, [r7, #8]
      break;
 8007232:	e002      	b.n	800723a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007236:	60bb      	str	r3, [r7, #8]
      break;
 8007238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800723a:	68bb      	ldr	r3, [r7, #8]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007246:	bf00      	nop
 8007248:	40023800 	.word	0x40023800
 800724c:	00f42400 	.word	0x00f42400
 8007250:	007a1200 	.word	0x007a1200

08007254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <HAL_RCC_GetHCLKFreq+0x14>)
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000000 	.word	0x20000000

0800726c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007270:	f7ff fff0 	bl	8007254 <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0a9b      	lsrs	r3, r3, #10
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4903      	ldr	r1, [pc, #12]	; (8007290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40023800 	.word	0x40023800
 8007290:	0800e808 	.word	0x0800e808

08007294 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d035      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072bc:	4b62      	ldr	r3, [pc, #392]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072c2:	f7fa fa57 	bl	8001774 <HAL_GetTick>
 80072c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072c8:	e008      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072ca:	f7fa fa53 	bl	8001774 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e0b0      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072dc:	4b5b      	ldr	r3, [pc, #364]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f0      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	019a      	lsls	r2, r3, #6
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	071b      	lsls	r3, r3, #28
 80072f4:	4955      	ldr	r1, [pc, #340]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072fc:	4b52      	ldr	r3, [pc, #328]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007302:	f7fa fa37 	bl	8001774 <HAL_GetTick>
 8007306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007308:	e008      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800730a:	f7fa fa33 	bl	8001774 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	d901      	bls.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e090      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800731c:	4b4b      	ldr	r3, [pc, #300]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0f0      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8083 	beq.w	800743c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	4b44      	ldr	r3, [pc, #272]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	4a43      	ldr	r2, [pc, #268]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007344:	6413      	str	r3, [r2, #64]	; 0x40
 8007346:	4b41      	ldr	r3, [pc, #260]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007352:	4b3f      	ldr	r3, [pc, #252]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a3e      	ldr	r2, [pc, #248]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800735c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800735e:	f7fa fa09 	bl	8001774 <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007364:	e008      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007366:	f7fa fa05 	bl	8001774 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e062      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007378:	4b35      	ldr	r3, [pc, #212]	; (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007384:	4b31      	ldr	r3, [pc, #196]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02f      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d028      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073a2:	4b2a      	ldr	r3, [pc, #168]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073ac:	4b29      	ldr	r3, [pc, #164]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073b2:	4b28      	ldr	r3, [pc, #160]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073b8:	4a24      	ldr	r2, [pc, #144]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073be:	4b23      	ldr	r3, [pc, #140]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d114      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073ca:	f7fa f9d3 	bl	8001774 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d0:	e00a      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d2:	f7fa f9cf 	bl	8001774 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e02a      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e8:	4b18      	ldr	r3, [pc, #96]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0ee      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007400:	d10d      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	490d      	ldr	r1, [pc, #52]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007418:	4313      	orrs	r3, r2
 800741a:	608b      	str	r3, [r1, #8]
 800741c:	e005      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a0a      	ldr	r2, [pc, #40]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007424:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007428:	6093      	str	r3, [r2, #8]
 800742a:	4b08      	ldr	r3, [pc, #32]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800742c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007436:	4905      	ldr	r1, [pc, #20]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007438:	4313      	orrs	r3, r2
 800743a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	42470068 	.word	0x42470068
 800744c:	40023800 	.word	0x40023800
 8007450:	40007000 	.word	0x40007000
 8007454:	42470e40 	.word	0x42470e40

08007458 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2203      	movs	r2, #3
 8007464:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746c:	099b      	lsrs	r3, r3, #6
 800746e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007476:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747c:	0f1b      	lsrs	r3, r3, #28
 800747e:	f003 0207 	and.w	r2, r3, #7
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800748e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007490:	4b06      	ldr	r3, [pc, #24]	; (80074ac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007494:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	40023800 	.word	0x40023800

080074b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d13e      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d12f      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074e4:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074e6:	617b      	str	r3, [r7, #20]
          break;
 80074e8:	e02f      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f6:	d108      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074f8:	4b18      	ldr	r3, [pc, #96]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007500:	4a18      	ldr	r2, [pc, #96]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	e007      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800750a:	4b14      	ldr	r3, [pc, #80]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007512:	4a15      	ldr	r2, [pc, #84]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800751a:	4b10      	ldr	r3, [pc, #64]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800751c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007520:	099b      	lsrs	r3, r3, #6
 8007522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007534:	0f1b      	lsrs	r3, r3, #28
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]
          break;
 8007542:	e002      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
          break;
 8007548:	bf00      	nop
        }
      }
      break;
 800754a:	bf00      	nop
    }
  }
  return frequency;
 800754c:	697b      	ldr	r3, [r7, #20]
}
 800754e:	4618      	mov	r0, r3
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800
 8007560:	00bb8000 	.word	0x00bb8000
 8007564:	007a1200 	.word	0x007a1200
 8007568:	00f42400 	.word	0x00f42400

0800756c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800756c:	b084      	sub	sp, #16
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	f107 001c 	add.w	r0, r7, #28
 800757a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	2b01      	cmp	r3, #1
 8007582:	d122      	bne.n	80075ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d105      	bne.n	80075be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f9a0 	bl	8007904 <USB_CoreReset>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	e01a      	b.n	8007600 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f994 	bl	8007904 <USB_CoreReset>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
 80075f2:	e005      	b.n	8007600 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	2b01      	cmp	r3, #1
 8007604:	d10b      	bne.n	800761e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f043 0206 	orr.w	r2, r3, #6
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f043 0220 	orr.w	r2, r3, #32
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800762a:	b004      	add	sp, #16
 800762c:	4770      	bx	lr

0800762e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f043 0201 	orr.w	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f023 0201 	bic.w	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d115      	bne.n	80076c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076a0:	2001      	movs	r0, #1
 80076a2:	f7fa f873 	bl	800178c <HAL_Delay>
      ms++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f91a 	bl	80078e6 <USB_GetMode>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d01e      	beq.n	80076f6 <USB_SetCurrentMode+0x84>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b31      	cmp	r3, #49	; 0x31
 80076bc:	d9f0      	bls.n	80076a0 <USB_SetCurrentMode+0x2e>
 80076be:	e01a      	b.n	80076f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d115      	bne.n	80076f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076d2:	2001      	movs	r0, #1
 80076d4:	f7fa f85a 	bl	800178c <HAL_Delay>
      ms++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f901 	bl	80078e6 <USB_GetMode>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <USB_SetCurrentMode+0x84>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b31      	cmp	r3, #49	; 0x31
 80076ee:	d9f0      	bls.n	80076d2 <USB_SetCurrentMode+0x60>
 80076f0:	e001      	b.n	80076f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e005      	b.n	8007702 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b32      	cmp	r3, #50	; 0x32
 80076fa:	d101      	bne.n	8007700 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	019b      	lsls	r3, r3, #6
 800771e:	f043 0220 	orr.w	r2, r3, #32
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	4a08      	ldr	r2, [pc, #32]	; (8007750 <USB_FlushTxFifo+0x44>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e006      	b.n	8007744 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b20      	cmp	r3, #32
 8007740:	d0f1      	beq.n	8007726 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	00030d40 	.word	0x00030d40

08007754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2210      	movs	r2, #16
 8007764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	4a08      	ldr	r2, [pc, #32]	; (8007790 <USB_FlushRxFifo+0x3c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e006      	b.n	8007784 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b10      	cmp	r3, #16
 8007780:	d0f1      	beq.n	8007766 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	00030d40 	.word	0x00030d40

08007794 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007794:	b480      	push	{r7}
 8007796:	b089      	sub	sp, #36	; 0x24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4611      	mov	r1, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	460b      	mov	r3, r1
 80077a4:	71fb      	strb	r3, [r7, #7]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80077b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d123      	bne.n	8007802 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077ba:	88bb      	ldrh	r3, [r7, #4]
 80077bc:	3303      	adds	r3, #3
 80077be:	089b      	lsrs	r3, r3, #2
 80077c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077c2:	2300      	movs	r3, #0
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	e018      	b.n	80077fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	031a      	lsls	r2, r3, #12
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d4:	461a      	mov	r2, r3
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	3301      	adds	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	3301      	adds	r3, #1
 80077ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	3301      	adds	r3, #1
 80077f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	3301      	adds	r3, #1
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d3e2      	bcc.n	80077c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3724      	adds	r7, #36	; 0x24
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007810:	b480      	push	{r7}
 8007812:	b08b      	sub	sp, #44	; 0x2c
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	089b      	lsrs	r3, r3, #2
 800782a:	b29b      	uxth	r3, r3
 800782c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007836:	2300      	movs	r3, #0
 8007838:	623b      	str	r3, [r7, #32]
 800783a:	e014      	b.n	8007866 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	601a      	str	r2, [r3, #0]
    pDest++;
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	3301      	adds	r3, #1
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	3301      	adds	r3, #1
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	3301      	adds	r3, #1
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	3301      	adds	r3, #1
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	3301      	adds	r3, #1
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	429a      	cmp	r2, r3
 800786c:	d3e6      	bcc.n	800783c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800786e:	8bfb      	ldrh	r3, [r7, #30]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01e      	beq.n	80078b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787e:	461a      	mov	r2, r3
 8007880:	f107 0310 	add.w	r3, r7, #16
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
 8007894:	b2da      	uxtb	r2, r3
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	701a      	strb	r2, [r3, #0]
      i++;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	3301      	adds	r3, #1
 800789e:	623b      	str	r3, [r7, #32]
      pDest++;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	3301      	adds	r3, #1
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80078a6:	8bfb      	ldrh	r3, [r7, #30]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078ac:	8bfb      	ldrh	r3, [r7, #30]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1ea      	bne.n	8007888 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	372c      	adds	r7, #44	; 0x2c
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4013      	ands	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078d8:	68fb      	ldr	r3, [r7, #12]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f003 0301 	and.w	r3, r3, #1
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	4a13      	ldr	r2, [pc, #76]	; (8007964 <USB_CoreReset+0x60>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d901      	bls.n	8007920 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e01a      	b.n	8007956 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	daf3      	bge.n	8007910 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f043 0201 	orr.w	r2, r3, #1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <USB_CoreReset+0x60>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d901      	bls.n	8007948 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	d0f1      	beq.n	8007938 <USB_CoreReset+0x34>

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	00030d40 	.word	0x00030d40

08007968 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007968:	b084      	sub	sp, #16
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	f107 001c 	add.w	r0, r7, #28
 8007976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007984:	461a      	mov	r2, r3
 8007986:	2300      	movs	r3, #0
 8007988:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d018      	beq.n	80079ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10a      	bne.n	80079d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079ce:	f043 0304 	orr.w	r3, r3, #4
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e014      	b.n	8007a00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079e4:	f023 0304 	bic.w	r3, r3, #4
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e009      	b.n	8007a00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079fa:	f023 0304 	bic.w	r3, r3, #4
 80079fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007a00:	2110      	movs	r1, #16
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe82 	bl	800770c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fea3 	bl	8007754 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	e015      	b.n	8007a40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a20:	461a      	mov	r2, r3
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295
 8007a26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a34:	461a      	mov	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d3e5      	bcc.n	8007a14 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f04f 32ff 	mov.w	r2, #4294967295
 8007a54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a13      	ldr	r2, [pc, #76]	; (8007abc <USB_HostInit+0x154>)
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <USB_HostInit+0x158>)
 8007a74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007a78:	e009      	b.n	8007a8e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2280      	movs	r2, #128	; 0x80
 8007a7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a10      	ldr	r2, [pc, #64]	; (8007ac4 <USB_HostInit+0x15c>)
 8007a84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a0f      	ldr	r2, [pc, #60]	; (8007ac8 <USB_HostInit+0x160>)
 8007a8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f043 0210 	orr.w	r2, r3, #16
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699a      	ldr	r2, [r3, #24]
 8007aa4:	4b09      	ldr	r3, [pc, #36]	; (8007acc <USB_HostInit+0x164>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ab8:	b004      	add	sp, #16
 8007aba:	4770      	bx	lr
 8007abc:	01000200 	.word	0x01000200
 8007ac0:	00e00300 	.word	0x00e00300
 8007ac4:	00600080 	.word	0x00600080
 8007ac8:	004000e0 	.word	0x004000e0
 8007acc:	a3200008 	.word	0xa3200008

08007ad0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d107      	bne.n	8007b22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b1e:	6053      	str	r3, [r2, #4]
 8007b20:	e009      	b.n	8007b36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d106      	bne.n	8007b36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f241 7370 	movw	r3, #6000	; 0x1770
 8007b34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007b74:	2064      	movs	r0, #100	; 0x64
 8007b76:	f7f9 fe09 	bl	800178c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007b88:	200a      	movs	r0, #10
 8007b8a:	f7f9 fdff 	bl	800178c <HAL_Delay>

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007bbc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <USB_DriveVbus+0x44>
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d106      	bne.n	8007bdc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007bd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be6:	d109      	bne.n	8007bfc <USB_DriveVbus+0x64>
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bfa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	0c5b      	lsrs	r3, r3, #17
 8007c28:	f003 0303 	and.w	r3, r3, #3
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	b29b      	uxth	r3, r3
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
	...

08007c5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	70fb      	strb	r3, [r7, #3]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70bb      	strb	r3, [r7, #2]
 8007c72:	4613      	mov	r3, r2
 8007c74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d87e      	bhi.n	8007d98 <USB_HC_Init+0x13c>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USB_HC_Init+0x44>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007d5b 	.word	0x08007d5b
 8007ca8:	08007cb1 	.word	0x08007cb1
 8007cac:	08007d1d 	.word	0x08007d1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f240 439d 	movw	r3, #1181	; 0x49d
 8007cc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007cc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	da10      	bge.n	8007cee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007cec:	e057      	b.n	8007d9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d051      	beq.n	8007d9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	78fa      	ldrb	r2, [r7, #3]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d18:	60d3      	str	r3, [r2, #12]
      break;
 8007d1a:	e040      	b.n	8007d9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8007d2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007d30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	da34      	bge.n	8007da2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	0151      	lsls	r1, r2, #5
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	440a      	add	r2, r1
 8007d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007d58:	e023      	b.n	8007da2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d66:	461a      	mov	r2, r3
 8007d68:	f240 2325 	movw	r3, #549	; 0x225
 8007d6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007d6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	da17      	bge.n	8007da6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007d94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007d96:	e006      	b.n	8007da6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	77fb      	strb	r3, [r7, #31]
      break;
 8007d9c:	e004      	b.n	8007da8 <USB_HC_Init+0x14c>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <USB_HC_Init+0x14c>
      break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <USB_HC_Init+0x14c>
      break;
 8007da6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dae:	699a      	ldr	r2, [r3, #24]
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	2101      	movs	r1, #1
 8007db8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dbc:	6939      	ldr	r1, [r7, #16]
 8007dbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007dd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da03      	bge.n	8007de2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e001      	b.n	8007de6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ff0f 	bl	8007c0a <USB_GetHostSpeed>
 8007dec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d106      	bne.n	8007e04 <USB_HC_Init+0x1a8>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d003      	beq.n	8007e04 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	e001      	b.n	8007e08 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e08:	787b      	ldrb	r3, [r7, #1]
 8007e0a:	059b      	lsls	r3, r3, #22
 8007e0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007e10:	78bb      	ldrb	r3, [r7, #2]
 8007e12:	02db      	lsls	r3, r3, #11
 8007e14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e1e:	049b      	lsls	r3, r3, #18
 8007e20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007e24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007e2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	0159      	lsls	r1, r3, #5
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	440b      	add	r3, r1
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e44:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007e46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d10f      	bne.n	8007e6e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007e6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08c      	sub	sp, #48	; 0x30
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d02d      	beq.n	8007efe <USB_HC_StartXfer+0x86>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d129      	bne.n	8007efe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d117      	bne.n	8007ee0 <USB_HC_StartXfer+0x68>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	79db      	ldrb	r3, [r3, #7]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <USB_HC_StartXfer+0x48>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	79db      	ldrb	r3, [r3, #7]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d10f      	bne.n	8007ee0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	6a3a      	ldr	r2, [r7, #32]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <USB_HC_StartXfer+0x86>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d107      	bne.n	8007efe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fa2f 	bl	8008358 <USB_DoPing>
      return HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e0f8      	b.n	80080f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	8912      	ldrh	r2, [r2, #8]
 8007f0e:	4413      	add	r3, r2
 8007f10:	3b01      	subs	r3, #1
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	8912      	ldrh	r2, [r2, #8]
 8007f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007f1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f1e:	8b7b      	ldrh	r3, [r7, #26]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d90b      	bls.n	8007f3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007f24:	8b7b      	ldrh	r3, [r7, #26]
 8007f26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	8912      	ldrh	r2, [r2, #8]
 8007f2e:	fb02 f203 	mul.w	r2, r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	611a      	str	r2, [r3, #16]
 8007f36:	e001      	b.n	8007f3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	78db      	ldrb	r3, [r3, #3]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	8912      	ldrh	r2, [r2, #8]
 8007f4a:	fb02 f203 	mul.w	r2, r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	611a      	str	r2, [r3, #16]
 8007f52:	e003      	b.n	8007f5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f66:	04d9      	lsls	r1, r3, #19
 8007f68:	4b63      	ldr	r3, [pc, #396]	; (80080f8 <USB_HC_StartXfer+0x280>)
 8007f6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	7a9b      	ldrb	r3, [r3, #10]
 8007f72:	075b      	lsls	r3, r3, #29
 8007f74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f78:	69f9      	ldr	r1, [r7, #28]
 8007f7a:	0148      	lsls	r0, r1, #5
 8007f7c:	6a39      	ldr	r1, [r7, #32]
 8007f7e:	4401      	add	r1, r0
 8007f80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	68d9      	ldr	r1, [r3, #12]
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9e:	460a      	mov	r2, r1
 8007fa0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf0c      	ite	eq
 8007fb2:	2301      	moveq	r3, #1
 8007fb4:	2300      	movne	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	6a3a      	ldr	r2, [r7, #32]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	7e7b      	ldrb	r3, [r7, #25]
 8007fea:	075b      	lsls	r3, r3, #29
 8007fec:	69f9      	ldr	r1, [r7, #28]
 8007fee:	0148      	lsls	r0, r1, #5
 8007ff0:	6a39      	ldr	r1, [r7, #32]
 8007ff2:	4401      	add	r1, r0
 8007ff4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008012:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	78db      	ldrb	r3, [r3, #3]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	e003      	b.n	800802e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800802c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008034:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	461a      	mov	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e04e      	b.n	80080f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	78db      	ldrb	r3, [r3, #3]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d149      	bne.n	80080ee <USB_HC_StartXfer+0x276>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d045      	beq.n	80080ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	79db      	ldrb	r3, [r3, #7]
 8008066:	2b03      	cmp	r3, #3
 8008068:	d830      	bhi.n	80080cc <USB_HC_StartXfer+0x254>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <USB_HC_StartXfer+0x1f8>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	08008081 	.word	0x08008081
 8008074:	080080a5 	.word	0x080080a5
 8008078:	08008081 	.word	0x08008081
 800807c:	080080a5 	.word	0x080080a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	3303      	adds	r3, #3
 8008086:	089b      	lsrs	r3, r3, #2
 8008088:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800808a:	8afa      	ldrh	r2, [r7, #22]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	b29b      	uxth	r3, r3
 8008092:	429a      	cmp	r2, r3
 8008094:	d91c      	bls.n	80080d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f043 0220 	orr.w	r2, r3, #32
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80080a2:	e015      	b.n	80080d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	3303      	adds	r3, #3
 80080aa:	089b      	lsrs	r3, r3, #2
 80080ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80080ae:	8afa      	ldrh	r2, [r7, #22]
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d90a      	bls.n	80080d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80080ca:	e003      	b.n	80080d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80080cc:	bf00      	nop
 80080ce:	e002      	b.n	80080d6 <USB_HC_StartXfer+0x25e>
        break;
 80080d0:	bf00      	nop
 80080d2:	e000      	b.n	80080d6 <USB_HC_StartXfer+0x25e>
        break;
 80080d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	68d9      	ldr	r1, [r3, #12]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	785a      	ldrb	r2, [r3, #1]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2000      	movs	r0, #0
 80080e6:	9000      	str	r0, [sp, #0]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff fb53 	bl	8007794 <USB_WritePacket>
  }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3728      	adds	r7, #40	; 0x28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	1ff80000 	.word	0x1ff80000

080080fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	b29b      	uxth	r3, r3
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800811e:	b480      	push	{r7}
 8008120:	b089      	sub	sp, #36	; 0x24
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	4413      	add	r3, r2
 800813e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	0c9b      	lsrs	r3, r3, #18
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	4413      	add	r3, r2
 8008154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	0fdb      	lsrs	r3, r3, #31
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b20      	cmp	r3, #32
 800816c:	d104      	bne.n	8008178 <USB_HC_Halt+0x5a>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	e0e8      	b.n	800834a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <USB_HC_Halt+0x66>
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d173      	bne.n	800826c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	4413      	add	r3, r2
 800818c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	440a      	add	r2, r1
 800819a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800819e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f040 80cb 	bne.w	8008348 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d143      	bne.n	8008246 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	4413      	add	r3, r2
 8008206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	440a      	add	r2, r1
 8008214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008218:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800821c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	3301      	adds	r3, #1
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800822a:	d81d      	bhi.n	8008268 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	4413      	add	r3, r2
 8008234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800823e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008242:	d0ec      	beq.n	800821e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008244:	e080      	b.n	8008348 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	4413      	add	r3, r2
 800824e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	440a      	add	r2, r1
 800825c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008264:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008266:	e06f      	b.n	8008348 <USB_HC_Halt+0x22a>
            break;
 8008268:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800826a:	e06d      	b.n	8008348 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	4413      	add	r3, r2
 8008274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	440a      	add	r2, r1
 8008282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800828a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d143      	bne.n	8008324 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	3301      	adds	r3, #1
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008308:	d81d      	bhi.n	8008346 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800831c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008320:	d0ec      	beq.n	80082fc <USB_HC_Halt+0x1de>
 8008322:	e011      	b.n	8008348 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	4413      	add	r3, r2
 800832c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	440a      	add	r2, r1
 800833a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800833e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	e000      	b.n	8008348 <USB_HC_Halt+0x22a>
          break;
 8008346:	bf00      	nop
    }
  }

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3724      	adds	r7, #36	; 0x24
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
	...

08008358 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800836c:	2301      	movs	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	04da      	lsls	r2, r3, #19
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <USB_DoPing+0x74>)
 8008376:	4013      	ands	r3, r2
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	0151      	lsls	r1, r2, #5
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	440a      	add	r2, r1
 8008380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008388:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4413      	add	r3, r2
 8008392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b6:	461a      	mov	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	1ff80000 	.word	0x1ff80000

080083d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff f935 	bl	8007650 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80083e6:	2110      	movs	r1, #16
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff f98f 	bl	800770c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff f9b0 	bl	8007754 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80083f4:	2300      	movs	r3, #0
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	e01f      	b.n	800843a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008410:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008418:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008420:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842e:	461a      	mov	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	3301      	adds	r3, #1
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b0f      	cmp	r3, #15
 800843e:	d9dc      	bls.n	80083fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008440:	2300      	movs	r3, #0
 8008442:	613b      	str	r3, [r7, #16]
 8008444:	e034      	b.n	80084b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800845c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008464:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800846c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847a:	461a      	mov	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3301      	adds	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800848c:	d80c      	bhi.n	80084a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084a4:	d0ec      	beq.n	8008480 <USB_StopHost+0xb0>
 80084a6:	e000      	b.n	80084aa <USB_StopHost+0xda>
        break;
 80084a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3301      	adds	r3, #1
 80084ae:	613b      	str	r3, [r7, #16]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b0f      	cmp	r3, #15
 80084b4:	d9c7      	bls.n	8008446 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084bc:	461a      	mov	r2, r3
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff f8ae 	bl	800762e <USB_EnableGlobalInt>

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80084e0:	4904      	ldr	r1, [pc, #16]	; (80084f4 <MX_FATFS_Init+0x18>)
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <MX_FATFS_Init+0x1c>)
 80084e4:	f005 fc8c 	bl	800de00 <FATFS_LinkDriver>
 80084e8:	4603      	mov	r3, r0
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b03      	ldr	r3, [pc, #12]	; (80084fc <MX_FATFS_Init+0x20>)
 80084ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80084f0:	bf00      	nop
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20002290 	.word	0x20002290
 80084f8:	0800e818 	.word	0x0800e818
 80084fc:	200042f8 	.word	0x200042f8

08008500 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008504:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008506:	4618      	mov	r0, r3
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	4619      	mov	r1, r3
 800853a:	4808      	ldr	r0, [pc, #32]	; (800855c <USBH_status+0x34>)
 800853c:	f000 fe1a 	bl	8009174 <USBH_MSC_UnitIsReady>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <USBH_status+0x24>
  {
    res = RES_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
 800854a:	e001      	b.n	8008550 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200042fc 	.word	0x200042fc

08008560 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b094      	sub	sp, #80	; 0x50
 8008564:	af02      	add	r7, sp, #8
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008576:	7bf9      	ldrb	r1, [r7, #15]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4813      	ldr	r0, [pc, #76]	; (80085d0 <USBH_read+0x70>)
 8008582:	f000 fe41 	bl	8009208 <USBH_MSC_Read>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d103      	bne.n	8008594 <USBH_read+0x34>
  {
    res = RES_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008592:	e017      	b.n	80085c4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008594:	f107 0210 	add.w	r2, r7, #16
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4619      	mov	r1, r3
 800859c:	480c      	ldr	r0, [pc, #48]	; (80085d0 <USBH_read+0x70>)
 800859e:	f000 fe0f 	bl	80091c0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80085a2:	7f7b      	ldrb	r3, [r7, #29]
 80085a4:	2b3a      	cmp	r3, #58	; 0x3a
 80085a6:	d005      	beq.n	80085b4 <USBH_read+0x54>
 80085a8:	2b3a      	cmp	r3, #58	; 0x3a
 80085aa:	dc07      	bgt.n	80085bc <USBH_read+0x5c>
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d001      	beq.n	80085b4 <USBH_read+0x54>
 80085b0:	2b28      	cmp	r3, #40	; 0x28
 80085b2:	d103      	bne.n	80085bc <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80085b4:	2303      	movs	r3, #3
 80085b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80085ba:	e003      	b.n	80085c4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80085c2:	bf00      	nop
    }
  }

  return res;
 80085c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3748      	adds	r7, #72	; 0x48
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	200042fc 	.word	0x200042fc

080085d4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b094      	sub	sp, #80	; 0x50
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80085ea:	7bf9      	ldrb	r1, [r7, #15]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	4817      	ldr	r0, [pc, #92]	; (8008654 <USBH_write+0x80>)
 80085f6:	f000 fe70 	bl	80092da <USBH_MSC_Write>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <USBH_write+0x34>
  {
    res = RES_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008606:	e01f      	b.n	8008648 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008608:	f107 0210 	add.w	r2, r7, #16
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	4619      	mov	r1, r3
 8008610:	4810      	ldr	r0, [pc, #64]	; (8008654 <USBH_write+0x80>)
 8008612:	f000 fdd5 	bl	80091c0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008616:	7f7b      	ldrb	r3, [r7, #29]
 8008618:	2b3a      	cmp	r3, #58	; 0x3a
 800861a:	d00d      	beq.n	8008638 <USBH_write+0x64>
 800861c:	2b3a      	cmp	r3, #58	; 0x3a
 800861e:	dc0f      	bgt.n	8008640 <USBH_write+0x6c>
 8008620:	2b28      	cmp	r3, #40	; 0x28
 8008622:	d009      	beq.n	8008638 <USBH_write+0x64>
 8008624:	2b28      	cmp	r3, #40	; 0x28
 8008626:	dc0b      	bgt.n	8008640 <USBH_write+0x6c>
 8008628:	2b04      	cmp	r3, #4
 800862a:	d005      	beq.n	8008638 <USBH_write+0x64>
 800862c:	2b27      	cmp	r3, #39	; 0x27
 800862e:	d107      	bne.n	8008640 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008630:	2302      	movs	r3, #2
 8008632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008636:	e007      	b.n	8008648 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008638:	2303      	movs	r3, #3
 800863a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800863e:	e003      	b.n	8008648 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008646:	bf00      	nop
    }
  }

  return res;
 8008648:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800864c:	4618      	mov	r0, r3
 800864e:	3748      	adds	r7, #72	; 0x48
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	200042fc 	.word	0x200042fc

08008658 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b090      	sub	sp, #64	; 0x40
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	603a      	str	r2, [r7, #0]
 8008662:	71fb      	strb	r3, [r7, #7]
 8008664:	460b      	mov	r3, r1
 8008666:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800866e:	79bb      	ldrb	r3, [r7, #6]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d852      	bhi.n	800871a <USBH_ioctl+0xc2>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <USBH_ioctl+0x24>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	0800868d 	.word	0x0800868d
 8008680:	08008695 	.word	0x08008695
 8008684:	080086bf 	.word	0x080086bf
 8008688:	080086eb 	.word	0x080086eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008692:	e045      	b.n	8008720 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008694:	f107 0208 	add.w	r2, r7, #8
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	4619      	mov	r1, r3
 800869c:	4823      	ldr	r0, [pc, #140]	; (800872c <USBH_ioctl+0xd4>)
 800869e:	f000 fd8f 	bl	80091c0 <USBH_MSC_GetLUNInfo>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80086b4:	e034      	b.n	8008720 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80086bc:	e030      	b.n	8008720 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80086be:	f107 0208 	add.w	r2, r7, #8
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	4619      	mov	r1, r3
 80086c6:	4819      	ldr	r0, [pc, #100]	; (800872c <USBH_ioctl+0xd4>)
 80086c8:	f000 fd7a 	bl	80091c0 <USBH_MSC_GetLUNInfo>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d107      	bne.n	80086e2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80086d2:	8a3b      	ldrh	r3, [r7, #16]
 80086d4:	461a      	mov	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80086e0:	e01e      	b.n	8008720 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80086e8:	e01a      	b.n	8008720 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80086ea:	f107 0208 	add.w	r2, r7, #8
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	4619      	mov	r1, r3
 80086f2:	480e      	ldr	r0, [pc, #56]	; (800872c <USBH_ioctl+0xd4>)
 80086f4:	f000 fd64 	bl	80091c0 <USBH_MSC_GetLUNInfo>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80086fe:	8a3b      	ldrh	r3, [r7, #16]
 8008700:	0a5b      	lsrs	r3, r3, #9
 8008702:	b29b      	uxth	r3, r3
 8008704:	461a      	mov	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008710:	e006      	b.n	8008720 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008718:	e002      	b.n	8008720 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800871a:	2304      	movs	r3, #4
 800871c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008720:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008724:	4618      	mov	r0, r3
 8008726:	3740      	adds	r7, #64	; 0x40
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	200042fc 	.word	0x200042fc

08008730 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b089      	sub	sp, #36	; 0x24
 8008734:	af04      	add	r7, sp, #16
 8008736:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800873e:	7919      	ldrb	r1, [r3, #4]
 8008740:	2350      	movs	r3, #80	; 0x50
 8008742:	2206      	movs	r2, #6
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fc53 	bl	8009ff0 <USBH_FindInterface>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2bff      	cmp	r3, #255	; 0xff
 8008752:	d002      	beq.n	800875a <USBH_MSC_InterfaceInit+0x2a>
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d901      	bls.n	800875e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800875a:	2302      	movs	r3, #2
 800875c:	e0ef      	b.n	800893e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fc28 	bl	8009fb8 <USBH_SelectInterface>
 8008768:	4603      	mov	r3, r0
 800876a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008772:	2302      	movs	r3, #2
 8008774:	e0e3      	b.n	800893e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800877c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008780:	f005 fed0 	bl	800e524 <malloc>
 8008784:	4603      	mov	r3, r0
 8008786:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008798:	2302      	movs	r3, #2
 800879a:	e0d0      	b.n	800893e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800879c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a0:	2100      	movs	r1, #0
 80087a2:	68b8      	ldr	r0, [r7, #8]
 80087a4:	f005 fedc 	bl	800e560 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	211a      	movs	r1, #26
 80087ae:	fb01 f303 	mul.w	r3, r1, r3
 80087b2:	4413      	add	r3, r2
 80087b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b25b      	sxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da16      	bge.n	80087ee <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	211a      	movs	r1, #26
 80087c6:	fb01 f303 	mul.w	r3, r1, r3
 80087ca:	4413      	add	r3, r2
 80087cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	211a      	movs	r1, #26
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	815a      	strh	r2, [r3, #10]
 80087ec:	e015      	b.n	800881a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	211a      	movs	r1, #26
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	211a      	movs	r1, #26
 800880a:	fb01 f303 	mul.w	r3, r1, r3
 800880e:	4413      	add	r3, r2
 8008810:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	211a      	movs	r1, #26
 8008820:	fb01 f303 	mul.w	r3, r1, r3
 8008824:	4413      	add	r3, r2
 8008826:	f203 3356 	addw	r3, r3, #854	; 0x356
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	b25b      	sxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	da16      	bge.n	8008860 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	211a      	movs	r1, #26
 8008838:	fb01 f303 	mul.w	r3, r1, r3
 800883c:	4413      	add	r3, r2
 800883e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	211a      	movs	r1, #26
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	4413      	add	r3, r2
 8008854:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	815a      	strh	r2, [r3, #10]
 800885e:	e015      	b.n	800888c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	211a      	movs	r1, #26
 8008866:	fb01 f303 	mul.w	r3, r1, r3
 800886a:	4413      	add	r3, r2
 800886c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	211a      	movs	r1, #26
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	4413      	add	r3, r2
 8008882:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008886:	881a      	ldrh	r2, [r3, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2200      	movs	r2, #0
 8008890:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2200      	movs	r2, #0
 8008896:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	799b      	ldrb	r3, [r3, #6]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 fdc4 	bl	800b432 <USBH_AllocPipe>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	79db      	ldrb	r3, [r3, #7]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f002 fdba 	bl	800b432 <USBH_AllocPipe>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fdac 	bl	8009424 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	7959      	ldrb	r1, [r3, #5]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	7998      	ldrb	r0, [r3, #6]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	8912      	ldrh	r2, [r2, #8]
 80088e4:	9202      	str	r2, [sp, #8]
 80088e6:	2202      	movs	r2, #2
 80088e8:	9201      	str	r2, [sp, #4]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4623      	mov	r3, r4
 80088ee:	4602      	mov	r2, r0
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 fd6f 	bl	800b3d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	7919      	ldrb	r1, [r3, #4]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	79d8      	ldrb	r0, [r3, #7]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	8952      	ldrh	r2, [r2, #10]
 800890e:	9202      	str	r2, [sp, #8]
 8008910:	2202      	movs	r2, #2
 8008912:	9201      	str	r2, [sp, #4]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	4623      	mov	r3, r4
 8008918:	4602      	mov	r2, r0
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f002 fd5a 	bl	800b3d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	791b      	ldrb	r3, [r3, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f005 fcfd 	bl	800e328 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	795b      	ldrb	r3, [r3, #5]
 8008932:	2200      	movs	r2, #0
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f005 fcf6 	bl	800e328 <USBH_LL_SetToggle>

  return USBH_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	bd90      	pop	{r4, r7, pc}

08008946 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	795b      	ldrb	r3, [r3, #5]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00e      	beq.n	800897e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	795b      	ldrb	r3, [r3, #5]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f002 fd53 	bl	800b412 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	795b      	ldrb	r3, [r3, #5]
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f002 fd7e 	bl	800b474 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	791b      	ldrb	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00e      	beq.n	80089a4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	791b      	ldrb	r3, [r3, #4]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f002 fd40 	bl	800b412 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	791b      	ldrb	r3, [r3, #4]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f002 fd6b 	bl	800b474 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f005 fdbb 	bl	800e534 <free>
    phost->pActiveClass->pData = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c4:	2200      	movs	r2, #0
 80089c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	7b9b      	ldrb	r3, [r3, #14]
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d041      	beq.n	8008a74 <USBH_MSC_ClassRequest+0xa2>
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	dc4b      	bgt.n	8008a8c <USBH_MSC_ClassRequest+0xba>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <USBH_MSC_ClassRequest+0x2a>
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d147      	bne.n	8008a8c <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fcf0 	bl	80093e6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d104      	bne.n	8008a1a <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d137      	bne.n	8008a90 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d804      	bhi.n	8008a32 <USBH_MSC_ClassRequest+0x60>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	e000      	b.n	8008a34 <USBH_MSC_ClassRequest+0x62>
 8008a32:	2202      	movs	r2, #2
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73bb      	strb	r3, [r7, #14]
 8008a3c:	e014      	b.n	8008a68 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	2134      	movs	r1, #52	; 0x34
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	4413      	add	r3, r2
 8008a4a:	3392      	adds	r3, #146	; 0x92
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	2134      	movs	r1, #52	; 0x34
 8008a56:	fb01 f303 	mul.w	r3, r1, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	33c1      	adds	r3, #193	; 0xc1
 8008a5e:	2200      	movs	r2, #0
 8008a60:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	3301      	adds	r3, #1
 8008a66:	73bb      	strb	r3, [r7, #14]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	7bba      	ldrb	r2, [r7, #14]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d3e5      	bcc.n	8008a3e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008a72:	e00d      	b.n	8008a90 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008a74:	2100      	movs	r1, #0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f002 f87b 	bl	800ab72 <USBH_ClrFeature>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d108      	bne.n	8008a94 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	7bda      	ldrb	r2, [r3, #15]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008a8a:	e003      	b.n	8008a94 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008a94:	bf00      	nop
  }

  return status;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008aba:	2301      	movs	r3, #1
 8008abc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	7b1b      	ldrb	r3, [r3, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <USBH_MSC_Process+0x2e>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	f000 8271 	beq.w	8008fae <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008acc:	e272      	b.n	8008fb4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	429a      	cmp	r2, r3
 8008adc:	f080 824f 	bcs.w	8008f7e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	2334      	movs	r3, #52	; 0x34
 8008aec:	fb03 f301 	mul.w	r3, r3, r1
 8008af0:	4413      	add	r3, r2
 8008af2:	3391      	adds	r3, #145	; 0x91
 8008af4:	2201      	movs	r2, #1
 8008af6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008afe:	4619      	mov	r1, r3
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	2334      	movs	r3, #52	; 0x34
 8008b04:	fb03 f301 	mul.w	r3, r3, r1
 8008b08:	4413      	add	r3, r2
 8008b0a:	3390      	adds	r3, #144	; 0x90
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b08      	cmp	r3, #8
 8008b10:	f200 8243 	bhi.w	8008f9a <USBH_MSC_Process+0x4fa>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <USBH_MSC_Process+0x7c>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008f9b 	.word	0x08008f9b
 8008b24:	08008c09 	.word	0x08008c09
 8008b28:	08008d8d 	.word	0x08008d8d
 8008b2c:	08008b67 	.word	0x08008b67
 8008b30:	08008e59 	.word	0x08008e59
 8008b34:	08008f9b 	.word	0x08008f9b
 8008b38:	08008f9b 	.word	0x08008f9b
 8008b3c:	08008f6d 	.word	0x08008f6d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b46:	4619      	mov	r1, r3
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	2334      	movs	r3, #52	; 0x34
 8008b4c:	fb03 f301 	mul.w	r3, r3, r1
 8008b50:	4413      	add	r3, r2
 8008b52:	3390      	adds	r3, #144	; 0x90
 8008b54:	2204      	movs	r2, #4
 8008b56:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008b64:	e222      	b.n	8008fac <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b6c:	b2d9      	uxtb	r1, r3
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b74:	461a      	mov	r2, r3
 8008b76:	2334      	movs	r3, #52	; 0x34
 8008b78:	fb03 f302 	mul.w	r3, r3, r2
 8008b7c:	3398      	adds	r3, #152	; 0x98
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4413      	add	r3, r2
 8008b82:	3307      	adds	r3, #7
 8008b84:	461a      	mov	r2, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 ff6a 	bl	8009a60 <USBH_MSC_SCSI_Inquiry>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10b      	bne.n	8008bae <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	2334      	movs	r3, #52	; 0x34
 8008ba2:	fb03 f301 	mul.w	r3, r3, r1
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3390      	adds	r3, #144	; 0x90
 8008baa:	2202      	movs	r2, #2
 8008bac:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d10c      	bne.n	8008bce <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bba:	4619      	mov	r1, r3
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	2334      	movs	r3, #52	; 0x34
 8008bc0:	fb03 f301 	mul.w	r3, r3, r1
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3390      	adds	r3, #144	; 0x90
 8008bc8:	2205      	movs	r2, #5
 8008bca:	701a      	strb	r2, [r3, #0]
            break;
 8008bcc:	e1e7      	b.n	8008f9e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	f040 81e4 	bne.w	8008f9e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bdc:	4619      	mov	r1, r3
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	2334      	movs	r3, #52	; 0x34
 8008be2:	fb03 f301 	mul.w	r3, r3, r1
 8008be6:	4413      	add	r3, r2
 8008be8:	3390      	adds	r3, #144	; 0x90
 8008bea:	2201      	movs	r2, #1
 8008bec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	2334      	movs	r3, #52	; 0x34
 8008bfa:	fb03 f301 	mul.w	r3, r3, r1
 8008bfe:	4413      	add	r3, r2
 8008c00:	3391      	adds	r3, #145	; 0x91
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
            break;
 8008c06:	e1ca      	b.n	8008f9e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fe66 	bl	80098e4 <USBH_MSC_SCSI_TestUnitReady>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d149      	bne.n	8008cb6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c28:	4619      	mov	r1, r3
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	2334      	movs	r3, #52	; 0x34
 8008c2e:	fb03 f301 	mul.w	r3, r3, r1
 8008c32:	4413      	add	r3, r2
 8008c34:	3392      	adds	r3, #146	; 0x92
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00c      	beq.n	8008c56 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c42:	4619      	mov	r1, r3
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	2334      	movs	r3, #52	; 0x34
 8008c48:	fb03 f301 	mul.w	r3, r3, r1
 8008c4c:	4413      	add	r3, r2
 8008c4e:	33c1      	adds	r3, #193	; 0xc1
 8008c50:	2201      	movs	r2, #1
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	e00b      	b.n	8008c6e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	2334      	movs	r3, #52	; 0x34
 8008c62:	fb03 f301 	mul.w	r3, r3, r1
 8008c66:	4413      	add	r3, r2
 8008c68:	33c1      	adds	r3, #193	; 0xc1
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c74:	4619      	mov	r1, r3
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	2334      	movs	r3, #52	; 0x34
 8008c7a:	fb03 f301 	mul.w	r3, r3, r1
 8008c7e:	4413      	add	r3, r2
 8008c80:	3390      	adds	r3, #144	; 0x90
 8008c82:	2203      	movs	r2, #3
 8008c84:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	2334      	movs	r3, #52	; 0x34
 8008c92:	fb03 f301 	mul.w	r3, r3, r1
 8008c96:	4413      	add	r3, r2
 8008c98:	3391      	adds	r3, #145	; 0x91
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	2334      	movs	r3, #52	; 0x34
 8008caa:	fb03 f301 	mul.w	r3, r3, r1
 8008cae:	4413      	add	r3, r2
 8008cb0:	3392      	adds	r3, #146	; 0x92
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d14a      	bne.n	8008d52 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	2334      	movs	r3, #52	; 0x34
 8008cc8:	fb03 f301 	mul.w	r3, r3, r1
 8008ccc:	4413      	add	r3, r2
 8008cce:	3392      	adds	r3, #146	; 0x92
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d00c      	beq.n	8008cf0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cdc:	4619      	mov	r1, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	2334      	movs	r3, #52	; 0x34
 8008ce2:	fb03 f301 	mul.w	r3, r3, r1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	33c1      	adds	r3, #193	; 0xc1
 8008cea:	2201      	movs	r2, #1
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	e00b      	b.n	8008d08 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	2334      	movs	r3, #52	; 0x34
 8008cfc:	fb03 f301 	mul.w	r3, r3, r1
 8008d00:	4413      	add	r3, r2
 8008d02:	33c1      	adds	r3, #193	; 0xc1
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d0e:	4619      	mov	r1, r3
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	2334      	movs	r3, #52	; 0x34
 8008d14:	fb03 f301 	mul.w	r3, r3, r1
 8008d18:	4413      	add	r3, r2
 8008d1a:	3390      	adds	r3, #144	; 0x90
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d26:	4619      	mov	r1, r3
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	2334      	movs	r3, #52	; 0x34
 8008d2c:	fb03 f301 	mul.w	r3, r3, r1
 8008d30:	4413      	add	r3, r2
 8008d32:	3391      	adds	r3, #145	; 0x91
 8008d34:	2201      	movs	r2, #1
 8008d36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d3e:	4619      	mov	r1, r3
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	2334      	movs	r3, #52	; 0x34
 8008d44:	fb03 f301 	mul.w	r3, r3, r1
 8008d48:	4413      	add	r3, r2
 8008d4a:	3392      	adds	r3, #146	; 0x92
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	701a      	strb	r2, [r3, #0]
            break;
 8008d50:	e127      	b.n	8008fa2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	f040 8124 	bne.w	8008fa2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d60:	4619      	mov	r1, r3
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	2334      	movs	r3, #52	; 0x34
 8008d66:	fb03 f301 	mul.w	r3, r3, r1
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3390      	adds	r3, #144	; 0x90
 8008d6e:	2201      	movs	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d78:	4619      	mov	r1, r3
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	2334      	movs	r3, #52	; 0x34
 8008d7e:	fb03 f301 	mul.w	r3, r3, r1
 8008d82:	4413      	add	r3, r2
 8008d84:	3391      	adds	r3, #145	; 0x91
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
            break;
 8008d8a:	e10a      	b.n	8008fa2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d92:	b2d9      	uxtb	r1, r3
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	2334      	movs	r3, #52	; 0x34
 8008d9e:	fb03 f302 	mul.w	r3, r3, r2
 8008da2:	3390      	adds	r3, #144	; 0x90
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4413      	add	r3, r2
 8008da8:	3304      	adds	r3, #4
 8008daa:	461a      	mov	r2, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fddc 	bl	800996a <USBH_MSC_SCSI_ReadCapacity>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d120      	bne.n	8008dfe <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	2334      	movs	r3, #52	; 0x34
 8008dc8:	fb03 f301 	mul.w	r3, r3, r1
 8008dcc:	4413      	add	r3, r2
 8008dce:	3390      	adds	r3, #144	; 0x90
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dda:	4619      	mov	r1, r3
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	2334      	movs	r3, #52	; 0x34
 8008de0:	fb03 f301 	mul.w	r3, r3, r1
 8008de4:	4413      	add	r3, r2
 8008de6:	3391      	adds	r3, #145	; 0x91
 8008de8:	2200      	movs	r2, #0
 8008dea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008df2:	3301      	adds	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008dfc:	e0d3      	b.n	8008fa6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d10c      	bne.n	8008e1e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	2334      	movs	r3, #52	; 0x34
 8008e10:	fb03 f301 	mul.w	r3, r3, r1
 8008e14:	4413      	add	r3, r2
 8008e16:	3390      	adds	r3, #144	; 0x90
 8008e18:	2205      	movs	r2, #5
 8008e1a:	701a      	strb	r2, [r3, #0]
            break;
 8008e1c:	e0c3      	b.n	8008fa6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	f040 80c0 	bne.w	8008fa6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	2334      	movs	r3, #52	; 0x34
 8008e32:	fb03 f301 	mul.w	r3, r3, r1
 8008e36:	4413      	add	r3, r2
 8008e38:	3390      	adds	r3, #144	; 0x90
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e44:	4619      	mov	r1, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	2334      	movs	r3, #52	; 0x34
 8008e4a:	fb03 f301 	mul.w	r3, r3, r1
 8008e4e:	4413      	add	r3, r2
 8008e50:	3391      	adds	r3, #145	; 0x91
 8008e52:	2202      	movs	r2, #2
 8008e54:	701a      	strb	r2, [r3, #0]
            break;
 8008e56:	e0a6      	b.n	8008fa6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e5e:	b2d9      	uxtb	r1, r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e66:	461a      	mov	r2, r3
 8008e68:	2334      	movs	r3, #52	; 0x34
 8008e6a:	fb03 f302 	mul.w	r3, r3, r2
 8008e6e:	3398      	adds	r3, #152	; 0x98
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4413      	add	r3, r2
 8008e74:	3304      	adds	r3, #4
 8008e76:	461a      	mov	r2, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fe96 	bl	8009baa <USBH_MSC_SCSI_RequestSense>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d145      	bne.n	8008f14 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e8e:	4619      	mov	r1, r3
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	2334      	movs	r3, #52	; 0x34
 8008e94:	fb03 f301 	mul.w	r3, r3, r1
 8008e98:	4413      	add	r3, r2
 8008e9a:	339c      	adds	r3, #156	; 0x9c
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b06      	cmp	r3, #6
 8008ea0:	d00c      	beq.n	8008ebc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	2334      	movs	r3, #52	; 0x34
 8008eae:	fb03 f301 	mul.w	r3, r3, r1
 8008eb2:	4413      	add	r3, r2
 8008eb4:	339c      	adds	r3, #156	; 0x9c
 8008eb6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d117      	bne.n	8008eec <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d80c      	bhi.n	8008eec <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ed8:	4619      	mov	r1, r3
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	2334      	movs	r3, #52	; 0x34
 8008ede:	fb03 f301 	mul.w	r3, r3, r1
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3390      	adds	r3, #144	; 0x90
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	701a      	strb	r2, [r3, #0]
                  break;
 8008eea:	e05f      	b.n	8008fac <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	2334      	movs	r3, #52	; 0x34
 8008ef8:	fb03 f301 	mul.w	r3, r3, r1
 8008efc:	4413      	add	r3, r2
 8008efe:	3390      	adds	r3, #144	; 0x90
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d10c      	bne.n	8008f34 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f20:	4619      	mov	r1, r3
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	2334      	movs	r3, #52	; 0x34
 8008f26:	fb03 f301 	mul.w	r3, r3, r1
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3390      	adds	r3, #144	; 0x90
 8008f2e:	2208      	movs	r2, #8
 8008f30:	701a      	strb	r2, [r3, #0]
            break;
 8008f32:	e03a      	b.n	8008faa <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d137      	bne.n	8008faa <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f40:	4619      	mov	r1, r3
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	2334      	movs	r3, #52	; 0x34
 8008f46:	fb03 f301 	mul.w	r3, r3, r1
 8008f4a:	4413      	add	r3, r2
 8008f4c:	3390      	adds	r3, #144	; 0x90
 8008f4e:	2201      	movs	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	2334      	movs	r3, #52	; 0x34
 8008f5e:	fb03 f301 	mul.w	r3, r3, r1
 8008f62:	4413      	add	r3, r2
 8008f64:	3391      	adds	r3, #145	; 0x91
 8008f66:	2202      	movs	r2, #2
 8008f68:	701a      	strb	r2, [r3, #0]
            break;
 8008f6a:	e01e      	b.n	8008faa <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f72:	3301      	adds	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008f7c:	e016      	b.n	8008fac <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f92:	2102      	movs	r1, #2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
      break;
 8008f98:	e00c      	b.n	8008fb4 <USBH_MSC_Process+0x514>
            break;
 8008f9a:	bf00      	nop
 8008f9c:	e00a      	b.n	8008fb4 <USBH_MSC_Process+0x514>
            break;
 8008f9e:	bf00      	nop
 8008fa0:	e008      	b.n	8008fb4 <USBH_MSC_Process+0x514>
            break;
 8008fa2:	bf00      	nop
 8008fa4:	e006      	b.n	8008fb4 <USBH_MSC_Process+0x514>
            break;
 8008fa6:	bf00      	nop
 8008fa8:	e004      	b.n	8008fb4 <USBH_MSC_Process+0x514>
            break;
 8008faa:	bf00      	nop
      break;
 8008fac:	e002      	b.n	8008fb4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb2:	bf00      	nop
  }
  return error;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop

08008fc0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b088      	sub	sp, #32
 8008fda:	af02      	add	r7, sp, #8
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008fec:	2301      	movs	r3, #1
 8008fee:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	2134      	movs	r1, #52	; 0x34
 8008ffa:	fb01 f303 	mul.w	r3, r1, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	3390      	adds	r3, #144	; 0x90
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b07      	cmp	r3, #7
 8009006:	d03c      	beq.n	8009082 <USBH_MSC_RdWrProcess+0xac>
 8009008:	2b07      	cmp	r3, #7
 800900a:	f300 80a7 	bgt.w	800915c <USBH_MSC_RdWrProcess+0x186>
 800900e:	2b05      	cmp	r3, #5
 8009010:	d06c      	beq.n	80090ec <USBH_MSC_RdWrProcess+0x116>
 8009012:	2b06      	cmp	r3, #6
 8009014:	f040 80a2 	bne.w	800915c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009018:	78f9      	ldrb	r1, [r7, #3]
 800901a:	2300      	movs	r3, #0
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	2200      	movs	r2, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fea5 	bl	8009d72 <USBH_MSC_SCSI_Read>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10b      	bne.n	800904a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	2134      	movs	r1, #52	; 0x34
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	4413      	add	r3, r2
 800903e:	3390      	adds	r3, #144	; 0x90
 8009040:	2201      	movs	r2, #1
 8009042:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009048:	e08a      	b.n	8009160 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d109      	bne.n	8009064 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	2134      	movs	r1, #52	; 0x34
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	4413      	add	r3, r2
 800905c:	3390      	adds	r3, #144	; 0x90
 800905e:	2205      	movs	r2, #5
 8009060:	701a      	strb	r2, [r3, #0]
      break;
 8009062:	e07d      	b.n	8009160 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	2b04      	cmp	r3, #4
 8009068:	d17a      	bne.n	8009160 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	2134      	movs	r1, #52	; 0x34
 8009070:	fb01 f303 	mul.w	r3, r1, r3
 8009074:	4413      	add	r3, r2
 8009076:	3390      	adds	r3, #144	; 0x90
 8009078:	2208      	movs	r2, #8
 800907a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800907c:	2302      	movs	r3, #2
 800907e:	75fb      	strb	r3, [r7, #23]
      break;
 8009080:	e06e      	b.n	8009160 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009082:	78f9      	ldrb	r1, [r7, #3]
 8009084:	2300      	movs	r3, #0
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2300      	movs	r3, #0
 800908a:	2200      	movs	r2, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fe05 	bl	8009c9c <USBH_MSC_SCSI_Write>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10b      	bne.n	80090b4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800909c:	78fb      	ldrb	r3, [r7, #3]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	2134      	movs	r1, #52	; 0x34
 80090a2:	fb01 f303 	mul.w	r3, r1, r3
 80090a6:	4413      	add	r3, r2
 80090a8:	3390      	adds	r3, #144	; 0x90
 80090aa:	2201      	movs	r2, #1
 80090ac:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090b2:	e057      	b.n	8009164 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d109      	bne.n	80090ce <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	2134      	movs	r1, #52	; 0x34
 80090c0:	fb01 f303 	mul.w	r3, r1, r3
 80090c4:	4413      	add	r3, r2
 80090c6:	3390      	adds	r3, #144	; 0x90
 80090c8:	2205      	movs	r2, #5
 80090ca:	701a      	strb	r2, [r3, #0]
      break;
 80090cc:	e04a      	b.n	8009164 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d147      	bne.n	8009164 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	2134      	movs	r1, #52	; 0x34
 80090da:	fb01 f303 	mul.w	r3, r1, r3
 80090de:	4413      	add	r3, r2
 80090e0:	3390      	adds	r3, #144	; 0x90
 80090e2:	2208      	movs	r2, #8
 80090e4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80090e6:	2302      	movs	r3, #2
 80090e8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ea:	e03b      	b.n	8009164 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	2234      	movs	r2, #52	; 0x34
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	3398      	adds	r3, #152	; 0x98
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4413      	add	r3, r2
 80090fa:	1d1a      	adds	r2, r3, #4
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fd52 	bl	8009baa <USBH_MSC_SCSI_RequestSense>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d113      	bne.n	8009138 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	2134      	movs	r1, #52	; 0x34
 8009116:	fb01 f303 	mul.w	r3, r1, r3
 800911a:	4413      	add	r3, r2
 800911c:	3390      	adds	r3, #144	; 0x90
 800911e:	2201      	movs	r2, #1
 8009120:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	2134      	movs	r1, #52	; 0x34
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	4413      	add	r3, r2
 800912e:	3391      	adds	r3, #145	; 0x91
 8009130:	2202      	movs	r2, #2
 8009132:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009134:	2302      	movs	r3, #2
 8009136:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d014      	beq.n	8009168 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	2b04      	cmp	r3, #4
 8009142:	d111      	bne.n	8009168 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	2134      	movs	r1, #52	; 0x34
 800914a:	fb01 f303 	mul.w	r3, r1, r3
 800914e:	4413      	add	r3, r2
 8009150:	3390      	adds	r3, #144	; 0x90
 8009152:	2208      	movs	r2, #8
 8009154:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009156:	2302      	movs	r3, #2
 8009158:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800915a:	e005      	b.n	8009168 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800915c:	bf00      	nop
 800915e:	e004      	b.n	800916a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009160:	bf00      	nop
 8009162:	e002      	b.n	800916a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009164:	bf00      	nop
 8009166:	e000      	b.n	800916a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009168:	bf00      	nop

  }
  return error;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b0b      	cmp	r3, #11
 8009192:	d10c      	bne.n	80091ae <USBH_MSC_UnitIsReady+0x3a>
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	2134      	movs	r1, #52	; 0x34
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	3391      	adds	r3, #145	; 0x91
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d102      	bne.n	80091ae <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80091a8:	2301      	movs	r3, #1
 80091aa:	73fb      	strb	r3, [r7, #15]
 80091ac:	e001      	b.n	80091b2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	460b      	mov	r3, r1
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b0b      	cmp	r3, #11
 80091e0:	d10d      	bne.n	80091fe <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	2234      	movs	r2, #52	; 0x34
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
 80091ea:	3390      	adds	r3, #144	; 0x90
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4413      	add	r3, r2
 80091f0:	2234      	movs	r2, #52	; 0x34
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f005 f9a5 	bl	800e544 <memcpy>
    return USBH_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e000      	b.n	8009200 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80091fe:	2302      	movs	r3, #2
  }
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af02      	add	r7, sp, #8
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	460b      	mov	r3, r1
 8009216:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00e      	beq.n	800924c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009234:	2b0b      	cmp	r3, #11
 8009236:	d109      	bne.n	800924c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	2134      	movs	r1, #52	; 0x34
 800923e:	fb01 f303 	mul.w	r3, r1, r3
 8009242:	4413      	add	r3, r2
 8009244:	3390      	adds	r3, #144	; 0x90
 8009246:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009248:	2b01      	cmp	r3, #1
 800924a:	d001      	beq.n	8009250 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800924c:	2302      	movs	r3, #2
 800924e:	e040      	b.n	80092d2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2206      	movs	r2, #6
 8009254:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	2134      	movs	r1, #52	; 0x34
 800925c:	fb01 f303 	mul.w	r3, r1, r3
 8009260:	4413      	add	r3, r2
 8009262:	3390      	adds	r3, #144	; 0x90
 8009264:	2206      	movs	r2, #6
 8009266:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	b29a      	uxth	r2, r3
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009272:	7af9      	ldrb	r1, [r7, #11]
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fd78 	bl	8009d72 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009288:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800928a:	e016      	b.n	80092ba <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	f242 7110 	movw	r1, #10000	; 0x2710
 800929c:	fb01 f303 	mul.w	r3, r1, r3
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d805      	bhi.n	80092b0 <USBH_MSC_Read+0xa8>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2201      	movs	r2, #1
 80092b4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80092b6:	2302      	movs	r3, #2
 80092b8:	e00b      	b.n	80092d2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	4619      	mov	r1, r3
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f7ff fe89 	bl	8008fd6 <USBH_MSC_RdWrProcess>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d0e0      	beq.n	800928c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2201      	movs	r2, #1
 80092ce:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b088      	sub	sp, #32
 80092de:	af02      	add	r7, sp, #8
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	460b      	mov	r3, r1
 80092e8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00e      	beq.n	800931e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009306:	2b0b      	cmp	r3, #11
 8009308:	d109      	bne.n	800931e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	2134      	movs	r1, #52	; 0x34
 8009310:	fb01 f303 	mul.w	r3, r1, r3
 8009314:	4413      	add	r3, r2
 8009316:	3390      	adds	r3, #144	; 0x90
 8009318:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800931a:	2b01      	cmp	r3, #1
 800931c:	d001      	beq.n	8009322 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800931e:	2302      	movs	r3, #2
 8009320:	e040      	b.n	80093a4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2207      	movs	r2, #7
 8009326:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	2134      	movs	r1, #52	; 0x34
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	4413      	add	r3, r2
 8009334:	3390      	adds	r3, #144	; 0x90
 8009336:	2207      	movs	r2, #7
 8009338:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	b29a      	uxth	r2, r3
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009344:	7af9      	ldrb	r1, [r7, #11]
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fca4 	bl	8009c9c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800935a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800935c:	e016      	b.n	800938c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f242 7110 	movw	r1, #10000	; 0x2710
 800936e:	fb01 f303 	mul.w	r3, r1, r3
 8009372:	429a      	cmp	r2, r3
 8009374:	d805      	bhi.n	8009382 <USBH_MSC_Write+0xa8>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d104      	bne.n	800938c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2201      	movs	r2, #1
 8009386:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009388:	2302      	movs	r3, #2
 800938a:	e00b      	b.n	80093a4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	4619      	mov	r1, r3
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff fe20 	bl	8008fd6 <USBH_MSC_RdWrProcess>
 8009396:	4603      	mov	r3, r0
 8009398:	2b01      	cmp	r3, #1
 800939a:	d0e0      	beq.n	800935e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2201      	movs	r2, #1
 80093a0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2221      	movs	r2, #33	; 0x21
 80093b8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80093d2:	2200      	movs	r2, #0
 80093d4:	2100      	movs	r1, #0
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fdab 	bl	800af32 <USBH_CtlReq>
 80093dc:	4603      	mov	r3, r0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	22a1      	movs	r2, #161	; 0xa1
 80093f4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	22fe      	movs	r2, #254	; 0xfe
 80093fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800940e:	2201      	movs	r2, #1
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 fd8d 	bl	800af32 <USBH_CtlReq>
 8009418:	4603      	mov	r3, r0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4a09      	ldr	r2, [pc, #36]	; (8009460 <USBH_MSC_BOT_Init+0x3c>)
 800943a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a09      	ldr	r2, [pc, #36]	; (8009464 <USBH_MSC_BOT_Init+0x40>)
 8009440:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	43425355 	.word	0x43425355
 8009464:	20304050 	.word	0x20304050

08009468 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af02      	add	r7, sp, #8
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009474:	2301      	movs	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009478:	2301      	movs	r3, #1
 800947a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800947c:	2301      	movs	r3, #1
 800947e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009480:	2300      	movs	r3, #0
 8009482:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009498:	3b01      	subs	r3, #1
 800949a:	2b0a      	cmp	r3, #10
 800949c:	f200 819e 	bhi.w	80097dc <USBH_MSC_BOT_Process+0x374>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <USBH_MSC_BOT_Process+0x40>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	080094d5 	.word	0x080094d5
 80094ac:	080094fd 	.word	0x080094fd
 80094b0:	08009567 	.word	0x08009567
 80094b4:	08009585 	.word	0x08009585
 80094b8:	08009609 	.word	0x08009609
 80094bc:	0800962b 	.word	0x0800962b
 80094c0:	080096c3 	.word	0x080096c3
 80094c4:	080096df 	.word	0x080096df
 80094c8:	08009731 	.word	0x08009731
 80094cc:	08009761 	.word	0x08009761
 80094d0:	080097c3 	.word	0x080097c3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	795b      	ldrb	r3, [r3, #5]
 80094ee:	2201      	movs	r2, #1
 80094f0:	9200      	str	r2, [sp, #0]
 80094f2:	221f      	movs	r2, #31
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 ff2a 	bl	800b34e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80094fa:	e17e      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	795b      	ldrb	r3, [r3, #5]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f004 fee6 	bl	800e2d4 <USBH_LL_GetURBState>
 8009508:	4603      	mov	r3, r0
 800950a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800950c:	7d3b      	ldrb	r3, [r7, #20]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d118      	bne.n	8009544 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00f      	beq.n	800953a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009520:	b25b      	sxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	da04      	bge.n	8009530 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2203      	movs	r2, #3
 800952a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800952e:	e157      	b.n	80097e0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2205      	movs	r2, #5
 8009534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009538:	e152      	b.n	80097e0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2207      	movs	r2, #7
 800953e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009542:	e14d      	b.n	80097e0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009544:	7d3b      	ldrb	r3, [r7, #20]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d104      	bne.n	8009554 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009552:	e145      	b.n	80097e0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009554:	7d3b      	ldrb	r3, [r7, #20]
 8009556:	2b05      	cmp	r3, #5
 8009558:	f040 8142 	bne.w	80097e0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	220a      	movs	r2, #10
 8009560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009564:	e13c      	b.n	80097e0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	895a      	ldrh	r2, [r3, #10]
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	791b      	ldrb	r3, [r3, #4]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 ff0f 	bl	800b398 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2204      	movs	r2, #4
 800957e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009582:	e13a      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	791b      	ldrb	r3, [r3, #4]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f004 fea2 	bl	800e2d4 <USBH_LL_GetURBState>
 8009590:	4603      	mov	r3, r0
 8009592:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009594:	7d3b      	ldrb	r3, [r7, #20]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d12d      	bne.n	80095f6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	8952      	ldrh	r2, [r2, #10]
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d910      	bls.n	80095c8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	8952      	ldrh	r2, [r2, #10]
 80095b0:	441a      	add	r2, r3
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	8952      	ldrh	r2, [r2, #10]
 80095c0:	1a9a      	subs	r2, r3, r2
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80095c6:	e002      	b.n	80095ce <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	2200      	movs	r2, #0
 80095cc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	895a      	ldrh	r2, [r3, #10]
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	791b      	ldrb	r3, [r3, #4]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 fed7 	bl	800b398 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80095ea:	e0fb      	b.n	80097e4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2207      	movs	r2, #7
 80095f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095f4:	e0f6      	b.n	80097e4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80095f6:	7d3b      	ldrb	r3, [r7, #20]
 80095f8:	2b05      	cmp	r3, #5
 80095fa:	f040 80f3 	bne.w	80097e4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2209      	movs	r2, #9
 8009602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009606:	e0ed      	b.n	80097e4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	891a      	ldrh	r2, [r3, #8]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	795b      	ldrb	r3, [r3, #5]
 8009616:	2001      	movs	r0, #1
 8009618:	9000      	str	r0, [sp, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fe97 	bl	800b34e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2206      	movs	r2, #6
 8009624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009628:	e0e7      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	795b      	ldrb	r3, [r3, #5]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f004 fe4f 	bl	800e2d4 <USBH_LL_GetURBState>
 8009636:	4603      	mov	r3, r0
 8009638:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800963a:	7d3b      	ldrb	r3, [r7, #20]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d12f      	bne.n	80096a0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	8912      	ldrh	r2, [r2, #8]
 8009648:	4293      	cmp	r3, r2
 800964a:	d910      	bls.n	800966e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	8912      	ldrh	r2, [r2, #8]
 8009656:	441a      	add	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	8912      	ldrh	r2, [r2, #8]
 8009666:	1a9a      	subs	r2, r3, r2
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	65da      	str	r2, [r3, #92]	; 0x5c
 800966c:	e002      	b.n	8009674 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2200      	movs	r2, #0
 8009672:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00c      	beq.n	8009696 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	891a      	ldrh	r2, [r3, #8]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	795b      	ldrb	r3, [r3, #5]
 800968a:	2001      	movs	r0, #1
 800968c:	9000      	str	r0, [sp, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 fe5d 	bl	800b34e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009694:	e0a8      	b.n	80097e8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2207      	movs	r2, #7
 800969a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800969e:	e0a3      	b.n	80097e8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096a0:	7d3b      	ldrb	r3, [r7, #20]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d104      	bne.n	80096b0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2205      	movs	r2, #5
 80096aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096ae:	e09b      	b.n	80097e8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80096b0:	7d3b      	ldrb	r3, [r7, #20]
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	f040 8098 	bne.w	80097e8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	220a      	movs	r2, #10
 80096bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096c0:	e092      	b.n	80097e8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	791b      	ldrb	r3, [r3, #4]
 80096cc:	220d      	movs	r2, #13
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fe62 	bl	800b398 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	2208      	movs	r2, #8
 80096d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096dc:	e08d      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	791b      	ldrb	r3, [r3, #4]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f004 fdf5 	bl	800e2d4 <USBH_LL_GetURBState>
 80096ea:	4603      	mov	r3, r0
 80096ec:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80096ee:	7d3b      	ldrb	r3, [r7, #20]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d115      	bne.n	8009720 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f8a9 	bl	800985c <USBH_MSC_DecodeCSW>
 800970a:	4603      	mov	r3, r0
 800970c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800970e:	7d7b      	ldrb	r3, [r7, #21]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d102      	bne.n	800971a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009718:	e068      	b.n	80097ec <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	75fb      	strb	r3, [r7, #23]
      break;
 800971e:	e065      	b.n	80097ec <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009720:	7d3b      	ldrb	r3, [r7, #20]
 8009722:	2b05      	cmp	r3, #5
 8009724:	d162      	bne.n	80097ec <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2209      	movs	r2, #9
 800972a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800972e:	e05d      	b.n	80097ec <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	2200      	movs	r2, #0
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f864 	bl	8009804 <USBH_MSC_BOT_Abort>
 800973c:	4603      	mov	r3, r0
 800973e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009740:	7dbb      	ldrb	r3, [r7, #22]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d104      	bne.n	8009750 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2207      	movs	r2, #7
 800974a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800974e:	e04f      	b.n	80097f0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009750:	7dbb      	ldrb	r3, [r7, #22]
 8009752:	2b04      	cmp	r3, #4
 8009754:	d14c      	bne.n	80097f0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	220b      	movs	r2, #11
 800975a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800975e:	e047      	b.n	80097f0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f84c 	bl	8009804 <USBH_MSC_BOT_Abort>
 800976c:	4603      	mov	r3, r0
 800976e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009770:	7dbb      	ldrb	r3, [r7, #22]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11d      	bne.n	80097b2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	795b      	ldrb	r3, [r3, #5]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f004 fe03 	bl	800e388 <USBH_LL_GetToggle>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	7959      	ldrb	r1, [r3, #5]
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	f1c3 0301 	rsb	r3, r3, #1
 8009790:	b2db      	uxtb	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f004 fdc7 	bl	800e328 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	791b      	ldrb	r3, [r3, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f004 fdc0 	bl	800e328 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2209      	movs	r2, #9
 80097ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80097b0:	e020      	b.n	80097f4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80097b2:	7dbb      	ldrb	r3, [r7, #22]
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d11d      	bne.n	80097f4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	220b      	movs	r2, #11
 80097bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097c0:	e018      	b.n	80097f4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fdf2 	bl	80093ac <USBH_MSC_BOT_REQ_Reset>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d112      	bne.n	80097f8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80097da:	e00d      	b.n	80097f8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80097dc:	bf00      	nop
 80097de:	e00c      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097e0:	bf00      	nop
 80097e2:	e00a      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097e4:	bf00      	nop
 80097e6:	e008      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097e8:	bf00      	nop
 80097ea:	e006      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097ec:	bf00      	nop
 80097ee:	e004      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097f0:	bf00      	nop
 80097f2:	e002      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097f4:	bf00      	nop
 80097f6:	e000      	b.n	80097fa <USBH_MSC_BOT_Process+0x392>
      break;
 80097f8:	bf00      	nop
  }
  return status;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
 8009810:	4613      	mov	r3, r2
 8009812:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009814:	2302      	movs	r3, #2
 8009816:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009822:	78bb      	ldrb	r3, [r7, #2]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <USBH_MSC_BOT_Abort+0x2a>
 8009828:	2b01      	cmp	r3, #1
 800982a:	d009      	beq.n	8009840 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800982c:	e011      	b.n	8009852 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	79db      	ldrb	r3, [r3, #7]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 f99c 	bl	800ab72 <USBH_ClrFeature>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]
      break;
 800983e:	e008      	b.n	8009852 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	799b      	ldrb	r3, [r3, #6]
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 f993 	bl	800ab72 <USBH_ClrFeature>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
      break;
 8009850:	bf00      	nop
  }
  return status;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800986e:	2301      	movs	r3, #1
 8009870:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	791b      	ldrb	r3, [r3, #4]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f004 fc99 	bl	800e1b0 <USBH_LL_GetLastXferSize>
 800987e:	4603      	mov	r3, r0
 8009880:	2b0d      	cmp	r3, #13
 8009882:	d002      	beq.n	800988a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009884:	2302      	movs	r3, #2
 8009886:	73fb      	strb	r3, [r7, #15]
 8009888:	e024      	b.n	80098d4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800988e:	4a14      	ldr	r2, [pc, #80]	; (80098e0 <USBH_MSC_DecodeCSW+0x84>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d11d      	bne.n	80098d0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989c:	429a      	cmp	r2, r3
 800989e:	d119      	bne.n	80098d4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
 80098ae:	e011      	b.n	80098d4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d102      	bne.n	80098c0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80098ba:	2301      	movs	r3, #1
 80098bc:	73fb      	strb	r3, [r7, #15]
 80098be:	e009      	b.n	80098d4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d104      	bne.n	80098d4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80098ca:	2302      	movs	r3, #2
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	e001      	b.n	80098d4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80098d0:	2302      	movs	r3, #2
 80098d2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	53425355 	.word	0x53425355

080098e4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80098f0:	2302      	movs	r3, #2
 80098f2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009904:	2b01      	cmp	r3, #1
 8009906:	d002      	beq.n	800990e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009908:	2b02      	cmp	r3, #2
 800990a:	d021      	beq.n	8009950 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800990c:	e028      	b.n	8009960 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2200      	movs	r2, #0
 8009912:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	220a      	movs	r2, #10
 8009920:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	3363      	adds	r3, #99	; 0x63
 8009928:	2210      	movs	r2, #16
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f004 fe17 	bl	800e560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800994a:	2301      	movs	r3, #1
 800994c:	73fb      	strb	r3, [r7, #15]
      break;
 800994e:	e007      	b.n	8009960 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff fd87 	bl	8009468 <USBH_MSC_BOT_Process>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
      break;
 800995e:	bf00      	nop
  }

  return error;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	460b      	mov	r3, r1
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800998c:	2b01      	cmp	r3, #1
 800998e:	d002      	beq.n	8009996 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009990:	2b02      	cmp	r3, #2
 8009992:	d027      	beq.n	80099e4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009994:	e05f      	b.n	8009a56 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2208      	movs	r2, #8
 800999a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	2280      	movs	r2, #128	; 0x80
 80099a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	220a      	movs	r2, #10
 80099a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	3363      	adds	r3, #99	; 0x63
 80099b0:	2210      	movs	r2, #16
 80099b2:	2100      	movs	r1, #0
 80099b4:	4618      	mov	r0, r3
 80099b6:	f004 fdd3 	bl	800e560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2225      	movs	r2, #37	; 0x25
 80099be:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2202      	movs	r2, #2
 80099ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f103 0210 	add.w	r2, r3, #16
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80099de:	2301      	movs	r3, #1
 80099e0:	75fb      	strb	r3, [r7, #23]
      break;
 80099e2:	e038      	b.n	8009a56 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	4619      	mov	r1, r3
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff fd3d 	bl	8009468 <USBH_MSC_BOT_Process>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d12d      	bne.n	8009a54 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fe:	3303      	adds	r3, #3
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	021b      	lsls	r3, r3, #8
 8009a10:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a18:	3301      	adds	r3, #1
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009a1e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	061b      	lsls	r3, r3, #24
 8009a2a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a36:	3307      	adds	r3, #7
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a42:	3306      	adds	r3, #6
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	809a      	strh	r2, [r3, #4]
      break;
 8009a54:	bf00      	nop
  }

  return error;
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d002      	beq.n	8009a8c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d03d      	beq.n	8009b06 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009a8a:	e089      	b.n	8009ba0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2224      	movs	r2, #36	; 0x24
 8009a90:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2280      	movs	r2, #128	; 0x80
 8009a96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3363      	adds	r3, #99	; 0x63
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f004 fd58 	bl	800e560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2212      	movs	r2, #18
 8009ab4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	015b      	lsls	r3, r3, #5
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	2224      	movs	r2, #36	; 0x24
 8009ad8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f103 0210 	add.w	r2, r3, #16
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b00:	2301      	movs	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
      break;
 8009b04:	e04c      	b.n	8009ba0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7ff fcac 	bl	8009468 <USBH_MSC_BOT_Process>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d141      	bne.n	8009b9e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009b1a:	2222      	movs	r2, #34	; 0x22
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f004 fd1e 	bl	800e560 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	f003 031f 	and.w	r3, r3, #31
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	b25b      	sxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	da03      	bge.n	8009b5e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	709a      	strb	r2, [r3, #2]
 8009b5c:	e002      	b.n	8009b64 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	1cd8      	adds	r0, r3, #3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6e:	3308      	adds	r3, #8
 8009b70:	2208      	movs	r2, #8
 8009b72:	4619      	mov	r1, r3
 8009b74:	f004 fce6 	bl	800e544 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f103 000c 	add.w	r0, r3, #12
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b84:	3310      	adds	r3, #16
 8009b86:	2210      	movs	r2, #16
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f004 fcdb 	bl	800e544 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	331d      	adds	r3, #29
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009b98:	3220      	adds	r2, #32
 8009b9a:	6812      	ldr	r2, [r2, #0]
 8009b9c:	601a      	str	r2, [r3, #0]
      break;
 8009b9e:	bf00      	nop
  }

  return error;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b086      	sub	sp, #24
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d002      	beq.n	8009bd6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d03d      	beq.n	8009c50 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009bd4:	e05d      	b.n	8009c92 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	220e      	movs	r2, #14
 8009bda:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	2280      	movs	r2, #128	; 0x80
 8009be0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	220a      	movs	r2, #10
 8009be8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3363      	adds	r3, #99	; 0x63
 8009bf0:	2210      	movs	r2, #16
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f004 fcb3 	bl	800e560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2203      	movs	r2, #3
 8009bfe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009c02:	7afb      	ldrb	r3, [r7, #11]
 8009c04:	015b      	lsls	r3, r3, #5
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	220e      	movs	r2, #14
 8009c22:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f103 0210 	add.w	r2, r3, #16
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4e:	e020      	b.n	8009c92 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c50:	7afb      	ldrb	r3, [r7, #11]
 8009c52:	4619      	mov	r1, r3
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f7ff fc07 	bl	8009468 <USBH_MSC_BOT_Process>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d115      	bne.n	8009c90 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c7e:	7b1a      	ldrb	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c8a:	7b5a      	ldrb	r2, [r3, #13]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	709a      	strb	r2, [r3, #2]
      break;
 8009c90:	bf00      	nop
  }

  return error;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009cac:	2302      	movs	r3, #2
 8009cae:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d002      	beq.n	8009cca <USBH_MSC_SCSI_Write+0x2e>
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d047      	beq.n	8009d58 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009cc8:	e04e      	b.n	8009d68 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	fb03 f202 	mul.w	r2, r3, r2
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	220a      	movs	r2, #10
 8009ce8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	3363      	adds	r3, #99	; 0x63
 8009cf0:	2210      	movs	r2, #16
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f004 fc33 	bl	800e560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	222a      	movs	r2, #42	; 0x2a
 8009cfe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009d02:	79fa      	ldrb	r2, [r7, #7]
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009d0a:	79ba      	ldrb	r2, [r7, #6]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009d12:	797a      	ldrb	r2, [r7, #5]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009d1a:	1d3b      	adds	r3, r7, #4
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009d24:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009d2e:	f107 0320 	add.w	r3, r7, #32
 8009d32:	781a      	ldrb	r2, [r3, #0]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2202      	movs	r2, #2
 8009d46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
      break;
 8009d56:	e007      	b.n	8009d68 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fb83 	bl	8009468 <USBH_MSC_BOT_Process>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
      break;
 8009d66:	bf00      	nop
  }

  return error;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b086      	sub	sp, #24
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	603b      	str	r3, [r7, #0]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d82:	2302      	movs	r3, #2
 8009d84:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d002      	beq.n	8009da0 <USBH_MSC_SCSI_Read+0x2e>
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d047      	beq.n	8009e2e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009d9e:	e04e      	b.n	8009e3e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009da6:	461a      	mov	r2, r3
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	fb03 f202 	mul.w	r2, r3, r2
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2280      	movs	r2, #128	; 0x80
 8009db6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	3363      	adds	r3, #99	; 0x63
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	2100      	movs	r1, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f004 fbc8 	bl	800e560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2228      	movs	r2, #40	; 0x28
 8009dd4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009dd8:	79fa      	ldrb	r2, [r7, #7]
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009de0:	79ba      	ldrb	r2, [r7, #6]
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009de8:	797a      	ldrb	r2, [r7, #5]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009df0:	1d3b      	adds	r3, r7, #4
 8009df2:	781a      	ldrb	r2, [r3, #0]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009dfa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009e04:	f107 0320 	add.w	r3, r7, #32
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e2c:	e007      	b.n	8009e3e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	4619      	mov	r1, r3
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7ff fb18 	bl	8009468 <USBH_MSC_BOT_Process>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3c:	bf00      	nop
  }

  return error;
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e029      	b.n	8009eb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	79fa      	ldrb	r2, [r7, #7]
 8009e64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f81f 	bl	8009ebc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f004 f8cb 	bl	800e048 <USBH_LL_Init>

  return USBH_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e009      	b.n	8009ee2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	33e0      	adds	r3, #224	; 0xe0
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	2200      	movs	r2, #0
 8009eda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b0e      	cmp	r3, #14
 8009ee6:	d9f2      	bls.n	8009ece <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	e009      	b.n	8009f02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ef8:	2200      	movs	r2, #0
 8009efa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	3301      	adds	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f08:	d3f1      	bcc.n	8009eee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2240      	movs	r2, #64	; 0x40
 8009f2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d016      	beq.n	8009fa6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10e      	bne.n	8009fa0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f88:	1c59      	adds	r1, r3, #1
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	33de      	adds	r3, #222	; 0xde
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]
 8009f9e:	e004      	b.n	8009faa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	73fb      	strb	r3, [r7, #15]
 8009fa4:	e001      	b.n	8009faa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d204      	bcs.n	8009fde <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009fdc:	e001      	b.n	8009fe2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	4603      	mov	r3, r0
 800a000:	70fb      	strb	r3, [r7, #3]
 800a002:	460b      	mov	r3, r1
 800a004:	70bb      	strb	r3, [r7, #2]
 800a006:	4613      	mov	r3, r2
 800a008:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a00e:	2300      	movs	r3, #0
 800a010:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a018:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a01a:	e025      	b.n	800a068 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	221a      	movs	r2, #26
 800a020:	fb02 f303 	mul.w	r3, r2, r3
 800a024:	3308      	adds	r3, #8
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	3302      	adds	r3, #2
 800a02c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	795b      	ldrb	r3, [r3, #5]
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	429a      	cmp	r2, r3
 800a036:	d002      	beq.n	800a03e <USBH_FindInterface+0x4e>
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	2bff      	cmp	r3, #255	; 0xff
 800a03c:	d111      	bne.n	800a062 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a042:	78ba      	ldrb	r2, [r7, #2]
 800a044:	429a      	cmp	r2, r3
 800a046:	d002      	beq.n	800a04e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a048:	78bb      	ldrb	r3, [r7, #2]
 800a04a:	2bff      	cmp	r3, #255	; 0xff
 800a04c:	d109      	bne.n	800a062 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a052:	787a      	ldrb	r2, [r7, #1]
 800a054:	429a      	cmp	r2, r3
 800a056:	d002      	beq.n	800a05e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a058:	787b      	ldrb	r3, [r7, #1]
 800a05a:	2bff      	cmp	r3, #255	; 0xff
 800a05c:	d101      	bne.n	800a062 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	e006      	b.n	800a070 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	3301      	adds	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d9d6      	bls.n	800a01c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a06e:	23ff      	movs	r3, #255	; 0xff
}
 800a070:	4618      	mov	r0, r3
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f004 f81b 	bl	800e0c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a08a:	2101      	movs	r1, #1
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f004 f934 	bl	800e2fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af04      	add	r7, sp, #16
 800a0a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d102      	bne.n	800a0be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b0b      	cmp	r3, #11
 800a0c6:	f200 81b3 	bhi.w	800a430 <USBH_Process+0x394>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <USBH_Process+0x34>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a133 	.word	0x0800a133
 800a0d8:	0800a19b 	.word	0x0800a19b
 800a0dc:	0800a3cb 	.word	0x0800a3cb
 800a0e0:	0800a431 	.word	0x0800a431
 800a0e4:	0800a23f 	.word	0x0800a23f
 800a0e8:	0800a371 	.word	0x0800a371
 800a0ec:	0800a275 	.word	0x0800a275
 800a0f0:	0800a295 	.word	0x0800a295
 800a0f4:	0800a2b5 	.word	0x0800a2b5
 800a0f8:	0800a2e3 	.word	0x0800a2e3
 800a0fc:	0800a3b3 	.word	0x0800a3b3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8193 	beq.w	800a434 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a114:	20c8      	movs	r0, #200	; 0xc8
 800a116:	f004 f967 	bl	800e3e8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f004 f82d 	bl	800e17a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a130:	e180      	b.n	800a434 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d107      	bne.n	800a14c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a14a:	e182      	b.n	800a452 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a156:	d914      	bls.n	800a182 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a15e:	3301      	adds	r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d903      	bls.n	800a17a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	220d      	movs	r2, #13
 800a176:	701a      	strb	r2, [r3, #0]
      break;
 800a178:	e16b      	b.n	800a452 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
      break;
 800a180:	e167      	b.n	800a452 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a188:	f103 020a 	add.w	r2, r3, #10
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a192:	200a      	movs	r0, #10
 800a194:	f004 f928 	bl	800e3e8 <USBH_Delay>
      break;
 800a198:	e15b      	b.n	800a452 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1aa:	2104      	movs	r1, #4
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a1b0:	2064      	movs	r0, #100	; 0x64
 800a1b2:	f004 f919 	bl	800e3e8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f003 ffb8 	bl	800e12c <USBH_LL_GetSpeed>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2205      	movs	r2, #5
 800a1ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 f92f 	bl	800b432 <USBH_AllocPipe>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a1dc:	2180      	movs	r1, #128	; 0x80
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 f927 	bl	800b432 <USBH_AllocPipe>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7919      	ldrb	r1, [r3, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a200:	b292      	uxth	r2, r2
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	2200      	movs	r2, #0
 800a206:	9201      	str	r2, [sp, #4]
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	4603      	mov	r3, r0
 800a20c:	2280      	movs	r2, #128	; 0x80
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f8e0 	bl	800b3d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	7959      	ldrb	r1, [r3, #5]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a228:	b292      	uxth	r2, r2
 800a22a:	9202      	str	r2, [sp, #8]
 800a22c:	2200      	movs	r2, #0
 800a22e:	9201      	str	r2, [sp, #4]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4603      	mov	r3, r0
 800a234:	2200      	movs	r2, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 f8cc 	bl	800b3d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a23c:	e109      	b.n	800a452 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f90c 	bl	800a45c <USBH_HandleEnum>
 800a244:	4603      	mov	r3, r0
 800a246:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a248:	7bbb      	ldrb	r3, [r7, #14]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f040 80f3 	bne.w	800a438 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a260:	2b01      	cmp	r3, #1
 800a262:	d103      	bne.n	800a26c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2208      	movs	r2, #8
 800a268:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a26a:	e0e5      	b.n	800a438 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2207      	movs	r2, #7
 800a270:	701a      	strb	r2, [r3, #0]
      break;
 800a272:	e0e1      	b.n	800a438 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80de 	beq.w	800a43c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a286:	2101      	movs	r1, #1
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2208      	movs	r2, #8
 800a290:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a292:	e0d3      	b.n	800a43c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fc20 	bl	800aae4 <USBH_SetCfg>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f040 80ca 	bne.w	800a440 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2209      	movs	r2, #9
 800a2b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2b2:	e0c5      	b.n	800a440 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc30 	bl	800ab2a <USBH_SetFeature>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f040 80b9 	bne.w	800a444 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2d8:	e0b4      	b.n	800a444 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	220a      	movs	r2, #10
 800a2de:	701a      	strb	r2, [r3, #0]
      break;
 800a2e0:	e0b0      	b.n	800a444 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80ad 	beq.w	800a448 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
 800a2fa:	e016      	b.n	800a32a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a2fc:	7bfa      	ldrb	r2, [r7, #15]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	32de      	adds	r2, #222	; 0xde
 800a302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a306:	791a      	ldrb	r2, [r3, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a30e:	429a      	cmp	r2, r3
 800a310:	d108      	bne.n	800a324 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a312:	7bfa      	ldrb	r2, [r7, #15]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	32de      	adds	r2, #222	; 0xde
 800a318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a322:	e005      	b.n	800a330 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	3301      	adds	r3, #1
 800a328:	73fb      	strb	r3, [r7, #15]
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d0e5      	beq.n	800a2fc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d109      	bne.n	800a360 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2206      	movs	r2, #6
 800a350:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a358:	2103      	movs	r1, #3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a35e:	e073      	b.n	800a448 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	220d      	movs	r2, #13
 800a364:	701a      	strb	r2, [r3, #0]
      break;
 800a366:	e06f      	b.n	800a448 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	220d      	movs	r2, #13
 800a36c:	701a      	strb	r2, [r3, #0]
      break;
 800a36e:	e06b      	b.n	800a448 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a376:	2b00      	cmp	r3, #0
 800a378:	d017      	beq.n	800a3aa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
 800a386:	4603      	mov	r3, r0
 800a388:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a38a:	7bbb      	ldrb	r3, [r7, #14]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	220b      	movs	r2, #11
 800a396:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a398:	e058      	b.n	800a44c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d154      	bne.n	800a44c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	220d      	movs	r2, #13
 800a3a6:	701a      	strb	r2, [r3, #0]
      break;
 800a3a8:	e050      	b.n	800a44c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	220d      	movs	r2, #13
 800a3ae:	701a      	strb	r2, [r3, #0]
      break;
 800a3b0:	e04c      	b.n	800a44c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d049      	beq.n	800a450 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	4798      	blx	r3
      }
      break;
 800a3c8:	e042      	b.n	800a450 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff fd72 	bl	8009ebc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a406:	2105      	movs	r1, #5
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b01      	cmp	r3, #1
 800a416:	d107      	bne.n	800a428 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff fe2b 	bl	800a07c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a426:	e014      	b.n	800a452 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f003 fe49 	bl	800e0c0 <USBH_LL_Start>
      break;
 800a42e:	e010      	b.n	800a452 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a430:	bf00      	nop
 800a432:	e00e      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a434:	bf00      	nop
 800a436:	e00c      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a438:	bf00      	nop
 800a43a:	e00a      	b.n	800a452 <USBH_Process+0x3b6>
    break;
 800a43c:	bf00      	nop
 800a43e:	e008      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a440:	bf00      	nop
 800a442:	e006      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a444:	bf00      	nop
 800a446:	e004      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a448:	bf00      	nop
 800a44a:	e002      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a44c:	bf00      	nop
 800a44e:	e000      	b.n	800a452 <USBH_Process+0x3b6>
      break;
 800a450:	bf00      	nop
  }
  return USBH_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af04      	add	r7, sp, #16
 800a462:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a468:	2301      	movs	r3, #1
 800a46a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b07      	cmp	r3, #7
 800a472:	f200 81c1 	bhi.w	800a7f8 <USBH_HandleEnum+0x39c>
 800a476:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <USBH_HandleEnum+0x20>)
 800a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47c:	0800a49d 	.word	0x0800a49d
 800a480:	0800a55b 	.word	0x0800a55b
 800a484:	0800a5c5 	.word	0x0800a5c5
 800a488:	0800a653 	.word	0x0800a653
 800a48c:	0800a6bd 	.word	0x0800a6bd
 800a490:	0800a72d 	.word	0x0800a72d
 800a494:	0800a773 	.word	0x0800a773
 800a498:	0800a7b9 	.word	0x0800a7b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a49c:	2108      	movs	r1, #8
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fa50 	bl	800a944 <USBH_Get_DevDesc>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d130      	bne.n	800a510 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7919      	ldrb	r1, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a4d2:	b292      	uxth	r2, r2
 800a4d4:	9202      	str	r2, [sp, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	9201      	str	r2, [sp, #4]
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2280      	movs	r2, #128	; 0x80
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 ff77 	bl	800b3d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7959      	ldrb	r1, [r3, #5]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	9202      	str	r2, [sp, #8]
 800a4fe:	2200      	movs	r2, #0
 800a500:	9201      	str	r2, [sp, #4]
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	4603      	mov	r3, r0
 800a506:	2200      	movs	r2, #0
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 ff63 	bl	800b3d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a50e:	e175      	b.n	800a7fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	2b03      	cmp	r3, #3
 800a514:	f040 8172 	bne.w	800a7fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a51e:	3301      	adds	r3, #1
 800a520:	b2da      	uxtb	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d903      	bls.n	800a53a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	220d      	movs	r2, #13
 800a536:	701a      	strb	r2, [r3, #0]
      break;
 800a538:	e160      	b.n	800a7fc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	795b      	ldrb	r3, [r3, #5]
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 ff97 	bl	800b474 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	791b      	ldrb	r3, [r3, #4]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 ff91 	bl	800b474 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
      break;
 800a558:	e150      	b.n	800a7fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a55a:	2112      	movs	r1, #18
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f9f1 	bl	800a944 <USBH_Get_DevDesc>
 800a562:	4603      	mov	r3, r0
 800a564:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a572:	e145      	b.n	800a800 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a574:	7bbb      	ldrb	r3, [r7, #14]
 800a576:	2b03      	cmp	r3, #3
 800a578:	f040 8142 	bne.w	800a800 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a582:	3301      	adds	r3, #1
 800a584:	b2da      	uxtb	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a592:	2b03      	cmp	r3, #3
 800a594:	d903      	bls.n	800a59e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	220d      	movs	r2, #13
 800a59a:	701a      	strb	r2, [r3, #0]
      break;
 800a59c:	e130      	b.n	800a800 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	795b      	ldrb	r3, [r3, #5]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 ff65 	bl	800b474 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	791b      	ldrb	r3, [r3, #4]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 ff5f 	bl	800b474 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	701a      	strb	r2, [r3, #0]
      break;
 800a5c2:	e11d      	b.n	800a800 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa68 	bl	800aa9c <USBH_SetAddress>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d132      	bne.n	800a63c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a5d6:	2002      	movs	r0, #2
 800a5d8:	f003 ff06 	bl	800e3e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	7919      	ldrb	r1, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5fe:	b292      	uxth	r2, r2
 800a600:	9202      	str	r2, [sp, #8]
 800a602:	2200      	movs	r2, #0
 800a604:	9201      	str	r2, [sp, #4]
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	4603      	mov	r3, r0
 800a60a:	2280      	movs	r2, #128	; 0x80
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fee1 	bl	800b3d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	7959      	ldrb	r1, [r3, #5]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a626:	b292      	uxth	r2, r2
 800a628:	9202      	str	r2, [sp, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	4603      	mov	r3, r0
 800a632:	2200      	movs	r2, #0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fecd 	bl	800b3d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a63a:	e0e3      	b.n	800a804 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	2b03      	cmp	r3, #3
 800a640:	f040 80e0 	bne.w	800a804 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	220d      	movs	r2, #13
 800a648:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	705a      	strb	r2, [r3, #1]
      break;
 800a650:	e0d8      	b.n	800a804 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a652:	2109      	movs	r1, #9
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f99d 	bl	800a994 <USBH_Get_CfgDesc>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d103      	bne.n	800a66c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2204      	movs	r2, #4
 800a668:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a66a:	e0cd      	b.n	800a808 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	2b03      	cmp	r3, #3
 800a670:	f040 80ca 	bne.w	800a808 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a67a:	3301      	adds	r3, #1
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d903      	bls.n	800a696 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	220d      	movs	r2, #13
 800a692:	701a      	strb	r2, [r3, #0]
      break;
 800a694:	e0b8      	b.n	800a808 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	795b      	ldrb	r3, [r3, #5]
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fee9 	bl	800b474 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	791b      	ldrb	r3, [r3, #4]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fee3 	bl	800b474 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ba:	e0a5      	b.n	800a808 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f965 	bl	800a994 <USBH_Get_CfgDesc>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2205      	movs	r2, #5
 800a6d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6da:	e097      	b.n	800a80c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	f040 8094 	bne.w	800a80c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d903      	bls.n	800a706 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	220d      	movs	r2, #13
 800a702:	701a      	strb	r2, [r3, #0]
      break;
 800a704:	e082      	b.n	800a80c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	795b      	ldrb	r3, [r3, #5]
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 feb1 	bl	800b474 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	791b      	ldrb	r3, [r3, #4]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 feab 	bl	800b474 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
      break;
 800a72a:	e06f      	b.n	800a80c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a732:	2b00      	cmp	r3, #0
 800a734:	d019      	beq.n	800a76a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a742:	23ff      	movs	r3, #255	; 0xff
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f949 	bl	800a9dc <USBH_Get_StringDesc>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2206      	movs	r2, #6
 800a758:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a75a:	e059      	b.n	800a810 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d156      	bne.n	800a810 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2206      	movs	r2, #6
 800a766:	705a      	strb	r2, [r3, #1]
      break;
 800a768:	e052      	b.n	800a810 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2206      	movs	r2, #6
 800a76e:	705a      	strb	r2, [r3, #1]
      break;
 800a770:	e04e      	b.n	800a810 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d019      	beq.n	800a7b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a788:	23ff      	movs	r3, #255	; 0xff
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f926 	bl	800a9dc <USBH_Get_StringDesc>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d103      	bne.n	800a7a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2207      	movs	r2, #7
 800a79e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a7a0:	e038      	b.n	800a814 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d135      	bne.n	800a814 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2207      	movs	r2, #7
 800a7ac:	705a      	strb	r2, [r3, #1]
      break;
 800a7ae:	e031      	b.n	800a814 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2207      	movs	r2, #7
 800a7b4:	705a      	strb	r2, [r3, #1]
      break;
 800a7b6:	e02d      	b.n	800a814 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d017      	beq.n	800a7f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a7ce:	23ff      	movs	r3, #255	; 0xff
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f903 	bl	800a9dc <USBH_Get_StringDesc>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a7e4:	e018      	b.n	800a818 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d115      	bne.n	800a818 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f0:	e012      	b.n	800a818 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f6:	e00f      	b.n	800a818 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e00e      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a7fc:	bf00      	nop
 800a7fe:	e00c      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a800:	bf00      	nop
 800a802:	e00a      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a804:	bf00      	nop
 800a806:	e008      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a808:	bf00      	nop
 800a80a:	e006      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a80c:	bf00      	nop
 800a80e:	e004      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a810:	bf00      	nop
 800a812:	e002      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a814:	bf00      	nop
 800a816:	e000      	b.n	800a81a <USBH_HandleEnum+0x3be>
      break;
 800a818:	bf00      	nop
  }
  return Status;
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f804 	bl	800a866 <USBH_HandleSof>
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b0b      	cmp	r3, #11
 800a876:	d10a      	bne.n	800a88e <USBH_HandleSof+0x28>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
  }
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a8a6:	bf00      	nop
}
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a8c2:	bf00      	nop
}
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f003 fbea 	bl	800e0f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	791b      	ldrb	r3, [r3, #4]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fda3 	bl	800b474 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	795b      	ldrb	r3, [r3, #5]
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fd9d 	bl	800b474 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af02      	add	r7, sp, #8
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a956:	78fb      	ldrb	r3, [r7, #3]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4613      	mov	r3, r2
 800a95e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a962:	2100      	movs	r1, #0
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f864 	bl	800aa32 <USBH_GetDescriptor>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a980:	78fa      	ldrb	r2, [r7, #3]
 800a982:	b292      	uxth	r2, r2
 800a984:	4619      	mov	r1, r3
 800a986:	f000 f918 	bl	800abba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af02      	add	r7, sp, #8
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	331c      	adds	r3, #28
 800a9a4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a9a6:	887b      	ldrh	r3, [r7, #2]
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f83d 	bl	800aa32 <USBH_GetDescriptor>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	72fb      	strb	r3, [r7, #11]
 800a9bc:	7afb      	ldrb	r3, [r7, #11]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d107      	bne.n	800a9d2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a9c8:	887a      	ldrh	r2, [r7, #2]
 800a9ca:	68f9      	ldr	r1, [r7, #12]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 f964 	bl	800ac9a <USBH_ParseCfgDesc>
  }

  return status;
 800a9d2:	7afb      	ldrb	r3, [r7, #11]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	607a      	str	r2, [r7, #4]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	72fb      	strb	r3, [r7, #11]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a9f0:	7afb      	ldrb	r3, [r7, #11]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a9f8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aa00:	893b      	ldrh	r3, [r7, #8]
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	460b      	mov	r3, r1
 800aa06:	2100      	movs	r1, #0
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f812 	bl	800aa32 <USBH_GetDescriptor>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	75fb      	strb	r3, [r7, #23]
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d107      	bne.n	800aa28 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa1e:	893a      	ldrh	r2, [r7, #8]
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fa37 	bl	800ae96 <USBH_ParseStringDesc>
  }

  return status;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	607b      	str	r3, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	72fb      	strb	r3, [r7, #11]
 800aa40:	4613      	mov	r3, r2
 800aa42:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	789b      	ldrb	r3, [r3, #2]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d11c      	bne.n	800aa86 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aa4c:	7afb      	ldrb	r3, [r7, #11]
 800aa4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2206      	movs	r2, #6
 800aa5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	893a      	ldrh	r2, [r7, #8]
 800aa62:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aa64:	893b      	ldrh	r3, [r7, #8]
 800aa66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa6e:	d104      	bne.n	800aa7a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f240 4209 	movw	r2, #1033	; 0x409
 800aa76:	829a      	strh	r2, [r3, #20]
 800aa78:	e002      	b.n	800aa80 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8b3a      	ldrh	r2, [r7, #24]
 800aa84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa86:	8b3b      	ldrh	r3, [r7, #24]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 fa50 	bl	800af32 <USBH_CtlReq>
 800aa92:	4603      	mov	r3, r0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	789b      	ldrb	r3, [r3, #2]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d10f      	bne.n	800aad0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2205      	movs	r2, #5
 800aaba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aad0:	2200      	movs	r2, #0
 800aad2:	2100      	movs	r1, #0
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fa2c 	bl	800af32 <USBH_CtlReq>
 800aada:	4603      	mov	r3, r0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	789b      	ldrb	r3, [r3, #2]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d10e      	bne.n	800ab16 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2209      	movs	r2, #9
 800ab02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	887a      	ldrh	r2, [r7, #2]
 800ab08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fa09 	bl	800af32 <USBH_CtlReq>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	460b      	mov	r3, r1
 800ab34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	789b      	ldrb	r3, [r3, #2]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d10f      	bne.n	800ab5e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2203      	movs	r2, #3
 800ab48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f9e5 	bl	800af32 <USBH_CtlReq>
 800ab68:	4603      	mov	r3, r0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b082      	sub	sp, #8
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	789b      	ldrb	r3, [r3, #2]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d10f      	bne.n	800aba6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800aba6:	2200      	movs	r2, #0
 800aba8:	2100      	movs	r1, #0
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f9c1 	bl	800af32 <USBH_CtlReq>
 800abb0:	4603      	mov	r3, r0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	60b9      	str	r1, [r7, #8]
 800abc4:	4613      	mov	r3, r2
 800abc6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	781a      	ldrb	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	785a      	ldrb	r2, [r3, #1]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	3302      	adds	r3, #2
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b29a      	uxth	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	3303      	adds	r3, #3
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	b29b      	uxth	r3, r3
 800abec:	4313      	orrs	r3, r2
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	791a      	ldrb	r2, [r3, #4]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	795a      	ldrb	r2, [r3, #5]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	799a      	ldrb	r2, [r3, #6]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	79da      	ldrb	r2, [r3, #7]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ac14:	88fb      	ldrh	r3, [r7, #6]
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	d939      	bls.n	800ac8e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	3309      	adds	r3, #9
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	330a      	adds	r3, #10
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	330b      	adds	r3, #11
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	330c      	adds	r3, #12
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	330d      	adds	r3, #13
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	4313      	orrs	r3, r2
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	7b9a      	ldrb	r2, [r3, #14]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	7bda      	ldrb	r2, [r3, #15]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	7c1a      	ldrb	r2, [r3, #16]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	7c5a      	ldrb	r2, [r3, #17]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	745a      	strb	r2, [r3, #17]
  }
}
 800ac8e:	bf00      	nop
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b08a      	sub	sp, #40	; 0x28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	4613      	mov	r3, r2
 800aca6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	785a      	ldrb	r2, [r3, #1]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	3302      	adds	r3, #2
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	3303      	adds	r3, #3
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	b29b      	uxth	r3, r3
 800ace0:	4313      	orrs	r3, r2
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	791a      	ldrb	r2, [r3, #4]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	795a      	ldrb	r2, [r3, #5]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	799a      	ldrb	r2, [r3, #6]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	79da      	ldrb	r2, [r3, #7]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	7a1a      	ldrb	r2, [r3, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	2b09      	cmp	r3, #9
 800ad14:	d95f      	bls.n	800add6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ad16:	2309      	movs	r3, #9
 800ad18:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad1e:	e051      	b.n	800adc4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad20:	f107 0316 	add.w	r3, r7, #22
 800ad24:	4619      	mov	r1, r3
 800ad26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad28:	f000 f8e8 	bl	800aefc <USBH_GetNextDesc>
 800ad2c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d146      	bne.n	800adc4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ad36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad3a:	221a      	movs	r2, #26
 800ad3c:	fb02 f303 	mul.w	r3, r2, r3
 800ad40:	3308      	adds	r3, #8
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	3302      	adds	r3, #2
 800ad48:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ad4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad4c:	69f8      	ldr	r0, [r7, #28]
 800ad4e:	f000 f846 	bl	800adde <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad5c:	e022      	b.n	800ada4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad5e:	f107 0316 	add.w	r3, r7, #22
 800ad62:	4619      	mov	r1, r3
 800ad64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad66:	f000 f8c9 	bl	800aefc <USBH_GetNextDesc>
 800ad6a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	785b      	ldrb	r3, [r3, #1]
 800ad70:	2b05      	cmp	r3, #5
 800ad72:	d117      	bne.n	800ada4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ad74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad7c:	3201      	adds	r2, #1
 800ad7e:	00d2      	lsls	r2, r2, #3
 800ad80:	211a      	movs	r1, #26
 800ad82:	fb01 f303 	mul.w	r3, r1, r3
 800ad86:	4413      	add	r3, r2
 800ad88:	3308      	adds	r3, #8
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	3304      	adds	r3, #4
 800ad90:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ad92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad94:	69b8      	ldr	r0, [r7, #24]
 800ad96:	f000 f851 	bl	800ae3c <USBH_ParseEPDesc>
            ep_ix++;
 800ad9a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ad9e:	3301      	adds	r3, #1
 800ada0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	791b      	ldrb	r3, [r3, #4]
 800ada8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800adac:	429a      	cmp	r2, r3
 800adae:	d204      	bcs.n	800adba <USBH_ParseCfgDesc+0x120>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	885a      	ldrh	r2, [r3, #2]
 800adb4:	8afb      	ldrh	r3, [r7, #22]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d8d1      	bhi.n	800ad5e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800adba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adbe:	3301      	adds	r3, #1
 800adc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800adc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d804      	bhi.n	800add6 <USBH_ParseCfgDesc+0x13c>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	885a      	ldrh	r2, [r3, #2]
 800add0:	8afb      	ldrh	r3, [r7, #22]
 800add2:	429a      	cmp	r2, r3
 800add4:	d8a4      	bhi.n	800ad20 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800add6:	bf00      	nop
 800add8:	3728      	adds	r7, #40	; 0x28
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785a      	ldrb	r2, [r3, #1]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	789a      	ldrb	r2, [r3, #2]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	78da      	ldrb	r2, [r3, #3]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	791a      	ldrb	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	795a      	ldrb	r2, [r3, #5]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	799a      	ldrb	r2, [r3, #6]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	79da      	ldrb	r2, [r3, #7]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	7a1a      	ldrb	r2, [r3, #8]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	721a      	strb	r2, [r3, #8]
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	785a      	ldrb	r2, [r3, #1]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	789a      	ldrb	r2, [r3, #2]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	78da      	ldrb	r2, [r3, #3]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	3305      	adds	r3, #5
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	799a      	ldrb	r2, [r3, #6]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	719a      	strb	r2, [r3, #6]
}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b087      	sub	sp, #28
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	4613      	mov	r3, r2
 800aea2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3301      	adds	r3, #1
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d120      	bne.n	800aef0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	1e9a      	subs	r2, r3, #2
 800aeb4:	88fb      	ldrh	r3, [r7, #6]
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	bf28      	it	cs
 800aeba:	4613      	movcs	r3, r2
 800aebc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3302      	adds	r3, #2
 800aec2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aec4:	2300      	movs	r3, #0
 800aec6:	82fb      	strh	r3, [r7, #22]
 800aec8:	e00b      	b.n	800aee2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aeca:	8afb      	ldrh	r3, [r7, #22]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	781a      	ldrb	r2, [r3, #0]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aedc:	8afb      	ldrh	r3, [r7, #22]
 800aede:	3302      	adds	r3, #2
 800aee0:	82fb      	strh	r3, [r7, #22]
 800aee2:	8afa      	ldrh	r2, [r7, #22]
 800aee4:	8abb      	ldrh	r3, [r7, #20]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d3ef      	bcc.n	800aeca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]
  }
}
 800aef0:	bf00      	nop
 800aef2:	371c      	adds	r7, #28
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	881a      	ldrh	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4413      	add	r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4413      	add	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af24:	68fb      	ldr	r3, [r7, #12]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b086      	sub	sp, #24
 800af36:	af00      	add	r7, sp, #0
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	4613      	mov	r3, r2
 800af3e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800af40:	2301      	movs	r3, #1
 800af42:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	789b      	ldrb	r3, [r3, #2]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d002      	beq.n	800af52 <USBH_CtlReq+0x20>
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d00f      	beq.n	800af70 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800af50:	e027      	b.n	800afa2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	88fa      	ldrh	r2, [r7, #6]
 800af5c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2201      	movs	r2, #1
 800af62:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2202      	movs	r2, #2
 800af68:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800af6a:	2301      	movs	r3, #1
 800af6c:	75fb      	strb	r3, [r7, #23]
      break;
 800af6e:	e018      	b.n	800afa2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 f81b 	bl	800afac <USBH_HandleControl>
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <USBH_CtlReq+0x54>
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	2b03      	cmp	r3, #3
 800af84:	d106      	bne.n	800af94 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	761a      	strb	r2, [r3, #24]
      break;
 800af92:	e005      	b.n	800afa0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d102      	bne.n	800afa0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2201      	movs	r2, #1
 800af9e:	709a      	strb	r2, [r3, #2]
      break;
 800afa0:	bf00      	nop
  }
  return status;
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800afb4:	2301      	movs	r3, #1
 800afb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800afb8:	2300      	movs	r3, #0
 800afba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7e1b      	ldrb	r3, [r3, #24]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	2b0a      	cmp	r3, #10
 800afc4:	f200 8156 	bhi.w	800b274 <USBH_HandleControl+0x2c8>
 800afc8:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <USBH_HandleControl+0x24>)
 800afca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afce:	bf00      	nop
 800afd0:	0800affd 	.word	0x0800affd
 800afd4:	0800b017 	.word	0x0800b017
 800afd8:	0800b081 	.word	0x0800b081
 800afdc:	0800b0a7 	.word	0x0800b0a7
 800afe0:	0800b0df 	.word	0x0800b0df
 800afe4:	0800b109 	.word	0x0800b109
 800afe8:	0800b15b 	.word	0x0800b15b
 800afec:	0800b17d 	.word	0x0800b17d
 800aff0:	0800b1b9 	.word	0x0800b1b9
 800aff4:	0800b1df 	.word	0x0800b1df
 800aff8:	0800b21d 	.word	0x0800b21d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f103 0110 	add.w	r1, r3, #16
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	795b      	ldrb	r3, [r3, #5]
 800b006:	461a      	mov	r2, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f943 	bl	800b294 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2202      	movs	r2, #2
 800b012:	761a      	strb	r2, [r3, #24]
      break;
 800b014:	e139      	b.n	800b28a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	795b      	ldrb	r3, [r3, #5]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f003 f959 	bl	800e2d4 <USBH_LL_GetURBState>
 800b022:	4603      	mov	r3, r0
 800b024:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d11e      	bne.n	800b06a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	7c1b      	ldrb	r3, [r3, #16]
 800b030:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b034:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8adb      	ldrh	r3, [r3, #22]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b03e:	7b7b      	ldrb	r3, [r7, #13]
 800b040:	2b80      	cmp	r3, #128	; 0x80
 800b042:	d103      	bne.n	800b04c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2203      	movs	r2, #3
 800b048:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b04a:	e115      	b.n	800b278 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2205      	movs	r2, #5
 800b050:	761a      	strb	r2, [r3, #24]
      break;
 800b052:	e111      	b.n	800b278 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b054:	7b7b      	ldrb	r3, [r7, #13]
 800b056:	2b80      	cmp	r3, #128	; 0x80
 800b058:	d103      	bne.n	800b062 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2209      	movs	r2, #9
 800b05e:	761a      	strb	r2, [r3, #24]
      break;
 800b060:	e10a      	b.n	800b278 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2207      	movs	r2, #7
 800b066:	761a      	strb	r2, [r3, #24]
      break;
 800b068:	e106      	b.n	800b278 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d003      	beq.n	800b078 <USBH_HandleControl+0xcc>
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b02      	cmp	r3, #2
 800b074:	f040 8100 	bne.w	800b278 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	220b      	movs	r2, #11
 800b07c:	761a      	strb	r2, [r3, #24]
      break;
 800b07e:	e0fb      	b.n	800b278 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b086:	b29a      	uxth	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6899      	ldr	r1, [r3, #8]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	899a      	ldrh	r2, [r3, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	791b      	ldrb	r3, [r3, #4]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f93a 	bl	800b312 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	761a      	strb	r2, [r3, #24]
      break;
 800b0a4:	e0f1      	b.n	800b28a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	791b      	ldrb	r3, [r3, #4]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f003 f911 	bl	800e2d4 <USBH_LL_GetURBState>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d102      	bne.n	800b0c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2209      	movs	r2, #9
 800b0c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	2b05      	cmp	r3, #5
 800b0c6:	d102      	bne.n	800b0ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b0cc:	e0d6      	b.n	800b27c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	f040 80d3 	bne.w	800b27c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	220b      	movs	r2, #11
 800b0da:	761a      	strb	r2, [r3, #24]
      break;
 800b0dc:	e0ce      	b.n	800b27c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6899      	ldr	r1, [r3, #8]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	899a      	ldrh	r2, [r3, #12]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	795b      	ldrb	r3, [r3, #5]
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	9000      	str	r0, [sp, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f8ea 	bl	800b2c8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2206      	movs	r2, #6
 800b104:	761a      	strb	r2, [r3, #24]
      break;
 800b106:	e0c0      	b.n	800b28a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	795b      	ldrb	r3, [r3, #5]
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f003 f8e0 	bl	800e2d4 <USBH_LL_GetURBState>
 800b114:	4603      	mov	r3, r0
 800b116:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d103      	bne.n	800b126 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2207      	movs	r2, #7
 800b122:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b124:	e0ac      	b.n	800b280 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b05      	cmp	r3, #5
 800b12a:	d105      	bne.n	800b138 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	220c      	movs	r2, #12
 800b130:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b132:	2303      	movs	r3, #3
 800b134:	73fb      	strb	r3, [r7, #15]
      break;
 800b136:	e0a3      	b.n	800b280 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d103      	bne.n	800b146 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2205      	movs	r2, #5
 800b142:	761a      	strb	r2, [r3, #24]
      break;
 800b144:	e09c      	b.n	800b280 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	2b04      	cmp	r3, #4
 800b14a:	f040 8099 	bne.w	800b280 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	220b      	movs	r2, #11
 800b152:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b154:	2302      	movs	r3, #2
 800b156:	73fb      	strb	r3, [r7, #15]
      break;
 800b158:	e092      	b.n	800b280 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	791b      	ldrb	r3, [r3, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	2100      	movs	r1, #0
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f8d5 	bl	800b312 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b16e:	b29a      	uxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2208      	movs	r2, #8
 800b178:	761a      	strb	r2, [r3, #24]

      break;
 800b17a:	e086      	b.n	800b28a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	791b      	ldrb	r3, [r3, #4]
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f003 f8a6 	bl	800e2d4 <USBH_LL_GetURBState>
 800b188:	4603      	mov	r3, r0
 800b18a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d105      	bne.n	800b19e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	220d      	movs	r2, #13
 800b196:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b19c:	e072      	b.n	800b284 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d103      	bne.n	800b1ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	220b      	movs	r2, #11
 800b1a8:	761a      	strb	r2, [r3, #24]
      break;
 800b1aa:	e06b      	b.n	800b284 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	d168      	bne.n	800b284 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b6:	e065      	b.n	800b284 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	795b      	ldrb	r3, [r3, #5]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	9200      	str	r2, [sp, #0]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f87f 	bl	800b2c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	220a      	movs	r2, #10
 800b1da:	761a      	strb	r2, [r3, #24]
      break;
 800b1dc:	e055      	b.n	800b28a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	795b      	ldrb	r3, [r3, #5]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f003 f875 	bl	800e2d4 <USBH_LL_GetURBState>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d105      	bne.n	800b200 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	220d      	movs	r2, #13
 800b1fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1fe:	e043      	b.n	800b288 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d103      	bne.n	800b20e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2209      	movs	r2, #9
 800b20a:	761a      	strb	r2, [r3, #24]
      break;
 800b20c:	e03c      	b.n	800b288 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	2b04      	cmp	r3, #4
 800b212:	d139      	bne.n	800b288 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	220b      	movs	r2, #11
 800b218:	761a      	strb	r2, [r3, #24]
      break;
 800b21a:	e035      	b.n	800b288 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	7e5b      	ldrb	r3, [r3, #25]
 800b220:	3301      	adds	r3, #1
 800b222:	b2da      	uxtb	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	765a      	strb	r2, [r3, #25]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7e5b      	ldrb	r3, [r3, #25]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d806      	bhi.n	800b23e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b23c:	e025      	b.n	800b28a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b244:	2106      	movs	r1, #6
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	795b      	ldrb	r3, [r3, #5]
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f90c 	bl	800b474 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	791b      	ldrb	r3, [r3, #4]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f906 	bl	800b474 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b26e:	2302      	movs	r3, #2
 800b270:	73fb      	strb	r3, [r7, #15]
      break;
 800b272:	e00a      	b.n	800b28a <USBH_HandleControl+0x2de>

    default:
      break;
 800b274:	bf00      	nop
 800b276:	e008      	b.n	800b28a <USBH_HandleControl+0x2de>
      break;
 800b278:	bf00      	nop
 800b27a:	e006      	b.n	800b28a <USBH_HandleControl+0x2de>
      break;
 800b27c:	bf00      	nop
 800b27e:	e004      	b.n	800b28a <USBH_HandleControl+0x2de>
      break;
 800b280:	bf00      	nop
 800b282:	e002      	b.n	800b28a <USBH_HandleControl+0x2de>
      break;
 800b284:	bf00      	nop
 800b286:	e000      	b.n	800b28a <USBH_HandleControl+0x2de>
      break;
 800b288:	bf00      	nop
  }

  return status;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af04      	add	r7, sp, #16
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2a2:	79f9      	ldrb	r1, [r7, #7]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9303      	str	r3, [sp, #12]
 800b2a8:	2308      	movs	r3, #8
 800b2aa:	9302      	str	r3, [sp, #8]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f002 ffda 	bl	800e272 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af04      	add	r7, sp, #16
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	80fb      	strh	r3, [r7, #6]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2ec:	7979      	ldrb	r1, [r7, #5]
 800b2ee:	7e3b      	ldrb	r3, [r7, #24]
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	88fb      	ldrh	r3, [r7, #6]
 800b2f4:	9302      	str	r3, [sp, #8]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	2300      	movs	r3, #0
 800b300:	2200      	movs	r2, #0
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f002 ffb5 	bl	800e272 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b088      	sub	sp, #32
 800b316:	af04      	add	r7, sp, #16
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	4611      	mov	r1, r2
 800b31e:	461a      	mov	r2, r3
 800b320:	460b      	mov	r3, r1
 800b322:	80fb      	strh	r3, [r7, #6]
 800b324:	4613      	mov	r3, r2
 800b326:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b328:	7979      	ldrb	r1, [r7, #5]
 800b32a:	2300      	movs	r3, #0
 800b32c:	9303      	str	r3, [sp, #12]
 800b32e:	88fb      	ldrh	r3, [r7, #6]
 800b330:	9302      	str	r3, [sp, #8]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	2301      	movs	r3, #1
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	2300      	movs	r3, #0
 800b33c:	2201      	movs	r2, #1
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f002 ff97 	bl	800e272 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b344:	2300      	movs	r3, #0

}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b088      	sub	sp, #32
 800b352:	af04      	add	r7, sp, #16
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	4611      	mov	r1, r2
 800b35a:	461a      	mov	r2, r3
 800b35c:	460b      	mov	r3, r1
 800b35e:	80fb      	strh	r3, [r7, #6]
 800b360:	4613      	mov	r3, r2
 800b362:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b372:	7979      	ldrb	r1, [r7, #5]
 800b374:	7e3b      	ldrb	r3, [r7, #24]
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	88fb      	ldrh	r3, [r7, #6]
 800b37a:	9302      	str	r3, [sp, #8]
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	2301      	movs	r3, #1
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	2302      	movs	r3, #2
 800b386:	2200      	movs	r2, #0
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f002 ff72 	bl	800e272 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af04      	add	r7, sp, #16
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	80fb      	strh	r3, [r7, #6]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b3ae:	7979      	ldrb	r1, [r7, #5]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	9303      	str	r3, [sp, #12]
 800b3b4:	88fb      	ldrh	r3, [r7, #6]
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	2301      	movs	r3, #1
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f002 ff54 	bl	800e272 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af04      	add	r7, sp, #16
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	70fb      	strb	r3, [r7, #3]
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	70bb      	strb	r3, [r7, #2]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b3ee:	7878      	ldrb	r0, [r7, #1]
 800b3f0:	78ba      	ldrb	r2, [r7, #2]
 800b3f2:	78f9      	ldrb	r1, [r7, #3]
 800b3f4:	8b3b      	ldrh	r3, [r7, #24]
 800b3f6:	9302      	str	r3, [sp, #8]
 800b3f8:	7d3b      	ldrb	r3, [r7, #20]
 800b3fa:	9301      	str	r3, [sp, #4]
 800b3fc:	7c3b      	ldrb	r3, [r7, #16]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	4603      	mov	r3, r0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f002 fee7 	bl	800e1d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b41e:	78fb      	ldrb	r3, [r7, #3]
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f002 ff06 	bl	800e234 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f836 	bl	800b4b0 <USBH_GetFreePipe>
 800b444:	4603      	mov	r3, r0
 800b446:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b448:	89fb      	ldrh	r3, [r7, #14]
 800b44a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b44e:	4293      	cmp	r3, r2
 800b450:	d00a      	beq.n	800b468 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b452:	78fa      	ldrb	r2, [r7, #3]
 800b454:	89fb      	ldrh	r3, [r7, #14]
 800b456:	f003 030f 	and.w	r3, r3, #15
 800b45a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	33e0      	adds	r3, #224	; 0xe0
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b468:	89fb      	ldrh	r3, [r7, #14]
 800b46a:	b2db      	uxtb	r3, r3
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	2b0a      	cmp	r3, #10
 800b484:	d80d      	bhi.n	800b4a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	33e0      	adds	r3, #224	; 0xe0
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	78fb      	ldrb	r3, [r7, #3]
 800b494:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	33e0      	adds	r3, #224	; 0xe0
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
 800b4c0:	e00f      	b.n	800b4e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	33e0      	adds	r3, #224	; 0xe0
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	e007      	b.n	800b4ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	73fb      	strb	r3, [r7, #15]
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	2b0a      	cmp	r3, #10
 800b4e6:	d9ec      	bls.n	800b4c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b4e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	4a08      	ldr	r2, [pc, #32]	; (800b528 <disk_status+0x30>)
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	79fa      	ldrb	r2, [r7, #7]
 800b510:	4905      	ldr	r1, [pc, #20]	; (800b528 <disk_status+0x30>)
 800b512:	440a      	add	r2, r1
 800b514:	7a12      	ldrb	r2, [r2, #8]
 800b516:	4610      	mov	r0, r2
 800b518:	4798      	blx	r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20002174 	.word	0x20002174

0800b52c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	4a0d      	ldr	r2, [pc, #52]	; (800b574 <disk_initialize+0x48>)
 800b53e:	5cd3      	ldrb	r3, [r2, r3]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d111      	bne.n	800b568 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	4a0b      	ldr	r2, [pc, #44]	; (800b574 <disk_initialize+0x48>)
 800b548:	2101      	movs	r1, #1
 800b54a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	4a09      	ldr	r2, [pc, #36]	; (800b574 <disk_initialize+0x48>)
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	79fa      	ldrb	r2, [r7, #7]
 800b55a:	4906      	ldr	r1, [pc, #24]	; (800b574 <disk_initialize+0x48>)
 800b55c:	440a      	add	r2, r1
 800b55e:	7a12      	ldrb	r2, [r2, #8]
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20002174 	.word	0x20002174

0800b578 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b578:	b590      	push	{r4, r7, lr}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60b9      	str	r1, [r7, #8]
 800b580:	607a      	str	r2, [r7, #4]
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4a0a      	ldr	r2, [pc, #40]	; (800b5b4 <disk_read+0x3c>)
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	689c      	ldr	r4, [r3, #8]
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	4a07      	ldr	r2, [pc, #28]	; (800b5b4 <disk_read+0x3c>)
 800b598:	4413      	add	r3, r2
 800b59a:	7a18      	ldrb	r0, [r3, #8]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	47a0      	blx	r4
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	371c      	adds	r7, #28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd90      	pop	{r4, r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20002174 	.word	0x20002174

0800b5b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	607a      	str	r2, [r7, #4]
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	4a0a      	ldr	r2, [pc, #40]	; (800b5f4 <disk_write+0x3c>)
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	68dc      	ldr	r4, [r3, #12]
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	4a07      	ldr	r2, [pc, #28]	; (800b5f4 <disk_write+0x3c>)
 800b5d8:	4413      	add	r3, r2
 800b5da:	7a18      	ldrb	r0, [r3, #8]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	47a0      	blx	r4
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd90      	pop	{r4, r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20002174 	.word	0x20002174

0800b5f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	603a      	str	r2, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
 800b604:	460b      	mov	r3, r1
 800b606:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b608:	79fb      	ldrb	r3, [r7, #7]
 800b60a:	4a09      	ldr	r2, [pc, #36]	; (800b630 <disk_ioctl+0x38>)
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	79fa      	ldrb	r2, [r7, #7]
 800b616:	4906      	ldr	r1, [pc, #24]	; (800b630 <disk_ioctl+0x38>)
 800b618:	440a      	add	r2, r1
 800b61a:	7a10      	ldrb	r0, [r2, #8]
 800b61c:	79b9      	ldrb	r1, [r7, #6]
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4798      	blx	r3
 800b622:	4603      	mov	r3, r0
 800b624:	73fb      	strb	r3, [r7, #15]
  return res;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	20002174 	.word	0x20002174

0800b634 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3301      	adds	r3, #1
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	b21a      	sxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b21b      	sxth	r3, r3
 800b650:	4313      	orrs	r3, r2
 800b652:	b21b      	sxth	r3, r3
 800b654:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b656:	89fb      	ldrh	r3, [r7, #14]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3303      	adds	r3, #3
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	021b      	lsls	r3, r3, #8
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	3202      	adds	r2, #2
 800b67c:	7812      	ldrb	r2, [r2, #0]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	021b      	lsls	r3, r3, #8
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	3201      	adds	r2, #1
 800b68a:	7812      	ldrb	r2, [r2, #0]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	7812      	ldrb	r2, [r2, #0]
 800b698:	4313      	orrs	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b69c:	68fb      	ldr	r3, [r7, #12]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	887a      	ldrh	r2, [r7, #2]
 800b6be:	b2d2      	uxtb	r2, r2
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	887b      	ldrh	r3, [r7, #2]
 800b6c4:	0a1b      	lsrs	r3, r3, #8
 800b6c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	607a      	str	r2, [r7, #4]
 800b6ce:	887a      	ldrh	r2, [r7, #2]
 800b6d0:	b2d2      	uxtb	r2, r2
 800b6d2:	701a      	strb	r2, [r3, #0]
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	1c5a      	adds	r2, r3, #1
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	0a1b      	lsrs	r3, r3, #8
 800b6fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	701a      	strb	r2, [r3, #0]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	0a1b      	lsrs	r3, r3, #8
 800b70c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	b2d2      	uxtb	r2, r2
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	0a1b      	lsrs	r3, r3, #8
 800b71e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	607a      	str	r2, [r7, #4]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	b2d2      	uxtb	r2, r2
 800b72a:	701a      	strb	r2, [r3, #0]
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00d      	beq.n	800b76e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	1c53      	adds	r3, r2, #1
 800b756:	613b      	str	r3, [r7, #16]
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	1c59      	adds	r1, r3, #1
 800b75c:	6179      	str	r1, [r7, #20]
 800b75e:	7812      	ldrb	r2, [r2, #0]
 800b760:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3b01      	subs	r3, #1
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1f1      	bne.n	800b752 <mem_cpy+0x1a>
	}
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b77a:	b480      	push	{r7}
 800b77c:	b087      	sub	sp, #28
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	617a      	str	r2, [r7, #20]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3b01      	subs	r3, #1
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1f3      	bne.n	800b78a <mem_set+0x10>
}
 800b7a2:	bf00      	nop
 800b7a4:	bf00      	nop
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b7b0:	b480      	push	{r7}
 800b7b2:	b089      	sub	sp, #36	; 0x24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	61fa      	str	r2, [r7, #28]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	61ba      	str	r2, [r7, #24]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	1acb      	subs	r3, r1, r3
 800b7dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <mem_cmp+0x40>
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0eb      	beq.n	800b7c8 <mem_cmp+0x18>

	return r;
 800b7f0:	697b      	ldr	r3, [r7, #20]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3724      	adds	r7, #36	; 0x24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b808:	e002      	b.n	800b810 <chk_chr+0x12>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3301      	adds	r3, #1
 800b80e:	607b      	str	r3, [r7, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <chk_chr+0x26>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	461a      	mov	r2, r3
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	4293      	cmp	r3, r2
 800b822:	d1f2      	bne.n	800b80a <chk_chr+0xc>
	return *str;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	781b      	ldrb	r3, [r3, #0]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e029      	b.n	800b89c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b848:	4a27      	ldr	r2, [pc, #156]	; (800b8e8 <chk_lock+0xb4>)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	4413      	add	r3, r2
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d01d      	beq.n	800b892 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b856:	4a24      	ldr	r2, [pc, #144]	; (800b8e8 <chk_lock+0xb4>)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	011b      	lsls	r3, r3, #4
 800b85c:	4413      	add	r3, r2
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d116      	bne.n	800b896 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b868:	4a1f      	ldr	r2, [pc, #124]	; (800b8e8 <chk_lock+0xb4>)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	4413      	add	r3, r2
 800b870:	3304      	adds	r3, #4
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b878:	429a      	cmp	r2, r3
 800b87a:	d10c      	bne.n	800b896 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b87c:	4a1a      	ldr	r2, [pc, #104]	; (800b8e8 <chk_lock+0xb4>)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	4413      	add	r3, r2
 800b884:	3308      	adds	r3, #8
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d102      	bne.n	800b896 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b890:	e007      	b.n	800b8a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b892:	2301      	movs	r3, #1
 800b894:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d9d2      	bls.n	800b848 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d109      	bne.n	800b8bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d102      	bne.n	800b8b4 <chk_lock+0x80>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d101      	bne.n	800b8b8 <chk_lock+0x84>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e010      	b.n	800b8da <chk_lock+0xa6>
 800b8b8:	2312      	movs	r3, #18
 800b8ba:	e00e      	b.n	800b8da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d108      	bne.n	800b8d4 <chk_lock+0xa0>
 800b8c2:	4a09      	ldr	r2, [pc, #36]	; (800b8e8 <chk_lock+0xb4>)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	011b      	lsls	r3, r3, #4
 800b8c8:	4413      	add	r3, r2
 800b8ca:	330c      	adds	r3, #12
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8d2:	d101      	bne.n	800b8d8 <chk_lock+0xa4>
 800b8d4:	2310      	movs	r3, #16
 800b8d6:	e000      	b.n	800b8da <chk_lock+0xa6>
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20002154 	.word	0x20002154

0800b8ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	607b      	str	r3, [r7, #4]
 800b8f6:	e002      	b.n	800b8fe <enq_lock+0x12>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	607b      	str	r3, [r7, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d806      	bhi.n	800b912 <enq_lock+0x26>
 800b904:	4a09      	ldr	r2, [pc, #36]	; (800b92c <enq_lock+0x40>)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	011b      	lsls	r3, r3, #4
 800b90a:	4413      	add	r3, r2
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1f2      	bne.n	800b8f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b02      	cmp	r3, #2
 800b916:	bf14      	ite	ne
 800b918:	2301      	movne	r3, #1
 800b91a:	2300      	moveq	r3, #0
 800b91c:	b2db      	uxtb	r3, r3
}
 800b91e:	4618      	mov	r0, r3
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	20002154 	.word	0x20002154

0800b930 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	e01f      	b.n	800b980 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b940:	4a41      	ldr	r2, [pc, #260]	; (800ba48 <inc_lock+0x118>)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	011b      	lsls	r3, r3, #4
 800b946:	4413      	add	r3, r2
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d113      	bne.n	800b97a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b952:	4a3d      	ldr	r2, [pc, #244]	; (800ba48 <inc_lock+0x118>)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	3304      	adds	r3, #4
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b962:	429a      	cmp	r2, r3
 800b964:	d109      	bne.n	800b97a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b966:	4a38      	ldr	r2, [pc, #224]	; (800ba48 <inc_lock+0x118>)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	011b      	lsls	r3, r3, #4
 800b96c:	4413      	add	r3, r2
 800b96e:	3308      	adds	r3, #8
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b976:	429a      	cmp	r2, r3
 800b978:	d006      	beq.n	800b988 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3301      	adds	r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d9dc      	bls.n	800b940 <inc_lock+0x10>
 800b986:	e000      	b.n	800b98a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b988:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d132      	bne.n	800b9f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b990:	2300      	movs	r3, #0
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	e002      	b.n	800b99c <inc_lock+0x6c>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3301      	adds	r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d806      	bhi.n	800b9b0 <inc_lock+0x80>
 800b9a2:	4a29      	ldr	r2, [pc, #164]	; (800ba48 <inc_lock+0x118>)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	4413      	add	r3, r2
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1f2      	bne.n	800b996 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d101      	bne.n	800b9ba <inc_lock+0x8a>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e040      	b.n	800ba3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	4922      	ldr	r1, [pc, #136]	; (800ba48 <inc_lock+0x118>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	440b      	add	r3, r1
 800b9c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	491e      	ldr	r1, [pc, #120]	; (800ba48 <inc_lock+0x118>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	440b      	add	r3, r1
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	695a      	ldr	r2, [r3, #20]
 800b9dc:	491a      	ldr	r1, [pc, #104]	; (800ba48 <inc_lock+0x118>)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	011b      	lsls	r3, r3, #4
 800b9e2:	440b      	add	r3, r1
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b9e8:	4a17      	ldr	r2, [pc, #92]	; (800ba48 <inc_lock+0x118>)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	4413      	add	r3, r2
 800b9f0:	330c      	adds	r3, #12
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d009      	beq.n	800ba10 <inc_lock+0xe0>
 800b9fc:	4a12      	ldr	r2, [pc, #72]	; (800ba48 <inc_lock+0x118>)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	011b      	lsls	r3, r3, #4
 800ba02:	4413      	add	r3, r2
 800ba04:	330c      	adds	r3, #12
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <inc_lock+0xe0>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e015      	b.n	800ba3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d108      	bne.n	800ba28 <inc_lock+0xf8>
 800ba16:	4a0c      	ldr	r2, [pc, #48]	; (800ba48 <inc_lock+0x118>)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	4413      	add	r3, r2
 800ba1e:	330c      	adds	r3, #12
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	3301      	adds	r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	e001      	b.n	800ba2c <inc_lock+0xfc>
 800ba28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba2c:	4906      	ldr	r1, [pc, #24]	; (800ba48 <inc_lock+0x118>)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	440b      	add	r3, r1
 800ba34:	330c      	adds	r3, #12
 800ba36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	20002154 	.word	0x20002154

0800ba4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	607b      	str	r3, [r7, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d825      	bhi.n	800baac <dec_lock+0x60>
		n = Files[i].ctr;
 800ba60:	4a17      	ldr	r2, [pc, #92]	; (800bac0 <dec_lock+0x74>)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	4413      	add	r3, r2
 800ba68:	330c      	adds	r3, #12
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba6e:	89fb      	ldrh	r3, [r7, #14]
 800ba70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba74:	d101      	bne.n	800ba7a <dec_lock+0x2e>
 800ba76:	2300      	movs	r3, #0
 800ba78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba7a:	89fb      	ldrh	r3, [r7, #14]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <dec_lock+0x3a>
 800ba80:	89fb      	ldrh	r3, [r7, #14]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba86:	4a0e      	ldr	r2, [pc, #56]	; (800bac0 <dec_lock+0x74>)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	011b      	lsls	r3, r3, #4
 800ba8c:	4413      	add	r3, r2
 800ba8e:	330c      	adds	r3, #12
 800ba90:	89fa      	ldrh	r2, [r7, #14]
 800ba92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba94:	89fb      	ldrh	r3, [r7, #14]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <dec_lock+0x5a>
 800ba9a:	4a09      	ldr	r2, [pc, #36]	; (800bac0 <dec_lock+0x74>)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	011b      	lsls	r3, r3, #4
 800baa0:	4413      	add	r3, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	737b      	strb	r3, [r7, #13]
 800baaa:	e001      	b.n	800bab0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800baac:	2302      	movs	r3, #2
 800baae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bab0:	7b7b      	ldrb	r3, [r7, #13]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	20002154 	.word	0x20002154

0800bac4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	e010      	b.n	800baf4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bad2:	4a0d      	ldr	r2, [pc, #52]	; (800bb08 <clear_lock+0x44>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	011b      	lsls	r3, r3, #4
 800bad8:	4413      	add	r3, r2
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d105      	bne.n	800baee <clear_lock+0x2a>
 800bae2:	4a09      	ldr	r2, [pc, #36]	; (800bb08 <clear_lock+0x44>)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	4413      	add	r3, r2
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	3301      	adds	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d9eb      	bls.n	800bad2 <clear_lock+0xe>
	}
}
 800bafa:	bf00      	nop
 800bafc:	bf00      	nop
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	20002154 	.word	0x20002154

0800bb0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	78db      	ldrb	r3, [r3, #3]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d034      	beq.n	800bb8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	7858      	ldrb	r0, [r3, #1]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bb30:	2301      	movs	r3, #1
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	f7ff fd40 	bl	800b5b8 <disk_write>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	73fb      	strb	r3, [r7, #15]
 800bb42:	e022      	b.n	800bb8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	1ad2      	subs	r2, r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d217      	bcs.n	800bb8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	789b      	ldrb	r3, [r3, #2]
 800bb5e:	613b      	str	r3, [r7, #16]
 800bb60:	e010      	b.n	800bb84 <sync_window+0x78>
					wsect += fs->fsize;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	4413      	add	r3, r2
 800bb6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	7858      	ldrb	r0, [r3, #1]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bb76:	2301      	movs	r3, #1
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	f7ff fd1d 	bl	800b5b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	613b      	str	r3, [r7, #16]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d8eb      	bhi.n	800bb62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d01b      	beq.n	800bbe4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff ffad 	bl	800bb0c <sync_window>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d113      	bne.n	800bbe4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7858      	ldrb	r0, [r3, #1]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	f7ff fcd5 	bl	800b578 <disk_read>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff ff87 	bl	800bb0c <sync_window>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d159      	bne.n	800bcbc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d149      	bne.n	800bca4 <sync_fs+0xb4>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	791b      	ldrb	r3, [r3, #4]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d145      	bne.n	800bca4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	899b      	ldrh	r3, [r3, #12]
 800bc22:	461a      	mov	r2, r3
 800bc24:	2100      	movs	r1, #0
 800bc26:	f7ff fda8 	bl	800b77a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	3334      	adds	r3, #52	; 0x34
 800bc2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc32:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff fd37 	bl	800b6aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3334      	adds	r3, #52	; 0x34
 800bc40:	4921      	ldr	r1, [pc, #132]	; (800bcc8 <sync_fs+0xd8>)
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff fd4c 	bl	800b6e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3334      	adds	r3, #52	; 0x34
 800bc4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc50:	491e      	ldr	r1, [pc, #120]	; (800bccc <sync_fs+0xdc>)
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff fd44 	bl	800b6e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3334      	adds	r3, #52	; 0x34
 800bc5c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	f7ff fd3a 	bl	800b6e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3334      	adds	r3, #52	; 0x34
 800bc70:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7ff fd30 	bl	800b6e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	7858      	ldrb	r0, [r3, #1]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f7ff fc8d 	bl	800b5b8 <disk_write>
			fs->fsi_flag = 0;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	785b      	ldrb	r3, [r3, #1]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff fca3 	bl	800b5f8 <disk_ioctl>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <sync_fs+0xcc>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	41615252 	.word	0x41615252
 800bccc:	61417272 	.word	0x61417272

0800bcd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	3b02      	subs	r3, #2
 800bcde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	3b02      	subs	r3, #2
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d301      	bcc.n	800bcf0 <clust2sect+0x20>
 800bcec:	2300      	movs	r3, #0
 800bcee:	e008      	b.n	800bd02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	895b      	ldrh	r3, [r3, #10]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	fb03 f202 	mul.w	r2, r3, r2
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	4413      	add	r3, r2
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b086      	sub	sp, #24
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d904      	bls.n	800bd2e <get_fat+0x20>
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d302      	bcc.n	800bd34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd2e:	2301      	movs	r3, #1
 800bd30:	617b      	str	r3, [r7, #20]
 800bd32:	e0bb      	b.n	800beac <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd34:	f04f 33ff 	mov.w	r3, #4294967295
 800bd38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	f000 8083 	beq.w	800be4a <get_fat+0x13c>
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	f300 80a7 	bgt.w	800be98 <get_fat+0x18a>
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d002      	beq.n	800bd54 <get_fat+0x46>
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d056      	beq.n	800be00 <get_fat+0xf2>
 800bd52:	e0a1      	b.n	800be98 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	085b      	lsrs	r3, r3, #1
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd72:	4413      	add	r3, r2
 800bd74:	4619      	mov	r1, r3
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f7ff ff0c 	bl	800bb94 <move_window>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f040 808d 	bne.w	800be9e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	60fa      	str	r2, [r7, #12]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	8992      	ldrh	r2, [r2, #12]
 800bd8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd92:	fb02 f201 	mul.w	r2, r2, r1
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bda0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	899b      	ldrh	r3, [r3, #12]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdb2:	4413      	add	r3, r2
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6938      	ldr	r0, [r7, #16]
 800bdb8:	f7ff feec 	bl	800bb94 <move_window>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d16f      	bne.n	800bea2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	899b      	ldrh	r3, [r3, #12]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdce:	fb02 f201 	mul.w	r2, r2, r1
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	461a      	mov	r2, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d002      	beq.n	800bdf6 <get_fat+0xe8>
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	091b      	lsrs	r3, r3, #4
 800bdf4:	e002      	b.n	800bdfc <get_fat+0xee>
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdfc:	617b      	str	r3, [r7, #20]
			break;
 800bdfe:	e055      	b.n	800beac <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	899b      	ldrh	r3, [r3, #12]
 800be08:	085b      	lsrs	r3, r3, #1
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4619      	mov	r1, r3
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	fbb3 f3f1 	udiv	r3, r3, r1
 800be14:	4413      	add	r3, r2
 800be16:	4619      	mov	r1, r3
 800be18:	6938      	ldr	r0, [r7, #16]
 800be1a:	f7ff febb 	bl	800bb94 <move_window>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d140      	bne.n	800bea6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	8992      	ldrh	r2, [r2, #12]
 800be32:	fbb3 f0f2 	udiv	r0, r3, r2
 800be36:	fb02 f200 	mul.w	r2, r2, r0
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	440b      	add	r3, r1
 800be3e:	4618      	mov	r0, r3
 800be40:	f7ff fbf8 	bl	800b634 <ld_word>
 800be44:	4603      	mov	r3, r0
 800be46:	617b      	str	r3, [r7, #20]
			break;
 800be48:	e030      	b.n	800beac <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	899b      	ldrh	r3, [r3, #12]
 800be52:	089b      	lsrs	r3, r3, #2
 800be54:	b29b      	uxth	r3, r3
 800be56:	4619      	mov	r1, r3
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800be5e:	4413      	add	r3, r2
 800be60:	4619      	mov	r1, r3
 800be62:	6938      	ldr	r0, [r7, #16]
 800be64:	f7ff fe96 	bl	800bb94 <move_window>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d11d      	bne.n	800beaa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	8992      	ldrh	r2, [r2, #12]
 800be7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800be80:	fb02 f200 	mul.w	r2, r2, r0
 800be84:	1a9b      	subs	r3, r3, r2
 800be86:	440b      	add	r3, r1
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff fbeb 	bl	800b664 <ld_dword>
 800be8e:	4603      	mov	r3, r0
 800be90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be94:	617b      	str	r3, [r7, #20]
			break;
 800be96:	e009      	b.n	800beac <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800be98:	2301      	movs	r3, #1
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e006      	b.n	800beac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be9e:	bf00      	nop
 800bea0:	e004      	b.n	800beac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bea2:	bf00      	nop
 800bea4:	e002      	b.n	800beac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bea6:	bf00      	nop
 800bea8:	e000      	b.n	800beac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beaa:	bf00      	nop
		}
	}

	return val;
 800beac:	697b      	ldr	r3, [r7, #20]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800beb6:	b590      	push	{r4, r7, lr}
 800beb8:	b089      	sub	sp, #36	; 0x24
 800beba:	af00      	add	r7, sp, #0
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bec2:	2302      	movs	r3, #2
 800bec4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	f240 8102 	bls.w	800c0d2 <put_fat+0x21c>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	f080 80fc 	bcs.w	800c0d2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b03      	cmp	r3, #3
 800bee0:	f000 80b6 	beq.w	800c050 <put_fat+0x19a>
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	f300 80fd 	bgt.w	800c0e4 <put_fat+0x22e>
 800beea:	2b01      	cmp	r3, #1
 800beec:	d003      	beq.n	800bef6 <put_fat+0x40>
 800beee:	2b02      	cmp	r3, #2
 800bef0:	f000 8083 	beq.w	800bffa <put_fat+0x144>
 800bef4:	e0f6      	b.n	800c0e4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	61bb      	str	r3, [r7, #24]
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	085b      	lsrs	r3, r3, #1
 800befe:	69ba      	ldr	r2, [r7, #24]
 800bf00:	4413      	add	r3, r2
 800bf02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	899b      	ldrh	r3, [r3, #12]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf14:	4413      	add	r3, r2
 800bf16:	4619      	mov	r1, r3
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f7ff fe3b 	bl	800bb94 <move_window>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf22:	7ffb      	ldrb	r3, [r7, #31]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f040 80d6 	bne.w	800c0d6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	61ba      	str	r2, [r7, #24]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	8992      	ldrh	r2, [r2, #12]
 800bf3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf3e:	fb02 f200 	mul.w	r2, r2, r0
 800bf42:	1a9b      	subs	r3, r3, r2
 800bf44:	440b      	add	r3, r1
 800bf46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00d      	beq.n	800bf6e <put_fat+0xb8>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	b25b      	sxtb	r3, r3
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	b25a      	sxtb	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	011b      	lsls	r3, r3, #4
 800bf64:	b25b      	sxtb	r3, r3
 800bf66:	4313      	orrs	r3, r2
 800bf68:	b25b      	sxtb	r3, r3
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	e001      	b.n	800bf72 <put_fat+0xbc>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	697a      	ldr	r2, [r7, #20]
 800bf74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	899b      	ldrh	r3, [r3, #12]
 800bf84:	4619      	mov	r1, r3
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf8c:	4413      	add	r3, r2
 800bf8e:	4619      	mov	r1, r3
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff fdff 	bl	800bb94 <move_window>
 800bf96:	4603      	mov	r3, r0
 800bf98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf9a:	7ffb      	ldrb	r3, [r7, #31]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 809c 	bne.w	800c0da <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	899b      	ldrh	r3, [r3, #12]
 800bfac:	461a      	mov	r2, r3
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfb4:	fb02 f200 	mul.w	r2, r2, r0
 800bfb8:	1a9b      	subs	r3, r3, r2
 800bfba:	440b      	add	r3, r1
 800bfbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d003      	beq.n	800bfd0 <put_fat+0x11a>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	091b      	lsrs	r3, r3, #4
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	e00e      	b.n	800bfee <put_fat+0x138>
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	b25b      	sxtb	r3, r3
 800bfd6:	f023 030f 	bic.w	r3, r3, #15
 800bfda:	b25a      	sxtb	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	0a1b      	lsrs	r3, r3, #8
 800bfe0:	b25b      	sxtb	r3, r3
 800bfe2:	f003 030f 	and.w	r3, r3, #15
 800bfe6:	b25b      	sxtb	r3, r3
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	b25b      	sxtb	r3, r3
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2201      	movs	r2, #1
 800bff6:	70da      	strb	r2, [r3, #3]
			break;
 800bff8:	e074      	b.n	800c0e4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	899b      	ldrh	r3, [r3, #12]
 800c002:	085b      	lsrs	r3, r3, #1
 800c004:	b29b      	uxth	r3, r3
 800c006:	4619      	mov	r1, r3
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c00e:	4413      	add	r3, r2
 800c010:	4619      	mov	r1, r3
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff fdbe 	bl	800bb94 <move_window>
 800c018:	4603      	mov	r3, r0
 800c01a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c01c:	7ffb      	ldrb	r3, [r7, #31]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d15d      	bne.n	800c0de <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	8992      	ldrh	r2, [r2, #12]
 800c030:	fbb3 f0f2 	udiv	r0, r3, r2
 800c034:	fb02 f200 	mul.w	r2, r2, r0
 800c038:	1a9b      	subs	r3, r3, r2
 800c03a:	440b      	add	r3, r1
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	b292      	uxth	r2, r2
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fb31 	bl	800b6aa <st_word>
			fs->wflag = 1;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2201      	movs	r2, #1
 800c04c:	70da      	strb	r2, [r3, #3]
			break;
 800c04e:	e049      	b.n	800c0e4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	899b      	ldrh	r3, [r3, #12]
 800c058:	089b      	lsrs	r3, r3, #2
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4619      	mov	r1, r3
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	fbb3 f3f1 	udiv	r3, r3, r1
 800c064:	4413      	add	r3, r2
 800c066:	4619      	mov	r1, r3
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7ff fd93 	bl	800bb94 <move_window>
 800c06e:	4603      	mov	r3, r0
 800c070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c072:	7ffb      	ldrb	r3, [r7, #31]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d134      	bne.n	800c0e2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	8992      	ldrh	r2, [r2, #12]
 800c08c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c090:	fb02 f200 	mul.w	r2, r2, r0
 800c094:	1a9b      	subs	r3, r3, r2
 800c096:	440b      	add	r3, r1
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff fae3 	bl	800b664 <ld_dword>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0a4:	4323      	orrs	r3, r4
 800c0a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	8992      	ldrh	r2, [r2, #12]
 800c0b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0ba:	fb02 f200 	mul.w	r2, r2, r0
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	440b      	add	r3, r1
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7ff fb0b 	bl	800b6e0 <st_dword>
			fs->wflag = 1;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	70da      	strb	r2, [r3, #3]
			break;
 800c0d0:	e008      	b.n	800c0e4 <put_fat+0x22e>
		}
	}
 800c0d2:	bf00      	nop
 800c0d4:	e006      	b.n	800c0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0d6:	bf00      	nop
 800c0d8:	e004      	b.n	800c0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0da:	bf00      	nop
 800c0dc:	e002      	b.n	800c0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0de:	bf00      	nop
 800c0e0:	e000      	b.n	800c0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c0e2:	bf00      	nop
	return res;
 800c0e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3724      	adds	r7, #36	; 0x24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd90      	pop	{r4, r7, pc}

0800c0ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b088      	sub	sp, #32
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d904      	bls.n	800c114 <remove_chain+0x26>
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	429a      	cmp	r2, r3
 800c112:	d301      	bcc.n	800c118 <remove_chain+0x2a>
 800c114:	2302      	movs	r3, #2
 800c116:	e04b      	b.n	800c1b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c11e:	f04f 32ff 	mov.w	r2, #4294967295
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	69b8      	ldr	r0, [r7, #24]
 800c126:	f7ff fec6 	bl	800beb6 <put_fat>
 800c12a:	4603      	mov	r3, r0
 800c12c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c12e:	7ffb      	ldrb	r3, [r7, #31]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <remove_chain+0x4a>
 800c134:	7ffb      	ldrb	r3, [r7, #31]
 800c136:	e03b      	b.n	800c1b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff fde7 	bl	800bd0e <get_fat>
 800c140:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d031      	beq.n	800c1ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d101      	bne.n	800c152 <remove_chain+0x64>
 800c14e:	2302      	movs	r3, #2
 800c150:	e02e      	b.n	800c1b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c158:	d101      	bne.n	800c15e <remove_chain+0x70>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e028      	b.n	800c1b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c15e:	2200      	movs	r2, #0
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	69b8      	ldr	r0, [r7, #24]
 800c164:	f7ff fea7 	bl	800beb6 <put_fat>
 800c168:	4603      	mov	r3, r0
 800c16a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c16c:	7ffb      	ldrb	r3, [r7, #31]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d001      	beq.n	800c176 <remove_chain+0x88>
 800c172:	7ffb      	ldrb	r3, [r7, #31]
 800c174:	e01c      	b.n	800c1b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	695a      	ldr	r2, [r3, #20]
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	3b02      	subs	r3, #2
 800c180:	429a      	cmp	r2, r3
 800c182:	d20b      	bcs.n	800c19c <remove_chain+0xae>
			fs->free_clst++;
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	1c5a      	adds	r2, r3, #1
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	791b      	ldrb	r3, [r3, #4]
 800c192:	f043 0301 	orr.w	r3, r3, #1
 800c196:	b2da      	uxtb	r2, r3
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d3c6      	bcc.n	800c138 <remove_chain+0x4a>
 800c1aa:	e000      	b.n	800c1ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10d      	bne.n	800c1ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d004      	beq.n	800c1e4 <create_chain+0x2c>
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	69ba      	ldr	r2, [r7, #24]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d31b      	bcc.n	800c21c <create_chain+0x64>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	61bb      	str	r3, [r7, #24]
 800c1e8:	e018      	b.n	800c21c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff fd8e 	bl	800bd0e <get_fat>
 800c1f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d801      	bhi.n	800c1fe <create_chain+0x46>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e070      	b.n	800c2e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c204:	d101      	bne.n	800c20a <create_chain+0x52>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	e06a      	b.n	800c2e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	429a      	cmp	r2, r3
 800c212:	d201      	bcs.n	800c218 <create_chain+0x60>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	e063      	b.n	800c2e0 <create_chain+0x128>
		scl = clst;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	3301      	adds	r3, #1
 800c224:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d307      	bcc.n	800c240 <create_chain+0x88>
				ncl = 2;
 800c230:	2302      	movs	r3, #2
 800c232:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c234:	69fa      	ldr	r2, [r7, #28]
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d901      	bls.n	800c240 <create_chain+0x88>
 800c23c:	2300      	movs	r3, #0
 800c23e:	e04f      	b.n	800c2e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c240:	69f9      	ldr	r1, [r7, #28]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff fd63 	bl	800bd0e <get_fat>
 800c248:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00e      	beq.n	800c26e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d003      	beq.n	800c25e <create_chain+0xa6>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25c:	d101      	bne.n	800c262 <create_chain+0xaa>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	e03e      	b.n	800c2e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c262:	69fa      	ldr	r2, [r7, #28]
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	429a      	cmp	r2, r3
 800c268:	d1da      	bne.n	800c220 <create_chain+0x68>
 800c26a:	2300      	movs	r3, #0
 800c26c:	e038      	b.n	800c2e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c26e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c270:	f04f 32ff 	mov.w	r2, #4294967295
 800c274:	69f9      	ldr	r1, [r7, #28]
 800c276:	6938      	ldr	r0, [r7, #16]
 800c278:	f7ff fe1d 	bl	800beb6 <put_fat>
 800c27c:	4603      	mov	r3, r0
 800c27e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d109      	bne.n	800c29a <create_chain+0xe2>
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d006      	beq.n	800c29a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c28c:	69fa      	ldr	r2, [r7, #28]
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6938      	ldr	r0, [r7, #16]
 800c292:	f7ff fe10 	bl	800beb6 <put_fat>
 800c296:	4603      	mov	r3, r0
 800c298:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d116      	bne.n	800c2ce <create_chain+0x116>
		fs->last_clst = ncl;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	695a      	ldr	r2, [r3, #20]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	3b02      	subs	r3, #2
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d804      	bhi.n	800c2be <create_chain+0x106>
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	695b      	ldr	r3, [r3, #20]
 800c2b8:	1e5a      	subs	r2, r3, #1
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	791b      	ldrb	r3, [r3, #4]
 800c2c2:	f043 0301 	orr.w	r3, r3, #1
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	711a      	strb	r2, [r3, #4]
 800c2cc:	e007      	b.n	800c2de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d102      	bne.n	800c2da <create_chain+0x122>
 800c2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d8:	e000      	b.n	800c2dc <create_chain+0x124>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2de:	69fb      	ldr	r3, [r7, #28]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3720      	adds	r7, #32
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	899b      	ldrh	r3, [r3, #12]
 800c304:	461a      	mov	r2, r3
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	fbb3 f3f2 	udiv	r3, r3, r2
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	8952      	ldrh	r2, [r2, #10]
 800c310:	fbb3 f3f2 	udiv	r3, r3, r2
 800c314:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	1d1a      	adds	r2, r3, #4
 800c31a:	613a      	str	r2, [r7, #16]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <clmt_clust+0x42>
 800c326:	2300      	movs	r3, #0
 800c328:	e010      	b.n	800c34c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d307      	bcc.n	800c342 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	617b      	str	r3, [r7, #20]
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	3304      	adds	r3, #4
 800c33e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c340:	e7e9      	b.n	800c316 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c342:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	4413      	add	r3, r2
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	371c      	adds	r7, #28
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c36e:	d204      	bcs.n	800c37a <dir_sdi+0x22>
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	f003 031f 	and.w	r3, r3, #31
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c37a:	2302      	movs	r3, #2
 800c37c:	e071      	b.n	800c462 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d106      	bne.n	800c39e <dir_sdi+0x46>
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b02      	cmp	r3, #2
 800c396:	d902      	bls.n	800c39e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10c      	bne.n	800c3be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	8912      	ldrh	r2, [r2, #8]
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d301      	bcc.n	800c3b4 <dir_sdi+0x5c>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e056      	b.n	800c462 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	61da      	str	r2, [r3, #28]
 800c3bc:	e02d      	b.n	800c41a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	895b      	ldrh	r3, [r3, #10]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	899b      	ldrh	r3, [r3, #12]
 800c3c8:	fb03 f302 	mul.w	r3, r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3ce:	e019      	b.n	800c404 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6979      	ldr	r1, [r7, #20]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff fc9a 	bl	800bd0e <get_fat>
 800c3da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e2:	d101      	bne.n	800c3e8 <dir_sdi+0x90>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e03c      	b.n	800c462 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d904      	bls.n	800c3f8 <dir_sdi+0xa0>
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d301      	bcc.n	800c3fc <dir_sdi+0xa4>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e032      	b.n	800c462 <dir_sdi+0x10a>
			ofs -= csz;
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d2e1      	bcs.n	800c3d0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c40c:	6979      	ldr	r1, [r7, #20]
 800c40e:	6938      	ldr	r0, [r7, #16]
 800c410:	f7ff fc5e 	bl	800bcd0 <clust2sect>
 800c414:	4602      	mov	r2, r0
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <dir_sdi+0xd4>
 800c428:	2302      	movs	r3, #2
 800c42a:	e01a      	b.n	800c462 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	69da      	ldr	r2, [r3, #28]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	899b      	ldrh	r3, [r3, #12]
 800c434:	4619      	mov	r1, r3
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	fbb3 f3f1 	udiv	r3, r3, r1
 800c43c:	441a      	add	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	899b      	ldrh	r3, [r3, #12]
 800c44c:	461a      	mov	r2, r3
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	fbb3 f0f2 	udiv	r0, r3, r2
 800c454:	fb02 f200 	mul.w	r2, r2, r0
 800c458:	1a9b      	subs	r3, r3, r2
 800c45a:	18ca      	adds	r2, r1, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b086      	sub	sp, #24
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	3320      	adds	r3, #32
 800c480:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <dir_next+0x28>
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c490:	d301      	bcc.n	800c496 <dir_next+0x2c>
 800c492:	2304      	movs	r3, #4
 800c494:	e0bb      	b.n	800c60e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	899b      	ldrh	r3, [r3, #12]
 800c49a:	461a      	mov	r2, r3
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4a2:	fb02 f201 	mul.w	r2, r2, r1
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f040 809d 	bne.w	800c5e8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	1c5a      	adds	r2, r3, #1
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10b      	bne.n	800c4d8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	095b      	lsrs	r3, r3, #5
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	8912      	ldrh	r2, [r2, #8]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	f0c0 808d 	bcc.w	800c5e8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	61da      	str	r2, [r3, #28]
 800c4d4:	2304      	movs	r3, #4
 800c4d6:	e09a      	b.n	800c60e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	899b      	ldrh	r3, [r3, #12]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	8952      	ldrh	r2, [r2, #10]
 800c4e8:	3a01      	subs	r2, #1
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d17b      	bne.n	800c5e8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	f7ff fc08 	bl	800bd0e <get_fat>
 800c4fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d801      	bhi.n	800c50a <dir_next+0xa0>
 800c506:	2302      	movs	r3, #2
 800c508:	e081      	b.n	800c60e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c510:	d101      	bne.n	800c516 <dir_next+0xac>
 800c512:	2301      	movs	r3, #1
 800c514:	e07b      	b.n	800c60e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d359      	bcc.n	800c5d4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d104      	bne.n	800c530 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	61da      	str	r2, [r3, #28]
 800c52c:	2304      	movs	r3, #4
 800c52e:	e06e      	b.n	800c60e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	4619      	mov	r1, r3
 800c538:	4610      	mov	r0, r2
 800c53a:	f7ff fe3d 	bl	800c1b8 <create_chain>
 800c53e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <dir_next+0xe0>
 800c546:	2307      	movs	r3, #7
 800c548:	e061      	b.n	800c60e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d101      	bne.n	800c554 <dir_next+0xea>
 800c550:	2302      	movs	r3, #2
 800c552:	e05c      	b.n	800c60e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55a:	d101      	bne.n	800c560 <dir_next+0xf6>
 800c55c:	2301      	movs	r3, #1
 800c55e:	e056      	b.n	800c60e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff fad3 	bl	800bb0c <sync_window>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <dir_next+0x106>
 800c56c:	2301      	movs	r3, #1
 800c56e:	e04e      	b.n	800c60e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	899b      	ldrh	r3, [r3, #12]
 800c57a:	461a      	mov	r2, r3
 800c57c:	2100      	movs	r1, #0
 800c57e:	f7ff f8fc 	bl	800b77a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c582:	2300      	movs	r3, #0
 800c584:	613b      	str	r3, [r7, #16]
 800c586:	6979      	ldr	r1, [r7, #20]
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7ff fba1 	bl	800bcd0 <clust2sect>
 800c58e:	4602      	mov	r2, r0
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	631a      	str	r2, [r3, #48]	; 0x30
 800c594:	e012      	b.n	800c5bc <dir_next+0x152>
						fs->wflag = 1;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2201      	movs	r2, #1
 800c59a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fab5 	bl	800bb0c <sync_window>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d001      	beq.n	800c5ac <dir_next+0x142>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e030      	b.n	800c60e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	613b      	str	r3, [r7, #16]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b6:	1c5a      	adds	r2, r3, #1
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	631a      	str	r2, [r3, #48]	; 0x30
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	895b      	ldrh	r3, [r3, #10]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d3e6      	bcc.n	800c596 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c5da:	6979      	ldr	r1, [r7, #20]
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7ff fb77 	bl	800bcd0 <clust2sect>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	899b      	ldrh	r3, [r3, #12]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800c600:	fb02 f200 	mul.w	r2, r2, r0
 800c604:	1a9b      	subs	r3, r3, r2
 800c606:	18ca      	adds	r2, r1, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3718      	adds	r7, #24
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b086      	sub	sp, #24
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c626:	2100      	movs	r1, #0
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff fe95 	bl	800c358 <dir_sdi>
 800c62e:	4603      	mov	r3, r0
 800c630:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d12b      	bne.n	800c690 <dir_alloc+0x7a>
		n = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	69db      	ldr	r3, [r3, #28]
 800c640:	4619      	mov	r1, r3
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff faa6 	bl	800bb94 <move_window>
 800c648:	4603      	mov	r3, r0
 800c64a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c64c:	7dfb      	ldrb	r3, [r7, #23]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d11d      	bne.n	800c68e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2be5      	cmp	r3, #229	; 0xe5
 800c65a:	d004      	beq.n	800c666 <dir_alloc+0x50>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d107      	bne.n	800c676 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	3301      	adds	r3, #1
 800c66a:	613b      	str	r3, [r7, #16]
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d102      	bne.n	800c67a <dir_alloc+0x64>
 800c674:	e00c      	b.n	800c690 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c676:	2300      	movs	r3, #0
 800c678:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c67a:	2101      	movs	r1, #1
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7ff fef4 	bl	800c46a <dir_next>
 800c682:	4603      	mov	r3, r0
 800c684:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d0d7      	beq.n	800c63c <dir_alloc+0x26>
 800c68c:	e000      	b.n	800c690 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c68e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	2b04      	cmp	r3, #4
 800c694:	d101      	bne.n	800c69a <dir_alloc+0x84>
 800c696:	2307      	movs	r3, #7
 800c698:	75fb      	strb	r3, [r7, #23]
	return res;
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3718      	adds	r7, #24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	331a      	adds	r3, #26
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe ffbe 	bl	800b634 <ld_word>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d109      	bne.n	800c6d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	3314      	adds	r3, #20
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fe ffb3 	bl	800b634 <ld_word>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	041b      	lsls	r3, r3, #16
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	331a      	adds	r3, #26
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	b292      	uxth	r2, r2
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe ffd6 	bl	800b6aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	2b03      	cmp	r3, #3
 800c704:	d109      	bne.n	800c71a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	f103 0214 	add.w	r2, r3, #20
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	0c1b      	lsrs	r3, r3, #16
 800c710:	b29b      	uxth	r3, r3
 800c712:	4619      	mov	r1, r3
 800c714:	4610      	mov	r0, r2
 800c716:	f7fe ffc8 	bl	800b6aa <st_word>
	}
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b086      	sub	sp, #24
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c730:	2100      	movs	r1, #0
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff fe10 	bl	800c358 <dir_sdi>
 800c738:	4603      	mov	r3, r0
 800c73a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <dir_find+0x24>
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	e03e      	b.n	800c7c4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6938      	ldr	r0, [r7, #16]
 800c74e:	f7ff fa21 	bl	800bb94 <move_window>
 800c752:	4603      	mov	r3, r0
 800c754:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d12f      	bne.n	800c7bc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d102      	bne.n	800c770 <dir_find+0x4e>
 800c76a:	2304      	movs	r3, #4
 800c76c:	75fb      	strb	r3, [r7, #23]
 800c76e:	e028      	b.n	800c7c2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	330b      	adds	r3, #11
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	330b      	adds	r3, #11
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10a      	bne.n	800c7a8 <dir_find+0x86>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a18      	ldr	r0, [r3, #32]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3324      	adds	r3, #36	; 0x24
 800c79a:	220b      	movs	r2, #11
 800c79c:	4619      	mov	r1, r3
 800c79e:	f7ff f807 	bl	800b7b0 <mem_cmp>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7ff fe5d 	bl	800c46a <dir_next>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0c5      	beq.n	800c746 <dir_find+0x24>
 800c7ba:	e002      	b.n	800c7c2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c7bc:	bf00      	nop
 800c7be:	e000      	b.n	800c7c2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c7c0:	bf00      	nop

	return res;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c7da:	2101      	movs	r1, #1
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7ff ff1a 	bl	800c616 <dir_alloc>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d11c      	bne.n	800c826 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	68b8      	ldr	r0, [r7, #8]
 800c7f4:	f7ff f9ce 	bl	800bb94 <move_window>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d111      	bne.n	800c826 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	2220      	movs	r2, #32
 800c808:	2100      	movs	r1, #0
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe ffb5 	bl	800b77a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a18      	ldr	r0, [r3, #32]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3324      	adds	r3, #36	; 0x24
 800c818:	220b      	movs	r2, #11
 800c81a:	4619      	mov	r1, r3
 800c81c:	f7fe ff8c 	bl	800b738 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2201      	movs	r2, #1
 800c824:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c826:	7bfb      	ldrb	r3, [r7, #15]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3324      	adds	r3, #36	; 0x24
 800c844:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c846:	220b      	movs	r2, #11
 800c848:	2120      	movs	r1, #32
 800c84a:	68b8      	ldr	r0, [r7, #8]
 800c84c:	f7fe ff95 	bl	800b77a <mem_set>
	si = i = 0; ni = 8;
 800c850:	2300      	movs	r3, #0
 800c852:	613b      	str	r3, [r7, #16]
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	2308      	movs	r3, #8
 800c85a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	61fa      	str	r2, [r7, #28]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	4413      	add	r3, r2
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c86a:	7efb      	ldrb	r3, [r7, #27]
 800c86c:	2b20      	cmp	r3, #32
 800c86e:	d94e      	bls.n	800c90e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c870:	7efb      	ldrb	r3, [r7, #27]
 800c872:	2b2f      	cmp	r3, #47	; 0x2f
 800c874:	d006      	beq.n	800c884 <create_name+0x54>
 800c876:	7efb      	ldrb	r3, [r7, #27]
 800c878:	2b5c      	cmp	r3, #92	; 0x5c
 800c87a:	d110      	bne.n	800c89e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c87c:	e002      	b.n	800c884 <create_name+0x54>
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	3301      	adds	r3, #1
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	4413      	add	r3, r2
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2b2f      	cmp	r3, #47	; 0x2f
 800c88e:	d0f6      	beq.n	800c87e <create_name+0x4e>
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	4413      	add	r3, r2
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2b5c      	cmp	r3, #92	; 0x5c
 800c89a:	d0f0      	beq.n	800c87e <create_name+0x4e>
			break;
 800c89c:	e038      	b.n	800c910 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c89e:	7efb      	ldrb	r3, [r7, #27]
 800c8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8a2:	d003      	beq.n	800c8ac <create_name+0x7c>
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d30c      	bcc.n	800c8c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2b0b      	cmp	r3, #11
 800c8b0:	d002      	beq.n	800c8b8 <create_name+0x88>
 800c8b2:	7efb      	ldrb	r3, [r7, #27]
 800c8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b6:	d001      	beq.n	800c8bc <create_name+0x8c>
 800c8b8:	2306      	movs	r3, #6
 800c8ba:	e044      	b.n	800c946 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c8bc:	2308      	movs	r3, #8
 800c8be:	613b      	str	r3, [r7, #16]
 800c8c0:	230b      	movs	r3, #11
 800c8c2:	617b      	str	r3, [r7, #20]
			continue;
 800c8c4:	e022      	b.n	800c90c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c8c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	da04      	bge.n	800c8d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c8ce:	7efb      	ldrb	r3, [r7, #27]
 800c8d0:	3b80      	subs	r3, #128	; 0x80
 800c8d2:	4a1f      	ldr	r2, [pc, #124]	; (800c950 <create_name+0x120>)
 800c8d4:	5cd3      	ldrb	r3, [r2, r3]
 800c8d6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c8d8:	7efb      	ldrb	r3, [r7, #27]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	481d      	ldr	r0, [pc, #116]	; (800c954 <create_name+0x124>)
 800c8de:	f7fe ff8e 	bl	800b7fe <chk_chr>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <create_name+0xbc>
 800c8e8:	2306      	movs	r3, #6
 800c8ea:	e02c      	b.n	800c946 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c8ec:	7efb      	ldrb	r3, [r7, #27]
 800c8ee:	2b60      	cmp	r3, #96	; 0x60
 800c8f0:	d905      	bls.n	800c8fe <create_name+0xce>
 800c8f2:	7efb      	ldrb	r3, [r7, #27]
 800c8f4:	2b7a      	cmp	r3, #122	; 0x7a
 800c8f6:	d802      	bhi.n	800c8fe <create_name+0xce>
 800c8f8:	7efb      	ldrb	r3, [r7, #27]
 800c8fa:	3b20      	subs	r3, #32
 800c8fc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	613a      	str	r2, [r7, #16]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	4413      	add	r3, r2
 800c908:	7efa      	ldrb	r2, [r7, #27]
 800c90a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c90c:	e7a6      	b.n	800c85c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c90e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	441a      	add	r2, r3
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <create_name+0xf4>
 800c920:	2306      	movs	r3, #6
 800c922:	e010      	b.n	800c946 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2be5      	cmp	r3, #229	; 0xe5
 800c92a:	d102      	bne.n	800c932 <create_name+0x102>
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2205      	movs	r2, #5
 800c930:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c932:	7efb      	ldrb	r3, [r7, #27]
 800c934:	2b20      	cmp	r3, #32
 800c936:	d801      	bhi.n	800c93c <create_name+0x10c>
 800c938:	2204      	movs	r2, #4
 800c93a:	e000      	b.n	800c93e <create_name+0x10e>
 800c93c:	2200      	movs	r2, #0
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	330b      	adds	r3, #11
 800c942:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c944:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c946:	4618      	mov	r0, r3
 800c948:	3720      	adds	r7, #32
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	0800e82c 	.word	0x0800e82c
 800c954:	0800e754 	.word	0x0800e754

0800c958 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c96c:	e002      	b.n	800c974 <follow_path+0x1c>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2b2f      	cmp	r3, #47	; 0x2f
 800c97a:	d0f8      	beq.n	800c96e <follow_path+0x16>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b5c      	cmp	r3, #92	; 0x5c
 800c982:	d0f4      	beq.n	800c96e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	2200      	movs	r2, #0
 800c988:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2b1f      	cmp	r3, #31
 800c990:	d80a      	bhi.n	800c9a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2280      	movs	r2, #128	; 0x80
 800c996:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c99a:	2100      	movs	r1, #0
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff fcdb 	bl	800c358 <dir_sdi>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	75fb      	strb	r3, [r7, #23]
 800c9a6:	e048      	b.n	800ca3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff ff3f 	bl	800c830 <create_name>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d139      	bne.n	800ca30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff feb0 	bl	800c722 <dir_find>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c9cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00a      	beq.n	800c9ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	2b04      	cmp	r3, #4
 800c9d8:	d12c      	bne.n	800ca34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c9da:	7afb      	ldrb	r3, [r7, #11]
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d127      	bne.n	800ca34 <follow_path+0xdc>
 800c9e4:	2305      	movs	r3, #5
 800c9e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c9e8:	e024      	b.n	800ca34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9ea:	7afb      	ldrb	r3, [r7, #11]
 800c9ec:	f003 0304 	and.w	r3, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d121      	bne.n	800ca38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	799b      	ldrb	r3, [r3, #6]
 800c9f8:	f003 0310 	and.w	r3, r3, #16
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ca00:	2305      	movs	r3, #5
 800ca02:	75fb      	strb	r3, [r7, #23]
 800ca04:	e019      	b.n	800ca3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	8992      	ldrh	r2, [r2, #12]
 800ca14:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca18:	fb02 f200 	mul.w	r2, r2, r0
 800ca1c:	1a9b      	subs	r3, r3, r2
 800ca1e:	440b      	add	r3, r1
 800ca20:	4619      	mov	r1, r3
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f7ff fe3e 	bl	800c6a4 <ld_clust>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca2e:	e7bb      	b.n	800c9a8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ca30:	bf00      	nop
 800ca32:	e002      	b.n	800ca3a <follow_path+0xe2>
				break;
 800ca34:	bf00      	nop
 800ca36:	e000      	b.n	800ca3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ca38:	bf00      	nop
			}
		}
	}

	return res;
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ca4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d031      	beq.n	800cabe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	e002      	b.n	800ca68 <get_ldnumber+0x24>
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	3301      	adds	r3, #1
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b20      	cmp	r3, #32
 800ca6e:	d903      	bls.n	800ca78 <get_ldnumber+0x34>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2b3a      	cmp	r3, #58	; 0x3a
 800ca76:	d1f4      	bne.n	800ca62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	2b3a      	cmp	r3, #58	; 0x3a
 800ca7e:	d11c      	bne.n	800caba <get_ldnumber+0x76>
			tp = *path;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	60fa      	str	r2, [r7, #12]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	3b30      	subs	r3, #48	; 0x30
 800ca90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2b09      	cmp	r3, #9
 800ca96:	d80e      	bhi.n	800cab6 <get_ldnumber+0x72>
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d10a      	bne.n	800cab6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d107      	bne.n	800cab6 <get_ldnumber+0x72>
					vol = (int)i;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	3301      	adds	r3, #1
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	e002      	b.n	800cac0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800caba:	2300      	movs	r3, #0
 800cabc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cabe:	693b      	ldr	r3, [r7, #16]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	371c      	adds	r7, #28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	70da      	strb	r2, [r3, #3]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f04f 32ff 	mov.w	r2, #4294967295
 800cae2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff f854 	bl	800bb94 <move_window>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <check_fs+0x2a>
 800caf2:	2304      	movs	r3, #4
 800caf4:	e038      	b.n	800cb68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3334      	adds	r3, #52	; 0x34
 800cafa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe fd98 	bl	800b634 <ld_word>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d001      	beq.n	800cb14 <check_fs+0x48>
 800cb10:	2303      	movs	r3, #3
 800cb12:	e029      	b.n	800cb68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb1a:	2be9      	cmp	r3, #233	; 0xe9
 800cb1c:	d009      	beq.n	800cb32 <check_fs+0x66>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb24:	2beb      	cmp	r3, #235	; 0xeb
 800cb26:	d11e      	bne.n	800cb66 <check_fs+0x9a>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cb2e:	2b90      	cmp	r3, #144	; 0x90
 800cb30:	d119      	bne.n	800cb66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3334      	adds	r3, #52	; 0x34
 800cb36:	3336      	adds	r3, #54	; 0x36
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fd93 	bl	800b664 <ld_dword>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb44:	4a0a      	ldr	r2, [pc, #40]	; (800cb70 <check_fs+0xa4>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d101      	bne.n	800cb4e <check_fs+0x82>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e00c      	b.n	800cb68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3334      	adds	r3, #52	; 0x34
 800cb52:	3352      	adds	r3, #82	; 0x52
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fd85 	bl	800b664 <ld_dword>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	4a05      	ldr	r2, [pc, #20]	; (800cb74 <check_fs+0xa8>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d101      	bne.n	800cb66 <check_fs+0x9a>
 800cb62:	2300      	movs	r3, #0
 800cb64:	e000      	b.n	800cb68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cb66:	2302      	movs	r3, #2
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	00544146 	.word	0x00544146
 800cb74:	33544146 	.word	0x33544146

0800cb78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b096      	sub	sp, #88	; 0x58
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	4613      	mov	r3, r2
 800cb84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff ff59 	bl	800ca44 <get_ldnumber>
 800cb92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	da01      	bge.n	800cb9e <find_volume+0x26>
 800cb9a:	230b      	movs	r3, #11
 800cb9c:	e265      	b.n	800d06a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb9e:	4ab0      	ldr	r2, [pc, #704]	; (800ce60 <find_volume+0x2e8>)
 800cba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <find_volume+0x3a>
 800cbae:	230c      	movs	r3, #12
 800cbb0:	e25b      	b.n	800d06a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	f023 0301 	bic.w	r3, r3, #1
 800cbbe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01a      	beq.n	800cbfe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	785b      	ldrb	r3, [r3, #1]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fe fc93 	bl	800b4f8 <disk_status>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cbd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10c      	bne.n	800cbfe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d007      	beq.n	800cbfa <find_volume+0x82>
 800cbea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbee:	f003 0304 	and.w	r3, r3, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cbf6:	230a      	movs	r3, #10
 800cbf8:	e237      	b.n	800d06a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e235      	b.n	800d06a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	2200      	movs	r2, #0
 800cc02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	785b      	ldrb	r3, [r3, #1]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe fc8b 	bl	800b52c <disk_initialize>
 800cc16:	4603      	mov	r3, r0
 800cc18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cc1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc20:	f003 0301 	and.w	r3, r3, #1
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e21e      	b.n	800d06a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d007      	beq.n	800cc42 <find_volume+0xca>
 800cc32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cc3e:	230a      	movs	r3, #10
 800cc40:	e213      	b.n	800d06a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc44:	7858      	ldrb	r0, [r3, #1]
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	330c      	adds	r3, #12
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	2102      	movs	r1, #2
 800cc4e:	f7fe fcd3 	bl	800b5f8 <disk_ioctl>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <find_volume+0xe4>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e206      	b.n	800d06a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	899b      	ldrh	r3, [r3, #12]
 800cc60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc64:	d80d      	bhi.n	800cc82 <find_volume+0x10a>
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	899b      	ldrh	r3, [r3, #12]
 800cc6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc6e:	d308      	bcc.n	800cc82 <find_volume+0x10a>
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	899b      	ldrh	r3, [r3, #12]
 800cc74:	461a      	mov	r2, r3
 800cc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc78:	899b      	ldrh	r3, [r3, #12]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <find_volume+0x10e>
 800cc82:	2301      	movs	r3, #1
 800cc84:	e1f1      	b.n	800d06a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cc8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc8e:	f7ff ff1d 	bl	800cacc <check_fs>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d14b      	bne.n	800cd38 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cca0:	2300      	movs	r3, #0
 800cca2:	643b      	str	r3, [r7, #64]	; 0x40
 800cca4:	e01f      	b.n	800cce6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ccb4:	4413      	add	r3, r2
 800ccb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	3304      	adds	r3, #4
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d006      	beq.n	800ccd0 <find_volume+0x158>
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fe fccc 	bl	800b664 <ld_dword>
 800cccc:	4602      	mov	r2, r0
 800ccce:	e000      	b.n	800ccd2 <find_volume+0x15a>
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ccda:	440b      	add	r3, r1
 800ccdc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce2:	3301      	adds	r3, #1
 800cce4:	643b      	str	r3, [r7, #64]	; 0x40
 800cce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce8:	2b03      	cmp	r3, #3
 800ccea:	d9dc      	bls.n	800cca6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ccec:	2300      	movs	r3, #0
 800ccee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ccf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d002      	beq.n	800ccfc <find_volume+0x184>
 800ccf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ccfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cd04:	4413      	add	r3, r2
 800cd06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cd0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d005      	beq.n	800cd1e <find_volume+0x1a6>
 800cd12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd16:	f7ff fed9 	bl	800cacc <check_fs>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	e000      	b.n	800cd20 <find_volume+0x1a8>
 800cd1e:	2303      	movs	r3, #3
 800cd20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cd24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d905      	bls.n	800cd38 <find_volume+0x1c0>
 800cd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd2e:	3301      	adds	r3, #1
 800cd30:	643b      	str	r3, [r7, #64]	; 0x40
 800cd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	d9e1      	bls.n	800ccfc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cd38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	d101      	bne.n	800cd44 <find_volume+0x1cc>
 800cd40:	2301      	movs	r3, #1
 800cd42:	e192      	b.n	800d06a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d901      	bls.n	800cd50 <find_volume+0x1d8>
 800cd4c:	230d      	movs	r3, #13
 800cd4e:	e18c      	b.n	800d06a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	3334      	adds	r3, #52	; 0x34
 800cd54:	330b      	adds	r3, #11
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fc6c 	bl	800b634 <ld_word>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d001      	beq.n	800cd6c <find_volume+0x1f4>
 800cd68:	230d      	movs	r3, #13
 800cd6a:	e17e      	b.n	800d06a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	3334      	adds	r3, #52	; 0x34
 800cd70:	3316      	adds	r3, #22
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe fc5e 	bl	800b634 <ld_word>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <find_volume+0x218>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	3334      	adds	r3, #52	; 0x34
 800cd86:	3324      	adds	r3, #36	; 0x24
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fe fc6b 	bl	800b664 <ld_dword>
 800cd8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd94:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	789b      	ldrb	r3, [r3, #2]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d005      	beq.n	800cdb4 <find_volume+0x23c>
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	789b      	ldrb	r3, [r3, #2]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d001      	beq.n	800cdb4 <find_volume+0x23c>
 800cdb0:	230d      	movs	r3, #13
 800cdb2:	e15a      	b.n	800d06a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	789b      	ldrb	r3, [r3, #2]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdbc:	fb02 f303 	mul.w	r3, r2, r3
 800cdc0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	895b      	ldrh	r3, [r3, #10]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d008      	beq.n	800cde8 <find_volume+0x270>
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	895b      	ldrh	r3, [r3, #10]
 800cdda:	461a      	mov	r2, r3
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	895b      	ldrh	r3, [r3, #10]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	4013      	ands	r3, r2
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <find_volume+0x274>
 800cde8:	230d      	movs	r3, #13
 800cdea:	e13e      	b.n	800d06a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	3334      	adds	r3, #52	; 0x34
 800cdf0:	3311      	adds	r3, #17
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe fc1e 	bl	800b634 <ld_word>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	891b      	ldrh	r3, [r3, #8]
 800ce04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce06:	8992      	ldrh	r2, [r2, #12]
 800ce08:	0952      	lsrs	r2, r2, #5
 800ce0a:	b292      	uxth	r2, r2
 800ce0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce10:	fb02 f201 	mul.w	r2, r2, r1
 800ce14:	1a9b      	subs	r3, r3, r2
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <find_volume+0x2a8>
 800ce1c:	230d      	movs	r3, #13
 800ce1e:	e124      	b.n	800d06a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	3334      	adds	r3, #52	; 0x34
 800ce24:	3313      	adds	r3, #19
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fc04 	bl	800b634 <ld_word>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <find_volume+0x2cc>
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	3334      	adds	r3, #52	; 0x34
 800ce3a:	3320      	adds	r3, #32
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe fc11 	bl	800b664 <ld_dword>
 800ce42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	3334      	adds	r3, #52	; 0x34
 800ce48:	330e      	adds	r3, #14
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fe fbf2 	bl	800b634 <ld_word>
 800ce50:	4603      	mov	r3, r0
 800ce52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d104      	bne.n	800ce64 <find_volume+0x2ec>
 800ce5a:	230d      	movs	r3, #13
 800ce5c:	e105      	b.n	800d06a <find_volume+0x4f2>
 800ce5e:	bf00      	nop
 800ce60:	2000214c 	.word	0x2000214c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce68:	4413      	add	r3, r2
 800ce6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce6c:	8911      	ldrh	r1, [r2, #8]
 800ce6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce70:	8992      	ldrh	r2, [r2, #12]
 800ce72:	0952      	lsrs	r2, r2, #5
 800ce74:	b292      	uxth	r2, r2
 800ce76:	fbb1 f2f2 	udiv	r2, r1, r2
 800ce7a:	b292      	uxth	r2, r2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d201      	bcs.n	800ce8c <find_volume+0x314>
 800ce88:	230d      	movs	r3, #13
 800ce8a:	e0ee      	b.n	800d06a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce94:	8952      	ldrh	r2, [r2, #10]
 800ce96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <find_volume+0x32e>
 800cea2:	230d      	movs	r3, #13
 800cea4:	e0e1      	b.n	800d06a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800cea6:	2303      	movs	r3, #3
 800cea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ceac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d802      	bhi.n	800cebc <find_volume+0x344>
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d802      	bhi.n	800cecc <find_volume+0x354>
 800cec6:	2301      	movs	r3, #1
 800cec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	1c9a      	adds	r2, r3, #2
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ced8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ceda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cedc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cede:	441a      	add	r2, r3
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cee4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee8:	441a      	add	r2, r3
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ceee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	d11e      	bne.n	800cf34 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef8:	3334      	adds	r3, #52	; 0x34
 800cefa:	332a      	adds	r3, #42	; 0x2a
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe fb99 	bl	800b634 <ld_word>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <find_volume+0x394>
 800cf08:	230d      	movs	r3, #13
 800cf0a:	e0ae      	b.n	800d06a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	891b      	ldrh	r3, [r3, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <find_volume+0x3a0>
 800cf14:	230d      	movs	r3, #13
 800cf16:	e0a8      	b.n	800d06a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1a:	3334      	adds	r3, #52	; 0x34
 800cf1c:	332c      	adds	r3, #44	; 0x2c
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fba0 	bl	800b664 <ld_dword>
 800cf24:	4602      	mov	r2, r0
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	647b      	str	r3, [r7, #68]	; 0x44
 800cf32:	e01f      	b.n	800cf74 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	891b      	ldrh	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <find_volume+0x3c8>
 800cf3c:	230d      	movs	r3, #13
 800cf3e:	e094      	b.n	800d06a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf46:	441a      	add	r2, r3
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d103      	bne.n	800cf5c <find_volume+0x3e4>
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	e00a      	b.n	800cf72 <find_volume+0x3fa>
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	699a      	ldr	r2, [r3, #24]
 800cf60:	4613      	mov	r3, r2
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	4413      	add	r3, r2
 800cf66:	085a      	lsrs	r2, r3, #1
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	699b      	ldr	r3, [r3, #24]
 800cf6c:	f003 0301 	and.w	r3, r3, #1
 800cf70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf72:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	69da      	ldr	r2, [r3, #28]
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	899b      	ldrh	r3, [r3, #12]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf80:	440b      	add	r3, r1
 800cf82:	3b01      	subs	r3, #1
 800cf84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf86:	8989      	ldrh	r1, [r1, #12]
 800cf88:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d201      	bcs.n	800cf94 <find_volume+0x41c>
 800cf90:	230d      	movs	r3, #13
 800cf92:	e06a      	b.n	800d06a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9a:	615a      	str	r2, [r3, #20]
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	695a      	ldr	r2, [r3, #20]
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	2280      	movs	r2, #128	; 0x80
 800cfa8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cfaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d149      	bne.n	800d046 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	3334      	adds	r3, #52	; 0x34
 800cfb6:	3330      	adds	r3, #48	; 0x30
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fb3b 	bl	800b634 <ld_word>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d140      	bne.n	800d046 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cfc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfcc:	f7fe fde2 	bl	800bb94 <move_window>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d137      	bne.n	800d046 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd8:	2200      	movs	r2, #0
 800cfda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	3334      	adds	r3, #52	; 0x34
 800cfe0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fb25 	bl	800b634 <ld_word>
 800cfea:	4603      	mov	r3, r0
 800cfec:	461a      	mov	r2, r3
 800cfee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d127      	bne.n	800d046 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	3334      	adds	r3, #52	; 0x34
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fb32 	bl	800b664 <ld_dword>
 800d000:	4603      	mov	r3, r0
 800d002:	4a1c      	ldr	r2, [pc, #112]	; (800d074 <find_volume+0x4fc>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d11e      	bne.n	800d046 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00a:	3334      	adds	r3, #52	; 0x34
 800d00c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe fb27 	bl	800b664 <ld_dword>
 800d016:	4603      	mov	r3, r0
 800d018:	4a17      	ldr	r2, [pc, #92]	; (800d078 <find_volume+0x500>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d113      	bne.n	800d046 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	3334      	adds	r3, #52	; 0x34
 800d022:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe fb1c 	bl	800b664 <ld_dword>
 800d02c:	4602      	mov	r2, r0
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	3334      	adds	r3, #52	; 0x34
 800d036:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fb12 	bl	800b664 <ld_dword>
 800d040:	4602      	mov	r2, r0
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d048:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d04c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d04e:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <find_volume+0x504>)
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	b29a      	uxth	r2, r3
 800d056:	4b09      	ldr	r3, [pc, #36]	; (800d07c <find_volume+0x504>)
 800d058:	801a      	strh	r2, [r3, #0]
 800d05a:	4b08      	ldr	r3, [pc, #32]	; (800d07c <find_volume+0x504>)
 800d05c:	881a      	ldrh	r2, [r3, #0]
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d064:	f7fe fd2e 	bl	800bac4 <clear_lock>
#endif
	return FR_OK;
 800d068:	2300      	movs	r3, #0
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3758      	adds	r7, #88	; 0x58
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	41615252 	.word	0x41615252
 800d078:	61417272 	.word	0x61417272
 800d07c:	20002150 	.word	0x20002150

0800d080 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d08a:	2309      	movs	r3, #9
 800d08c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d01c      	beq.n	800d0ce <validate+0x4e>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d018      	beq.n	800d0ce <validate+0x4e>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d013      	beq.n	800d0ce <validate+0x4e>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	889a      	ldrh	r2, [r3, #4]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	88db      	ldrh	r3, [r3, #6]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d10c      	bne.n	800d0ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	785b      	ldrb	r3, [r3, #1]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fa1c 	bl	800b4f8 <disk_status>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <validate+0x4e>
			res = FR_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d102      	bne.n	800d0da <validate+0x5a>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	e000      	b.n	800d0dc <validate+0x5c>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	683a      	ldr	r2, [r7, #0]
 800d0de:	6013      	str	r3, [r2, #0]
	return res;
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0fe:	f107 0310 	add.w	r3, r7, #16
 800d102:	4618      	mov	r0, r3
 800d104:	f7ff fc9e 	bl	800ca44 <get_ldnumber>
 800d108:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	da01      	bge.n	800d114 <f_mount+0x28>
 800d110:	230b      	movs	r3, #11
 800d112:	e02b      	b.n	800d16c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d114:	4a17      	ldr	r2, [pc, #92]	; (800d174 <f_mount+0x88>)
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d005      	beq.n	800d130 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d124:	69b8      	ldr	r0, [r7, #24]
 800d126:	f7fe fccd 	bl	800bac4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	2200      	movs	r2, #0
 800d12e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	490d      	ldr	r1, [pc, #52]	; (800d174 <f_mount+0x88>)
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <f_mount+0x66>
 800d14c:	79fb      	ldrb	r3, [r7, #7]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d001      	beq.n	800d156 <f_mount+0x6a>
 800d152:	2300      	movs	r3, #0
 800d154:	e00a      	b.n	800d16c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d156:	f107 010c 	add.w	r1, r7, #12
 800d15a:	f107 0308 	add.w	r3, r7, #8
 800d15e:	2200      	movs	r2, #0
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff fd09 	bl	800cb78 <find_volume>
 800d166:	4603      	mov	r3, r0
 800d168:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3720      	adds	r7, #32
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	2000214c 	.word	0x2000214c

0800d178 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b098      	sub	sp, #96	; 0x60
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	4613      	mov	r3, r2
 800d184:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <f_open+0x18>
 800d18c:	2309      	movs	r3, #9
 800d18e:	e1bb      	b.n	800d508 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d196:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d198:	79fa      	ldrb	r2, [r7, #7]
 800d19a:	f107 0110 	add.w	r1, r7, #16
 800d19e:	f107 0308 	add.w	r3, r7, #8
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff fce8 	bl	800cb78 <find_volume>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f040 819f 	bne.w	800d4f6 <f_open+0x37e>
		dj.obj.fs = fs;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	f107 0314 	add.w	r3, r7, #20
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7ff fbc7 	bl	800c958 <follow_path>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11a      	bne.n	800d20e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d1d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1dc:	b25b      	sxtb	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	da03      	bge.n	800d1ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800d1e2:	2306      	movs	r3, #6
 800d1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d1e8:	e011      	b.n	800d20e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	f023 0301 	bic.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	bf14      	ite	ne
 800d1f4:	2301      	movne	r3, #1
 800d1f6:	2300      	moveq	r3, #0
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f107 0314 	add.w	r3, r7, #20
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe fb16 	bl	800b834 <chk_lock>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	f003 031c 	and.w	r3, r3, #28
 800d214:	2b00      	cmp	r3, #0
 800d216:	d07f      	beq.n	800d318 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d017      	beq.n	800d250 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d224:	2b04      	cmp	r3, #4
 800d226:	d10e      	bne.n	800d246 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d228:	f7fe fb60 	bl	800b8ec <enq_lock>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d006      	beq.n	800d240 <f_open+0xc8>
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff fac8 	bl	800c7cc <dir_register>
 800d23c:	4603      	mov	r3, r0
 800d23e:	e000      	b.n	800d242 <f_open+0xca>
 800d240:	2312      	movs	r3, #18
 800d242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d246:	79fb      	ldrb	r3, [r7, #7]
 800d248:	f043 0308 	orr.w	r3, r3, #8
 800d24c:	71fb      	strb	r3, [r7, #7]
 800d24e:	e010      	b.n	800d272 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d250:	7ebb      	ldrb	r3, [r7, #26]
 800d252:	f003 0311 	and.w	r3, r3, #17
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <f_open+0xea>
					res = FR_DENIED;
 800d25a:	2307      	movs	r3, #7
 800d25c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d260:	e007      	b.n	800d272 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <f_open+0xfa>
 800d26c:	2308      	movs	r3, #8
 800d26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d276:	2b00      	cmp	r3, #0
 800d278:	d168      	bne.n	800d34c <f_open+0x1d4>
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	f003 0308 	and.w	r3, r3, #8
 800d280:	2b00      	cmp	r3, #0
 800d282:	d063      	beq.n	800d34c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d284:	f7fb f93c 	bl	8008500 <get_fattime>
 800d288:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28c:	330e      	adds	r3, #14
 800d28e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fa25 	bl	800b6e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d298:	3316      	adds	r3, #22
 800d29a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fa1f 	bl	800b6e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	330b      	adds	r3, #11
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff f9f7 	bl	800c6a4 <ld_clust>
 800d2b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff fa0f 	bl	800c6e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	331c      	adds	r3, #28
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fe fa08 	bl	800b6e0 <st_dword>
					fs->wflag = 1;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d037      	beq.n	800d34c <f_open+0x1d4>
						dw = fs->winsect;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d2e2:	f107 0314 	add.w	r3, r7, #20
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe feff 	bl	800c0ee <remove_chain>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d126      	bne.n	800d34c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe fc46 	bl	800bb94 <move_window>
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d312:	3a01      	subs	r2, #1
 800d314:	611a      	str	r2, [r3, #16]
 800d316:	e019      	b.n	800d34c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d115      	bne.n	800d34c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d320:	7ebb      	ldrb	r3, [r7, #26]
 800d322:	f003 0310 	and.w	r3, r3, #16
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d32a:	2304      	movs	r3, #4
 800d32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d330:	e00c      	b.n	800d34c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d332:	79fb      	ldrb	r3, [r7, #7]
 800d334:	f003 0302 	and.w	r3, r3, #2
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d007      	beq.n	800d34c <f_open+0x1d4>
 800d33c:	7ebb      	ldrb	r3, [r7, #26]
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <f_open+0x1d4>
						res = FR_DENIED;
 800d346:	2307      	movs	r3, #7
 800d348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d350:	2b00      	cmp	r3, #0
 800d352:	d128      	bne.n	800d3a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d354:	79fb      	ldrb	r3, [r7, #7]
 800d356:	f003 0308 	and.w	r3, r3, #8
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d364:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	f023 0301 	bic.w	r3, r3, #1
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	bf14      	ite	ne
 800d37e:	2301      	movne	r3, #1
 800d380:	2300      	moveq	r3, #0
 800d382:	b2db      	uxtb	r3, r3
 800d384:	461a      	mov	r2, r3
 800d386:	f107 0314 	add.w	r3, r7, #20
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fe facf 	bl	800b930 <inc_lock>
 800d392:	4602      	mov	r2, r0
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	691b      	ldr	r3, [r3, #16]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d102      	bne.n	800d3a6 <f_open+0x22e>
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 80a3 	bne.w	800d4f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff f974 	bl	800c6a4 <ld_clust>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	331c      	adds	r3, #28
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe f94c 	bl	800b664 <ld_dword>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	88da      	ldrh	r2, [r3, #6]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	79fa      	ldrb	r2, [r7, #7]
 800d3ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3330      	adds	r3, #48	; 0x30
 800d402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d406:	2100      	movs	r1, #0
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe f9b6 	bl	800b77a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	f003 0320 	and.w	r3, r3, #32
 800d414:	2b00      	cmp	r3, #0
 800d416:	d06e      	beq.n	800d4f6 <f_open+0x37e>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d06a      	beq.n	800d4f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	68da      	ldr	r2, [r3, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	895b      	ldrh	r3, [r3, #10]
 800d42c:	461a      	mov	r2, r3
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	899b      	ldrh	r3, [r3, #12]
 800d432:	fb03 f302 	mul.w	r3, r3, r2
 800d436:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	657b      	str	r3, [r7, #84]	; 0x54
 800d444:	e016      	b.n	800d474 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fc5f 	bl	800bd0e <get_fat>
 800d450:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d454:	2b01      	cmp	r3, #1
 800d456:	d802      	bhi.n	800d45e <f_open+0x2e6>
 800d458:	2302      	movs	r3, #2
 800d45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d464:	d102      	bne.n	800d46c <f_open+0x2f4>
 800d466:	2301      	movs	r3, #1
 800d468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d46c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	657b      	str	r3, [r7, #84]	; 0x54
 800d474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d103      	bne.n	800d484 <f_open+0x30c>
 800d47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d480:	429a      	cmp	r2, r3
 800d482:	d8e0      	bhi.n	800d446 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d488:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d131      	bne.n	800d4f6 <f_open+0x37e>
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	461a      	mov	r2, r3
 800d498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d49a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d49e:	fb02 f201 	mul.w	r2, r2, r1
 800d4a2:	1a9b      	subs	r3, r3, r2
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d026      	beq.n	800d4f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fc0f 	bl	800bcd0 <clust2sect>
 800d4b2:	6478      	str	r0, [r7, #68]	; 0x44
 800d4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <f_open+0x34a>
						res = FR_INT_ERR;
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4c0:	e019      	b.n	800d4f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	899b      	ldrh	r3, [r3, #12]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d0:	441a      	add	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	7858      	ldrb	r0, [r3, #1]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a1a      	ldr	r2, [r3, #32]
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f7fe f847 	bl	800b578 <disk_read>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <f_open+0x37e>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d4f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <f_open+0x38c>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3760      	adds	r7, #96	; 0x60
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08e      	sub	sp, #56	; 0x38
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2200      	movs	r2, #0
 800d526:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f107 0214 	add.w	r2, r7, #20
 800d52e:	4611      	mov	r1, r2
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fda5 	bl	800d080 <validate>
 800d536:	4603      	mov	r3, r0
 800d538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d53c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d540:	2b00      	cmp	r3, #0
 800d542:	d107      	bne.n	800d554 <f_read+0x44>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	7d5b      	ldrb	r3, [r3, #21]
 800d548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d54c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <f_read+0x4a>
 800d554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d558:	e135      	b.n	800d7c6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	7d1b      	ldrb	r3, [r3, #20]
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	d101      	bne.n	800d56a <f_read+0x5a>
 800d566:	2307      	movs	r3, #7
 800d568:	e12d      	b.n	800d7c6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	68da      	ldr	r2, [r3, #12]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f240 811e 	bls.w	800d7bc <f_read+0x2ac>
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d584:	e11a      	b.n	800d7bc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	8992      	ldrh	r2, [r2, #12]
 800d58e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d592:	fb02 f201 	mul.w	r2, r2, r1
 800d596:	1a9b      	subs	r3, r3, r2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f040 80d5 	bne.w	800d748 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	699b      	ldr	r3, [r3, #24]
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	8992      	ldrh	r2, [r2, #12]
 800d5a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	8952      	ldrh	r2, [r2, #10]
 800d5ae:	3a01      	subs	r2, #1
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d12f      	bne.n	800d61a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d103      	bne.n	800d5ca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	633b      	str	r3, [r7, #48]	; 0x30
 800d5c8:	e013      	b.n	800d5f2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d007      	beq.n	800d5e2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f7fe fe85 	bl	800c2e8 <clmt_clust>
 800d5de:	6338      	str	r0, [r7, #48]	; 0x30
 800d5e0:	e007      	b.n	800d5f2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	69db      	ldr	r3, [r3, #28]
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	f7fe fb8f 	bl	800bd0e <get_fat>
 800d5f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d804      	bhi.n	800d602 <f_read+0xf2>
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	755a      	strb	r2, [r3, #21]
 800d5fe:	2302      	movs	r3, #2
 800d600:	e0e1      	b.n	800d7c6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d104      	bne.n	800d614 <f_read+0x104>
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2201      	movs	r2, #1
 800d60e:	755a      	strb	r2, [r3, #21]
 800d610:	2301      	movs	r3, #1
 800d612:	e0d8      	b.n	800d7c6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d618:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	69db      	ldr	r3, [r3, #28]
 800d620:	4619      	mov	r1, r3
 800d622:	4610      	mov	r0, r2
 800d624:	f7fe fb54 	bl	800bcd0 <clust2sect>
 800d628:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d104      	bne.n	800d63a <f_read+0x12a>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2202      	movs	r2, #2
 800d634:	755a      	strb	r2, [r3, #21]
 800d636:	2302      	movs	r3, #2
 800d638:	e0c5      	b.n	800d7c6 <f_read+0x2b6>
			sect += csect;
 800d63a:	69ba      	ldr	r2, [r7, #24]
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	4413      	add	r3, r2
 800d640:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	899b      	ldrh	r3, [r3, #12]
 800d646:	461a      	mov	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d64e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	2b00      	cmp	r3, #0
 800d654:	d041      	beq.n	800d6da <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d656:	69fa      	ldr	r2, [r7, #28]
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	4413      	add	r3, r2
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	8952      	ldrh	r2, [r2, #10]
 800d660:	4293      	cmp	r3, r2
 800d662:	d905      	bls.n	800d670 <f_read+0x160>
					cc = fs->csize - csect;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	895b      	ldrh	r3, [r3, #10]
 800d668:	461a      	mov	r2, r3
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	7858      	ldrb	r0, [r3, #1]
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d67a:	f7fd ff7d 	bl	800b578 <disk_read>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <f_read+0x17e>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2201      	movs	r2, #1
 800d688:	755a      	strb	r2, [r3, #21]
 800d68a:	2301      	movs	r3, #1
 800d68c:	e09b      	b.n	800d7c6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	7d1b      	ldrb	r3, [r3, #20]
 800d692:	b25b      	sxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	da18      	bge.n	800d6ca <f_read+0x1ba>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6a1a      	ldr	r2, [r3, #32]
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d911      	bls.n	800d6ca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a1a      	ldr	r2, [r3, #32]
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	1ad3      	subs	r3, r2, r3
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	8992      	ldrh	r2, [r2, #12]
 800d6b2:	fb02 f303 	mul.w	r3, r2, r3
 800d6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b8:	18d0      	adds	r0, r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	899b      	ldrh	r3, [r3, #12]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	f7fe f837 	bl	800b738 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	899b      	ldrh	r3, [r3, #12]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	fb02 f303 	mul.w	r3, r2, r3
 800d6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d6d8:	e05c      	b.n	800d794 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	69ba      	ldr	r2, [r7, #24]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d02e      	beq.n	800d742 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	7d1b      	ldrb	r3, [r3, #20]
 800d6e8:	b25b      	sxtb	r3, r3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	da18      	bge.n	800d720 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	7858      	ldrb	r0, [r3, #1]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6a1a      	ldr	r2, [r3, #32]
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f7fd ff5b 	bl	800b5b8 <disk_write>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <f_read+0x202>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2201      	movs	r2, #1
 800d70c:	755a      	strb	r2, [r3, #21]
 800d70e:	2301      	movs	r3, #1
 800d710:	e059      	b.n	800d7c6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	7d1b      	ldrb	r3, [r3, #20]
 800d716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	7858      	ldrb	r0, [r3, #1]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d72a:	2301      	movs	r3, #1
 800d72c:	69ba      	ldr	r2, [r7, #24]
 800d72e:	f7fd ff23 	bl	800b578 <disk_read>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d004      	beq.n	800d742 <f_read+0x232>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2201      	movs	r2, #1
 800d73c:	755a      	strb	r2, [r3, #21]
 800d73e:	2301      	movs	r3, #1
 800d740:	e041      	b.n	800d7c6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	69ba      	ldr	r2, [r7, #24]
 800d746:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	899b      	ldrh	r3, [r3, #12]
 800d74c:	4618      	mov	r0, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	8992      	ldrh	r2, [r2, #12]
 800d756:	fbb3 f1f2 	udiv	r1, r3, r2
 800d75a:	fb02 f201 	mul.w	r2, r2, r1
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	1ac3      	subs	r3, r0, r3
 800d762:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d901      	bls.n	800d770 <f_read+0x260>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	8992      	ldrh	r2, [r2, #12]
 800d77e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d782:	fb02 f200 	mul.w	r2, r2, r0
 800d786:	1a9b      	subs	r3, r3, r2
 800d788:	440b      	add	r3, r1
 800d78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d78c:	4619      	mov	r1, r3
 800d78e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d790:	f7fd ffd2 	bl	800b738 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	4413      	add	r3, r2
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	699a      	ldr	r2, [r3, #24]
 800d7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a2:	441a      	add	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	619a      	str	r2, [r3, #24]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	441a      	add	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f47f aee1 	bne.w	800d586 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3738      	adds	r7, #56	; 0x38
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f107 0208 	add.w	r2, r7, #8
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fc4e 	bl	800d080 <validate>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d168      	bne.n	800d8c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7d1b      	ldrb	r3, [r3, #20]
 800d7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d062      	beq.n	800d8c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	7d1b      	ldrb	r3, [r3, #20]
 800d7fe:	b25b      	sxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	da15      	bge.n	800d830 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	7858      	ldrb	r0, [r3, #1]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a1a      	ldr	r2, [r3, #32]
 800d812:	2301      	movs	r3, #1
 800d814:	f7fd fed0 	bl	800b5b8 <disk_write>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <f_sync+0x54>
 800d81e:	2301      	movs	r3, #1
 800d820:	e04f      	b.n	800d8c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7d1b      	ldrb	r3, [r3, #20]
 800d826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d830:	f7fa fe66 	bl	8008500 <get_fattime>
 800d834:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7fe f9a8 	bl	800bb94 <move_window>
 800d844:	4603      	mov	r3, r0
 800d846:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d848:	7dfb      	ldrb	r3, [r7, #23]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d138      	bne.n	800d8c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d852:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	330b      	adds	r3, #11
 800d858:	781a      	ldrb	r2, [r3, #0]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	330b      	adds	r3, #11
 800d85e:	f042 0220 	orr.w	r2, r2, #32
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	461a      	mov	r2, r3
 800d870:	68f9      	ldr	r1, [r7, #12]
 800d872:	f7fe ff36 	bl	800c6e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f103 021c 	add.w	r2, r3, #28
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	4619      	mov	r1, r3
 800d882:	4610      	mov	r0, r2
 800d884:	f7fd ff2c 	bl	800b6e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	3316      	adds	r3, #22
 800d88c:	6939      	ldr	r1, [r7, #16]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fd ff26 	bl	800b6e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	3312      	adds	r3, #18
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fd ff05 	bl	800b6aa <st_word>
					fs->wflag = 1;
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe f9a1 	bl	800bbf0 <sync_fs>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7d1b      	ldrb	r3, [r3, #20]
 800d8b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b084      	sub	sp, #16
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff ff7b 	bl	800d7ce <f_sync>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d118      	bne.n	800d914 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f107 0208 	add.w	r2, r7, #8
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fbc8 	bl	800d080 <validate>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10c      	bne.n	800d914 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe f8a4 	bl	800ba4c <dec_lock>
 800d904:	4603      	mov	r3, r0
 800d906:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d102      	bne.n	800d914 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d914:	7bfb      	ldrb	r3, [r7, #15]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b090      	sub	sp, #64	; 0x40
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f107 0208 	add.w	r2, r7, #8
 800d92e:	4611      	mov	r1, r2
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff fba5 	bl	800d080 <validate>
 800d936:	4603      	mov	r3, r0
 800d938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d93c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d940:	2b00      	cmp	r3, #0
 800d942:	d103      	bne.n	800d94c <f_lseek+0x2e>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7d5b      	ldrb	r3, [r3, #21]
 800d948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d94c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <f_lseek+0x3c>
 800d954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d958:	e201      	b.n	800dd5e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 80d9 	beq.w	800db16 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96a:	d15a      	bne.n	800da22 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	1d1a      	adds	r2, r3, #4
 800d976:	627a      	str	r2, [r7, #36]	; 0x24
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	617b      	str	r3, [r7, #20]
 800d97c:	2302      	movs	r3, #2
 800d97e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d03a      	beq.n	800da02 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98e:	613b      	str	r3, [r7, #16]
 800d990:	2300      	movs	r3, #0
 800d992:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	3302      	adds	r3, #2
 800d998:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fe f9b0 	bl	800bd0e <get_fat>
 800d9ae:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d804      	bhi.n	800d9c0 <f_lseek+0xa2>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	755a      	strb	r2, [r3, #21]
 800d9bc:	2302      	movs	r3, #2
 800d9be:	e1ce      	b.n	800dd5e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	d104      	bne.n	800d9d2 <f_lseek+0xb4>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	755a      	strb	r2, [r3, #21]
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e1c5      	b.n	800dd5e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d0de      	beq.n	800d99a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d809      	bhi.n	800d9f8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	1d1a      	adds	r2, r3, #4
 800d9e8:	627a      	str	r2, [r7, #36]	; 0x24
 800d9ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	1d1a      	adds	r2, r3, #4
 800d9f2:	627a      	str	r2, [r7, #36]	; 0x24
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d3c4      	bcc.n	800d98c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da08:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800da0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d803      	bhi.n	800da1a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
 800da18:	e19f      	b.n	800dd5a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800da1a:	2311      	movs	r3, #17
 800da1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800da20:	e19b      	b.n	800dd5a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d902      	bls.n	800da32 <f_lseek+0x114>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 818d 	beq.w	800dd5a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	3b01      	subs	r3, #1
 800da44:	4619      	mov	r1, r3
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7fe fc4e 	bl	800c2e8 <clmt_clust>
 800da4c:	4602      	mov	r2, r0
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	4619      	mov	r1, r3
 800da5a:	4610      	mov	r0, r2
 800da5c:	f7fe f938 	bl	800bcd0 <clust2sect>
 800da60:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d104      	bne.n	800da72 <f_lseek+0x154>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	755a      	strb	r2, [r3, #21]
 800da6e:	2302      	movs	r3, #2
 800da70:	e175      	b.n	800dd5e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	3b01      	subs	r3, #1
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	8992      	ldrh	r2, [r2, #12]
 800da7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	8952      	ldrh	r2, [r2, #10]
 800da82:	3a01      	subs	r2, #1
 800da84:	4013      	ands	r3, r2
 800da86:	69ba      	ldr	r2, [r7, #24]
 800da88:	4413      	add	r3, r2
 800da8a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	8992      	ldrh	r2, [r2, #12]
 800da94:	fbb3 f1f2 	udiv	r1, r3, r2
 800da98:	fb02 f201 	mul.w	r2, r2, r1
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 815b 	beq.w	800dd5a <f_lseek+0x43c>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	69ba      	ldr	r2, [r7, #24]
 800daaa:	429a      	cmp	r2, r3
 800daac:	f000 8155 	beq.w	800dd5a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	7d1b      	ldrb	r3, [r3, #20]
 800dab4:	b25b      	sxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	da18      	bge.n	800daec <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	7858      	ldrb	r0, [r3, #1]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a1a      	ldr	r2, [r3, #32]
 800dac8:	2301      	movs	r3, #1
 800daca:	f7fd fd75 	bl	800b5b8 <disk_write>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d004      	beq.n	800dade <f_lseek+0x1c0>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	755a      	strb	r2, [r3, #21]
 800dada:	2301      	movs	r3, #1
 800dadc:	e13f      	b.n	800dd5e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	7d1b      	ldrb	r3, [r3, #20]
 800dae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	7858      	ldrb	r0, [r3, #1]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800daf6:	2301      	movs	r3, #1
 800daf8:	69ba      	ldr	r2, [r7, #24]
 800dafa:	f7fd fd3d 	bl	800b578 <disk_read>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <f_lseek+0x1f0>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	755a      	strb	r2, [r3, #21]
 800db0a:	2301      	movs	r3, #1
 800db0c:	e127      	b.n	800dd5e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	621a      	str	r2, [r3, #32]
 800db14:	e121      	b.n	800dd5a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d908      	bls.n	800db32 <f_lseek+0x214>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7d1b      	ldrb	r3, [r3, #20]
 800db24:	f003 0302 	and.w	r3, r3, #2
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d102      	bne.n	800db32 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800db38:	2300      	movs	r3, #0
 800db3a:	637b      	str	r3, [r7, #52]	; 0x34
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db40:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	f000 80b5 	beq.w	800dcb4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	895b      	ldrh	r3, [r3, #10]
 800db4e:	461a      	mov	r2, r3
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	899b      	ldrh	r3, [r3, #12]
 800db54:	fb03 f302 	mul.w	r3, r3, r2
 800db58:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01b      	beq.n	800db98 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	1e5a      	subs	r2, r3, #1
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	fbb2 f2f3 	udiv	r2, r2, r3
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	1e59      	subs	r1, r3, #1
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800db74:	429a      	cmp	r2, r3
 800db76:	d30f      	bcc.n	800db98 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800db78:	6a3b      	ldr	r3, [r7, #32]
 800db7a:	1e5a      	subs	r2, r3, #1
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	425b      	negs	r3, r3
 800db80:	401a      	ands	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	69db      	ldr	r3, [r3, #28]
 800db94:	63bb      	str	r3, [r7, #56]	; 0x38
 800db96:	e022      	b.n	800dbde <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800db9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d119      	bne.n	800dbd8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2100      	movs	r1, #0
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fb05 	bl	800c1b8 <create_chain>
 800dbae:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d104      	bne.n	800dbc0 <f_lseek+0x2a2>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2202      	movs	r2, #2
 800dbba:	755a      	strb	r2, [r3, #21]
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	e0ce      	b.n	800dd5e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc6:	d104      	bne.n	800dbd2 <f_lseek+0x2b4>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	755a      	strb	r2, [r3, #21]
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e0c5      	b.n	800dd5e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbd6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbdc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d067      	beq.n	800dcb4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800dbe4:	e03a      	b.n	800dc5c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	603b      	str	r3, [r7, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	441a      	add	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	7d1b      	ldrb	r3, [r3, #20]
 800dbfe:	f003 0302 	and.w	r3, r3, #2
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00b      	beq.n	800dc1e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fad4 	bl	800c1b8 <create_chain>
 800dc10:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d108      	bne.n	800dc2a <f_lseek+0x30c>
							ofs = 0; break;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	e022      	b.n	800dc64 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe f873 	bl	800bd0e <get_fat>
 800dc28:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc30:	d104      	bne.n	800dc3c <f_lseek+0x31e>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2201      	movs	r2, #1
 800dc36:	755a      	strb	r2, [r3, #21]
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e090      	b.n	800dd5e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d904      	bls.n	800dc4c <f_lseek+0x32e>
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d304      	bcc.n	800dc56 <f_lseek+0x338>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	755a      	strb	r2, [r3, #21]
 800dc52:	2302      	movs	r3, #2
 800dc54:	e083      	b.n	800dd5e <f_lseek+0x440>
					fp->clust = clst;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc5a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d8c0      	bhi.n	800dbe6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	699a      	ldr	r2, [r3, #24]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	441a      	add	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	899b      	ldrh	r3, [r3, #12]
 800dc74:	461a      	mov	r2, r3
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc7c:	fb02 f201 	mul.w	r2, r2, r1
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d016      	beq.n	800dcb4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fe f820 	bl	800bcd0 <clust2sect>
 800dc90:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d104      	bne.n	800dca2 <f_lseek+0x384>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	755a      	strb	r2, [r3, #21]
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e05d      	b.n	800dd5e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	899b      	ldrh	r3, [r3, #12]
 800dca6:	461a      	mov	r2, r3
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcb0:	4413      	add	r3, r2
 800dcb2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	699a      	ldr	r2, [r3, #24]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d90a      	bls.n	800dcd6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	699a      	ldr	r2, [r3, #24]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	8992      	ldrh	r2, [r2, #12]
 800dcde:	fbb3 f1f2 	udiv	r1, r3, r2
 800dce2:	fb02 f201 	mul.w	r2, r2, r1
 800dce6:	1a9b      	subs	r3, r3, r2
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d036      	beq.n	800dd5a <f_lseek+0x43c>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a1b      	ldr	r3, [r3, #32]
 800dcf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d031      	beq.n	800dd5a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	7d1b      	ldrb	r3, [r3, #20]
 800dcfa:	b25b      	sxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	da18      	bge.n	800dd32 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	7858      	ldrb	r0, [r3, #1]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a1a      	ldr	r2, [r3, #32]
 800dd0e:	2301      	movs	r3, #1
 800dd10:	f7fd fc52 	bl	800b5b8 <disk_write>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d004      	beq.n	800dd24 <f_lseek+0x406>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	755a      	strb	r2, [r3, #21]
 800dd20:	2301      	movs	r3, #1
 800dd22:	e01c      	b.n	800dd5e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	7d1b      	ldrb	r3, [r3, #20]
 800dd28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	7858      	ldrb	r0, [r3, #1]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd40:	f7fd fc1a 	bl	800b578 <disk_read>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d004      	beq.n	800dd54 <f_lseek+0x436>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	755a      	strb	r2, [r3, #21]
 800dd50:	2301      	movs	r3, #1
 800dd52:	e004      	b.n	800dd5e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd58:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dd5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3740      	adds	r7, #64	; 0x40
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	4613      	mov	r3, r2
 800dd74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd76:	2301      	movs	r3, #1
 800dd78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd7e:	4b1f      	ldr	r3, [pc, #124]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800dd80:	7a5b      	ldrb	r3, [r3, #9]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d131      	bne.n	800ddec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd88:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800dd8a:	7a5b      	ldrb	r3, [r3, #9]
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	461a      	mov	r2, r3
 800dd90:	4b1a      	ldr	r3, [pc, #104]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800dd92:	2100      	movs	r1, #0
 800dd94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd96:	4b19      	ldr	r3, [pc, #100]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800dd98:	7a5b      	ldrb	r3, [r3, #9]
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	4a17      	ldr	r2, [pc, #92]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	4413      	add	r3, r2
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dda6:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800dda8:	7a5b      	ldrb	r3, [r3, #9]
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	461a      	mov	r2, r3
 800ddae:	4b13      	ldr	r3, [pc, #76]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800ddb0:	4413      	add	r3, r2
 800ddb2:	79fa      	ldrb	r2, [r7, #7]
 800ddb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ddb6:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800ddb8:	7a5b      	ldrb	r3, [r3, #9]
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	1c5a      	adds	r2, r3, #1
 800ddbe:	b2d1      	uxtb	r1, r2
 800ddc0:	4a0e      	ldr	r2, [pc, #56]	; (800ddfc <FATFS_LinkDriverEx+0x94>)
 800ddc2:	7251      	strb	r1, [r2, #9]
 800ddc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ddc6:	7dbb      	ldrb	r3, [r7, #22]
 800ddc8:	3330      	adds	r3, #48	; 0x30
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	223a      	movs	r2, #58	; 0x3a
 800ddd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	3302      	adds	r3, #2
 800dddc:	222f      	movs	r2, #47	; 0x2f
 800ddde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	3303      	adds	r3, #3
 800dde4:	2200      	movs	r2, #0
 800dde6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	371c      	adds	r7, #28
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	20002174 	.word	0x20002174

0800de00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800de0a:	2200      	movs	r2, #0
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7ff ffaa 	bl	800dd68 <FATFS_LinkDriverEx>
 800de14:	4603      	mov	r3, r0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
	...

0800de20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800de24:	2201      	movs	r2, #1
 800de26:	490e      	ldr	r1, [pc, #56]	; (800de60 <MX_USB_HOST_Init+0x40>)
 800de28:	480e      	ldr	r0, [pc, #56]	; (800de64 <MX_USB_HOST_Init+0x44>)
 800de2a:	f7fc f80d 	bl	8009e48 <USBH_Init>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d001      	beq.n	800de38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800de34:	f7f3 fa6c 	bl	8001310 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800de38:	490b      	ldr	r1, [pc, #44]	; (800de68 <MX_USB_HOST_Init+0x48>)
 800de3a:	480a      	ldr	r0, [pc, #40]	; (800de64 <MX_USB_HOST_Init+0x44>)
 800de3c:	f7fc f892 	bl	8009f64 <USBH_RegisterClass>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800de46:	f7f3 fa63 	bl	8001310 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800de4a:	4806      	ldr	r0, [pc, #24]	; (800de64 <MX_USB_HOST_Init+0x44>)
 800de4c:	f7fc f916 	bl	800a07c <USBH_Start>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800de56:	f7f3 fa5b 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de5a:	bf00      	nop
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	0800de81 	.word	0x0800de81
 800de64:	200042fc 	.word	0x200042fc
 800de68:	2000000c 	.word	0x2000000c

0800de6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800de70:	4802      	ldr	r0, [pc, #8]	; (800de7c <MX_USB_HOST_Process+0x10>)
 800de72:	f7fc f913 	bl	800a09c <USBH_Process>
}
 800de76:	bf00      	nop
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	200042fc 	.word	0x200042fc

0800de80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	460b      	mov	r3, r1
 800de8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800de8c:	78fb      	ldrb	r3, [r7, #3]
 800de8e:	3b01      	subs	r3, #1
 800de90:	2b04      	cmp	r3, #4
 800de92:	d819      	bhi.n	800dec8 <USBH_UserProcess+0x48>
 800de94:	a201      	add	r2, pc, #4	; (adr r2, 800de9c <USBH_UserProcess+0x1c>)
 800de96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9a:	bf00      	nop
 800de9c:	0800dec9 	.word	0x0800dec9
 800dea0:	0800deb9 	.word	0x0800deb9
 800dea4:	0800dec9 	.word	0x0800dec9
 800dea8:	0800dec1 	.word	0x0800dec1
 800deac:	0800deb1 	.word	0x0800deb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800deb0:	4b09      	ldr	r3, [pc, #36]	; (800ded8 <USBH_UserProcess+0x58>)
 800deb2:	2203      	movs	r2, #3
 800deb4:	701a      	strb	r2, [r3, #0]
  break;
 800deb6:	e008      	b.n	800deca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800deb8:	4b07      	ldr	r3, [pc, #28]	; (800ded8 <USBH_UserProcess+0x58>)
 800deba:	2202      	movs	r2, #2
 800debc:	701a      	strb	r2, [r3, #0]
  break;
 800debe:	e004      	b.n	800deca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dec0:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <USBH_UserProcess+0x58>)
 800dec2:	2201      	movs	r2, #1
 800dec4:	701a      	strb	r2, [r3, #0]
  break;
 800dec6:	e000      	b.n	800deca <USBH_UserProcess+0x4a>

  default:
  break;
 800dec8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800deca:	bf00      	nop
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	20002180 	.word	0x20002180

0800dedc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08a      	sub	sp, #40	; 0x28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dee4:	f107 0314 	add.w	r3, r7, #20
 800dee8:	2200      	movs	r2, #0
 800deea:	601a      	str	r2, [r3, #0]
 800deec:	605a      	str	r2, [r3, #4]
 800deee:	609a      	str	r2, [r3, #8]
 800def0:	60da      	str	r2, [r3, #12]
 800def2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800defc:	d147      	bne.n	800df8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800defe:	2300      	movs	r3, #0
 800df00:	613b      	str	r3, [r7, #16]
 800df02:	4b25      	ldr	r3, [pc, #148]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df06:	4a24      	ldr	r2, [pc, #144]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df08:	f043 0301 	orr.w	r3, r3, #1
 800df0c:	6313      	str	r3, [r2, #48]	; 0x30
 800df0e:	4b22      	ldr	r3, [pc, #136]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df12:	f003 0301 	and.w	r3, r3, #1
 800df16:	613b      	str	r3, [r7, #16]
 800df18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800df1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df20:	2300      	movs	r3, #0
 800df22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df24:	2300      	movs	r3, #0
 800df26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df28:	f107 0314 	add.w	r3, r7, #20
 800df2c:	4619      	mov	r1, r3
 800df2e:	481b      	ldr	r0, [pc, #108]	; (800df9c <HAL_HCD_MspInit+0xc0>)
 800df30:	f7f4 f942 	bl	80021b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df3a:	2302      	movs	r3, #2
 800df3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df3e:	2300      	movs	r3, #0
 800df40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df42:	2303      	movs	r3, #3
 800df44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df46:	230a      	movs	r3, #10
 800df48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df4a:	f107 0314 	add.w	r3, r7, #20
 800df4e:	4619      	mov	r1, r3
 800df50:	4812      	ldr	r0, [pc, #72]	; (800df9c <HAL_HCD_MspInit+0xc0>)
 800df52:	f7f4 f931 	bl	80021b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df56:	4b10      	ldr	r3, [pc, #64]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5a:	4a0f      	ldr	r2, [pc, #60]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df60:	6353      	str	r3, [r2, #52]	; 0x34
 800df62:	2300      	movs	r3, #0
 800df64:	60fb      	str	r3, [r7, #12]
 800df66:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6a:	4a0b      	ldr	r2, [pc, #44]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df70:	6453      	str	r3, [r2, #68]	; 0x44
 800df72:	4b09      	ldr	r3, [pc, #36]	; (800df98 <HAL_HCD_MspInit+0xbc>)
 800df74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df7e:	2200      	movs	r2, #0
 800df80:	2100      	movs	r1, #0
 800df82:	2043      	movs	r0, #67	; 0x43
 800df84:	f7f3 fd01 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df88:	2043      	movs	r0, #67	; 0x43
 800df8a:	f7f3 fd1a 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df8e:	bf00      	nop
 800df90:	3728      	adds	r7, #40	; 0x28
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	40023800 	.word	0x40023800
 800df9c:	40020000 	.word	0x40020000

0800dfa0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fc fc47 	bl	800a842 <USBH_LL_IncTimer>
}
 800dfb4:	bf00      	nop
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fc fc7f 	bl	800a8ce <USBH_LL_Connect>
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fc fc88 	bl	800a8fc <USBH_LL_Disconnect>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
 800e000:	4613      	mov	r3, r2
 800e002:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fc fc39 	bl	800a896 <USBH_LL_PortEnabled>
}
 800e024:	bf00      	nop
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fc fc39 	bl	800a8b2 <USBH_LL_PortDisabled>
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e056:	2b01      	cmp	r3, #1
 800e058:	d12a      	bne.n	800e0b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e05a:	4a18      	ldr	r2, [pc, #96]	; (800e0bc <USBH_LL_Init+0x74>)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a15      	ldr	r2, [pc, #84]	; (800e0bc <USBH_LL_Init+0x74>)
 800e066:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e06a:	4b14      	ldr	r3, [pc, #80]	; (800e0bc <USBH_LL_Init+0x74>)
 800e06c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e070:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e072:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <USBH_LL_Init+0x74>)
 800e074:	2208      	movs	r2, #8
 800e076:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e078:	4b10      	ldr	r3, [pc, #64]	; (800e0bc <USBH_LL_Init+0x74>)
 800e07a:	2201      	movs	r2, #1
 800e07c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e07e:	4b0f      	ldr	r3, [pc, #60]	; (800e0bc <USBH_LL_Init+0x74>)
 800e080:	2200      	movs	r2, #0
 800e082:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e084:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <USBH_LL_Init+0x74>)
 800e086:	2202      	movs	r2, #2
 800e088:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e08a:	4b0c      	ldr	r3, [pc, #48]	; (800e0bc <USBH_LL_Init+0x74>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e090:	480a      	ldr	r0, [pc, #40]	; (800e0bc <USBH_LL_Init+0x74>)
 800e092:	f7f4 fa5e 	bl	8002552 <HAL_HCD_Init>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e09c:	f7f3 f938 	bl	8001310 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e0a0:	4806      	ldr	r0, [pc, #24]	; (800e0bc <USBH_LL_Init+0x74>)
 800e0a2:	f7f4 fe42 	bl	8002d2a <HAL_HCD_GetCurrentFrame>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7fc fbba 	bl	800a824 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	200046d4 	.word	0x200046d4

0800e0c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7f4 fdb1 	bl	8002c3e <HAL_HCD_Start>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 f98c 	bl	800e400 <USBH_Get_USB_Status>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7f4 fdb9 	bl	8002c84 <HAL_HCD_Stop>
 800e112:	4603      	mov	r3, r0
 800e114:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e116:	7bfb      	ldrb	r3, [r7, #15]
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 f971 	bl	800e400 <USBH_Get_USB_Status>
 800e11e:	4603      	mov	r3, r0
 800e120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e122:	7bbb      	ldrb	r3, [r7, #14]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e134:	2301      	movs	r3, #1
 800e136:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f4 fe01 	bl	8002d46 <HAL_HCD_GetCurrentSpeed>
 800e144:	4603      	mov	r3, r0
 800e146:	2b02      	cmp	r3, #2
 800e148:	d00c      	beq.n	800e164 <USBH_LL_GetSpeed+0x38>
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d80d      	bhi.n	800e16a <USBH_LL_GetSpeed+0x3e>
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d002      	beq.n	800e158 <USBH_LL_GetSpeed+0x2c>
 800e152:	2b01      	cmp	r3, #1
 800e154:	d003      	beq.n	800e15e <USBH_LL_GetSpeed+0x32>
 800e156:	e008      	b.n	800e16a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e158:	2300      	movs	r3, #0
 800e15a:	73fb      	strb	r3, [r7, #15]
    break;
 800e15c:	e008      	b.n	800e170 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e15e:	2301      	movs	r3, #1
 800e160:	73fb      	strb	r3, [r7, #15]
    break;
 800e162:	e005      	b.n	800e170 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e164:	2302      	movs	r3, #2
 800e166:	73fb      	strb	r3, [r7, #15]
    break;
 800e168:	e002      	b.n	800e170 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e16a:	2301      	movs	r3, #1
 800e16c:	73fb      	strb	r3, [r7, #15]
    break;
 800e16e:	bf00      	nop
  }
  return  speed;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e190:	4618      	mov	r0, r3
 800e192:	f7f4 fd94 	bl	8002cbe <HAL_HCD_ResetPort>
 800e196:	4603      	mov	r3, r0
 800e198:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e19a:	7bfb      	ldrb	r3, [r7, #15]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f000 f92f 	bl	800e400 <USBH_Get_USB_Status>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f4 fd9b 	bl	8002d02 <HAL_HCD_HC_GetXferCount>
 800e1cc:	4603      	mov	r3, r0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1d6:	b590      	push	{r4, r7, lr}
 800e1d8:	b089      	sub	sp, #36	; 0x24
 800e1da:	af04      	add	r7, sp, #16
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	4608      	mov	r0, r1
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	70fb      	strb	r3, [r7, #3]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70bb      	strb	r3, [r7, #2]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1fe:	787c      	ldrb	r4, [r7, #1]
 800e200:	78ba      	ldrb	r2, [r7, #2]
 800e202:	78f9      	ldrb	r1, [r7, #3]
 800e204:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e206:	9302      	str	r3, [sp, #8]
 800e208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	4623      	mov	r3, r4
 800e216:	f7f4 f9fe 	bl	8002616 <HAL_HCD_HC_Init>
 800e21a:	4603      	mov	r3, r0
 800e21c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	4618      	mov	r0, r3
 800e222:	f000 f8ed 	bl	800e400 <USBH_Get_USB_Status>
 800e226:	4603      	mov	r3, r0
 800e228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e22a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3714      	adds	r7, #20
 800e230:	46bd      	mov	sp, r7
 800e232:	bd90      	pop	{r4, r7, pc}

0800e234 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e24e:	78fa      	ldrb	r2, [r7, #3]
 800e250:	4611      	mov	r1, r2
 800e252:	4618      	mov	r0, r3
 800e254:	f7f4 fa6e 	bl	8002734 <HAL_HCD_HC_Halt>
 800e258:	4603      	mov	r3, r0
 800e25a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f8ce 	bl	800e400 <USBH_Get_USB_Status>
 800e264:	4603      	mov	r3, r0
 800e266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e268:	7bbb      	ldrb	r3, [r7, #14]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e272:	b590      	push	{r4, r7, lr}
 800e274:	b089      	sub	sp, #36	; 0x24
 800e276:	af04      	add	r7, sp, #16
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	4608      	mov	r0, r1
 800e27c:	4611      	mov	r1, r2
 800e27e:	461a      	mov	r2, r3
 800e280:	4603      	mov	r3, r0
 800e282:	70fb      	strb	r3, [r7, #3]
 800e284:	460b      	mov	r3, r1
 800e286:	70bb      	strb	r3, [r7, #2]
 800e288:	4613      	mov	r3, r2
 800e28a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e29a:	787c      	ldrb	r4, [r7, #1]
 800e29c:	78ba      	ldrb	r2, [r7, #2]
 800e29e:	78f9      	ldrb	r1, [r7, #3]
 800e2a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2a8:	9302      	str	r3, [sp, #8]
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	9301      	str	r3, [sp, #4]
 800e2ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	4623      	mov	r3, r4
 800e2b6:	f7f4 fa61 	bl	800277c <HAL_HCD_HC_SubmitRequest>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 f89d 	bl	800e400 <USBH_Get_USB_Status>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3714      	adds	r7, #20
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd90      	pop	{r4, r7, pc}

0800e2d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2e6:	78fa      	ldrb	r2, [r7, #3]
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f4 fcf5 	bl	8002cda <HAL_HCD_HC_GetURBState>
 800e2f0:	4603      	mov	r3, r0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b082      	sub	sp, #8
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	460b      	mov	r3, r1
 800e304:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d103      	bne.n	800e318 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e310:	78fb      	ldrb	r3, [r7, #3]
 800e312:	4618      	mov	r0, r3
 800e314:	f000 f8a0 	bl	800e458 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e318:	20c8      	movs	r0, #200	; 0xc8
 800e31a:	f7f3 fa37 	bl	800178c <HAL_Delay>
  return USBH_OK;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	70fb      	strb	r3, [r7, #3]
 800e334:	4613      	mov	r3, r2
 800e336:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e33e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e340:	78fb      	ldrb	r3, [r7, #3]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	212c      	movs	r1, #44	; 0x2c
 800e346:	fb01 f303 	mul.w	r3, r1, r3
 800e34a:	4413      	add	r3, r2
 800e34c:	333b      	adds	r3, #59	; 0x3b
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d009      	beq.n	800e368 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e354:	78fb      	ldrb	r3, [r7, #3]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	212c      	movs	r1, #44	; 0x2c
 800e35a:	fb01 f303 	mul.w	r3, r1, r3
 800e35e:	4413      	add	r3, r2
 800e360:	3354      	adds	r3, #84	; 0x54
 800e362:	78ba      	ldrb	r2, [r7, #2]
 800e364:	701a      	strb	r2, [r3, #0]
 800e366:	e008      	b.n	800e37a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	212c      	movs	r1, #44	; 0x2c
 800e36e:	fb01 f303 	mul.w	r3, r1, r3
 800e372:	4413      	add	r3, r2
 800e374:	3355      	adds	r3, #85	; 0x55
 800e376:	78ba      	ldrb	r2, [r7, #2]
 800e378:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e39e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	212c      	movs	r1, #44	; 0x2c
 800e3a6:	fb01 f303 	mul.w	r3, r1, r3
 800e3aa:	4413      	add	r3, r2
 800e3ac:	333b      	adds	r3, #59	; 0x3b
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d009      	beq.n	800e3c8 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	212c      	movs	r1, #44	; 0x2c
 800e3ba:	fb01 f303 	mul.w	r3, r1, r3
 800e3be:	4413      	add	r3, r2
 800e3c0:	3354      	adds	r3, #84	; 0x54
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	73fb      	strb	r3, [r7, #15]
 800e3c6:	e008      	b.n	800e3da <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e3c8:	78fb      	ldrb	r3, [r7, #3]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	212c      	movs	r1, #44	; 0x2c
 800e3ce:	fb01 f303 	mul.w	r3, r1, r3
 800e3d2:	4413      	add	r3, r2
 800e3d4:	3355      	adds	r3, #85	; 0x55
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3714      	adds	r7, #20
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7f3 f9cb 	bl	800178c <HAL_Delay>
}
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	2b03      	cmp	r3, #3
 800e412:	d817      	bhi.n	800e444 <USBH_Get_USB_Status+0x44>
 800e414:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <USBH_Get_USB_Status+0x1c>)
 800e416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41a:	bf00      	nop
 800e41c:	0800e42d 	.word	0x0800e42d
 800e420:	0800e433 	.word	0x0800e433
 800e424:	0800e439 	.word	0x0800e439
 800e428:	0800e43f 	.word	0x0800e43f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	73fb      	strb	r3, [r7, #15]
    break;
 800e430:	e00b      	b.n	800e44a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e432:	2302      	movs	r3, #2
 800e434:	73fb      	strb	r3, [r7, #15]
    break;
 800e436:	e008      	b.n	800e44a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e438:	2301      	movs	r3, #1
 800e43a:	73fb      	strb	r3, [r7, #15]
    break;
 800e43c:	e005      	b.n	800e44a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e43e:	2302      	movs	r3, #2
 800e440:	73fb      	strb	r3, [r7, #15]
    break;
 800e442:	e002      	b.n	800e44a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e444:	2302      	movs	r3, #2
 800e446:	73fb      	strb	r3, [r7, #15]
    break;
 800e448:	bf00      	nop
  }
  return usb_status;
 800e44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af04      	add	r7, sp, #16
 800e45e:	4603      	mov	r3, r0
 800e460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	73bb      	strb	r3, [r7, #14]
  uint8_t Component_Addr = 0 << 1;
 800e46a:	2300      	movs	r3, #0
 800e46c:	737b      	strb	r3, [r7, #13]
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800e46e:	79fb      	ldrb	r3, [r7, #7]
 800e470:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c1, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800e476:	7b7b      	ldrb	r3, [r7, #13]
 800e478:	b299      	uxth	r1, r3
 800e47a:	7bfb      	ldrb	r3, [r7, #15]
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	2364      	movs	r3, #100	; 0x64
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	2301      	movs	r3, #1
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	f107 030b 	add.w	r3, r7, #11
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	2301      	movs	r3, #1
 800e48e:	480f      	ldr	r0, [pc, #60]	; (800e4cc <MX_DriverVbusFS+0x74>)
 800e490:	f7f6 fb32 	bl	8004af8 <HAL_I2C_Mem_Read>
 800e494:	4603      	mov	r3, r0
 800e496:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800e498:	7b3a      	ldrb	r2, [r7, #12]
 800e49a:	7afb      	ldrb	r3, [r7, #11]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c1,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800e4a2:	7b7b      	ldrb	r3, [r7, #13]
 800e4a4:	b299      	uxth	r1, r3
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	2364      	movs	r3, #100	; 0x64
 800e4ac:	9302      	str	r3, [sp, #8]
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	f107 030c 	add.w	r3, r7, #12
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	4804      	ldr	r0, [pc, #16]	; (800e4cc <MX_DriverVbusFS+0x74>)
 800e4bc:	f7f6 fa22 	bl	8004904 <HAL_I2C_Mem_Write>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800e4c4:	bf00      	nop
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	2000218c 	.word	0x2000218c

0800e4d0 <__errno>:
 800e4d0:	4b01      	ldr	r3, [pc, #4]	; (800e4d8 <__errno+0x8>)
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	2000002c 	.word	0x2000002c

0800e4dc <__libc_init_array>:
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	4d0d      	ldr	r5, [pc, #52]	; (800e514 <__libc_init_array+0x38>)
 800e4e0:	4c0d      	ldr	r4, [pc, #52]	; (800e518 <__libc_init_array+0x3c>)
 800e4e2:	1b64      	subs	r4, r4, r5
 800e4e4:	10a4      	asrs	r4, r4, #2
 800e4e6:	2600      	movs	r6, #0
 800e4e8:	42a6      	cmp	r6, r4
 800e4ea:	d109      	bne.n	800e500 <__libc_init_array+0x24>
 800e4ec:	4d0b      	ldr	r5, [pc, #44]	; (800e51c <__libc_init_array+0x40>)
 800e4ee:	4c0c      	ldr	r4, [pc, #48]	; (800e520 <__libc_init_array+0x44>)
 800e4f0:	f000 f906 	bl	800e700 <_init>
 800e4f4:	1b64      	subs	r4, r4, r5
 800e4f6:	10a4      	asrs	r4, r4, #2
 800e4f8:	2600      	movs	r6, #0
 800e4fa:	42a6      	cmp	r6, r4
 800e4fc:	d105      	bne.n	800e50a <__libc_init_array+0x2e>
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	f855 3b04 	ldr.w	r3, [r5], #4
 800e504:	4798      	blx	r3
 800e506:	3601      	adds	r6, #1
 800e508:	e7ee      	b.n	800e4e8 <__libc_init_array+0xc>
 800e50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e50e:	4798      	blx	r3
 800e510:	3601      	adds	r6, #1
 800e512:	e7f2      	b.n	800e4fa <__libc_init_array+0x1e>
 800e514:	0800e8b4 	.word	0x0800e8b4
 800e518:	0800e8b4 	.word	0x0800e8b4
 800e51c:	0800e8b4 	.word	0x0800e8b4
 800e520:	0800e8b8 	.word	0x0800e8b8

0800e524 <malloc>:
 800e524:	4b02      	ldr	r3, [pc, #8]	; (800e530 <malloc+0xc>)
 800e526:	4601      	mov	r1, r0
 800e528:	6818      	ldr	r0, [r3, #0]
 800e52a:	f000 b871 	b.w	800e610 <_malloc_r>
 800e52e:	bf00      	nop
 800e530:	2000002c 	.word	0x2000002c

0800e534 <free>:
 800e534:	4b02      	ldr	r3, [pc, #8]	; (800e540 <free+0xc>)
 800e536:	4601      	mov	r1, r0
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	f000 b819 	b.w	800e570 <_free_r>
 800e53e:	bf00      	nop
 800e540:	2000002c 	.word	0x2000002c

0800e544 <memcpy>:
 800e544:	440a      	add	r2, r1
 800e546:	4291      	cmp	r1, r2
 800e548:	f100 33ff 	add.w	r3, r0, #4294967295
 800e54c:	d100      	bne.n	800e550 <memcpy+0xc>
 800e54e:	4770      	bx	lr
 800e550:	b510      	push	{r4, lr}
 800e552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e55a:	4291      	cmp	r1, r2
 800e55c:	d1f9      	bne.n	800e552 <memcpy+0xe>
 800e55e:	bd10      	pop	{r4, pc}

0800e560 <memset>:
 800e560:	4402      	add	r2, r0
 800e562:	4603      	mov	r3, r0
 800e564:	4293      	cmp	r3, r2
 800e566:	d100      	bne.n	800e56a <memset+0xa>
 800e568:	4770      	bx	lr
 800e56a:	f803 1b01 	strb.w	r1, [r3], #1
 800e56e:	e7f9      	b.n	800e564 <memset+0x4>

0800e570 <_free_r>:
 800e570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e572:	2900      	cmp	r1, #0
 800e574:	d048      	beq.n	800e608 <_free_r+0x98>
 800e576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e57a:	9001      	str	r0, [sp, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f1a1 0404 	sub.w	r4, r1, #4
 800e582:	bfb8      	it	lt
 800e584:	18e4      	addlt	r4, r4, r3
 800e586:	f000 f8ad 	bl	800e6e4 <__malloc_lock>
 800e58a:	4a20      	ldr	r2, [pc, #128]	; (800e60c <_free_r+0x9c>)
 800e58c:	9801      	ldr	r0, [sp, #4]
 800e58e:	6813      	ldr	r3, [r2, #0]
 800e590:	4615      	mov	r5, r2
 800e592:	b933      	cbnz	r3, 800e5a2 <_free_r+0x32>
 800e594:	6063      	str	r3, [r4, #4]
 800e596:	6014      	str	r4, [r2, #0]
 800e598:	b003      	add	sp, #12
 800e59a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e59e:	f000 b8a7 	b.w	800e6f0 <__malloc_unlock>
 800e5a2:	42a3      	cmp	r3, r4
 800e5a4:	d90b      	bls.n	800e5be <_free_r+0x4e>
 800e5a6:	6821      	ldr	r1, [r4, #0]
 800e5a8:	1862      	adds	r2, r4, r1
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	bf04      	itt	eq
 800e5ae:	681a      	ldreq	r2, [r3, #0]
 800e5b0:	685b      	ldreq	r3, [r3, #4]
 800e5b2:	6063      	str	r3, [r4, #4]
 800e5b4:	bf04      	itt	eq
 800e5b6:	1852      	addeq	r2, r2, r1
 800e5b8:	6022      	streq	r2, [r4, #0]
 800e5ba:	602c      	str	r4, [r5, #0]
 800e5bc:	e7ec      	b.n	800e598 <_free_r+0x28>
 800e5be:	461a      	mov	r2, r3
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	b10b      	cbz	r3, 800e5c8 <_free_r+0x58>
 800e5c4:	42a3      	cmp	r3, r4
 800e5c6:	d9fa      	bls.n	800e5be <_free_r+0x4e>
 800e5c8:	6811      	ldr	r1, [r2, #0]
 800e5ca:	1855      	adds	r5, r2, r1
 800e5cc:	42a5      	cmp	r5, r4
 800e5ce:	d10b      	bne.n	800e5e8 <_free_r+0x78>
 800e5d0:	6824      	ldr	r4, [r4, #0]
 800e5d2:	4421      	add	r1, r4
 800e5d4:	1854      	adds	r4, r2, r1
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	6011      	str	r1, [r2, #0]
 800e5da:	d1dd      	bne.n	800e598 <_free_r+0x28>
 800e5dc:	681c      	ldr	r4, [r3, #0]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	6053      	str	r3, [r2, #4]
 800e5e2:	4421      	add	r1, r4
 800e5e4:	6011      	str	r1, [r2, #0]
 800e5e6:	e7d7      	b.n	800e598 <_free_r+0x28>
 800e5e8:	d902      	bls.n	800e5f0 <_free_r+0x80>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	6003      	str	r3, [r0, #0]
 800e5ee:	e7d3      	b.n	800e598 <_free_r+0x28>
 800e5f0:	6825      	ldr	r5, [r4, #0]
 800e5f2:	1961      	adds	r1, r4, r5
 800e5f4:	428b      	cmp	r3, r1
 800e5f6:	bf04      	itt	eq
 800e5f8:	6819      	ldreq	r1, [r3, #0]
 800e5fa:	685b      	ldreq	r3, [r3, #4]
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	bf04      	itt	eq
 800e600:	1949      	addeq	r1, r1, r5
 800e602:	6021      	streq	r1, [r4, #0]
 800e604:	6054      	str	r4, [r2, #4]
 800e606:	e7c7      	b.n	800e598 <_free_r+0x28>
 800e608:	b003      	add	sp, #12
 800e60a:	bd30      	pop	{r4, r5, pc}
 800e60c:	20002184 	.word	0x20002184

0800e610 <_malloc_r>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	1ccd      	adds	r5, r1, #3
 800e614:	f025 0503 	bic.w	r5, r5, #3
 800e618:	3508      	adds	r5, #8
 800e61a:	2d0c      	cmp	r5, #12
 800e61c:	bf38      	it	cc
 800e61e:	250c      	movcc	r5, #12
 800e620:	2d00      	cmp	r5, #0
 800e622:	4606      	mov	r6, r0
 800e624:	db01      	blt.n	800e62a <_malloc_r+0x1a>
 800e626:	42a9      	cmp	r1, r5
 800e628:	d903      	bls.n	800e632 <_malloc_r+0x22>
 800e62a:	230c      	movs	r3, #12
 800e62c:	6033      	str	r3, [r6, #0]
 800e62e:	2000      	movs	r0, #0
 800e630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e632:	f000 f857 	bl	800e6e4 <__malloc_lock>
 800e636:	4921      	ldr	r1, [pc, #132]	; (800e6bc <_malloc_r+0xac>)
 800e638:	680a      	ldr	r2, [r1, #0]
 800e63a:	4614      	mov	r4, r2
 800e63c:	b99c      	cbnz	r4, 800e666 <_malloc_r+0x56>
 800e63e:	4f20      	ldr	r7, [pc, #128]	; (800e6c0 <_malloc_r+0xb0>)
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	b923      	cbnz	r3, 800e64e <_malloc_r+0x3e>
 800e644:	4621      	mov	r1, r4
 800e646:	4630      	mov	r0, r6
 800e648:	f000 f83c 	bl	800e6c4 <_sbrk_r>
 800e64c:	6038      	str	r0, [r7, #0]
 800e64e:	4629      	mov	r1, r5
 800e650:	4630      	mov	r0, r6
 800e652:	f000 f837 	bl	800e6c4 <_sbrk_r>
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	d123      	bne.n	800e6a2 <_malloc_r+0x92>
 800e65a:	230c      	movs	r3, #12
 800e65c:	6033      	str	r3, [r6, #0]
 800e65e:	4630      	mov	r0, r6
 800e660:	f000 f846 	bl	800e6f0 <__malloc_unlock>
 800e664:	e7e3      	b.n	800e62e <_malloc_r+0x1e>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	1b5b      	subs	r3, r3, r5
 800e66a:	d417      	bmi.n	800e69c <_malloc_r+0x8c>
 800e66c:	2b0b      	cmp	r3, #11
 800e66e:	d903      	bls.n	800e678 <_malloc_r+0x68>
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	441c      	add	r4, r3
 800e674:	6025      	str	r5, [r4, #0]
 800e676:	e004      	b.n	800e682 <_malloc_r+0x72>
 800e678:	6863      	ldr	r3, [r4, #4]
 800e67a:	42a2      	cmp	r2, r4
 800e67c:	bf0c      	ite	eq
 800e67e:	600b      	streq	r3, [r1, #0]
 800e680:	6053      	strne	r3, [r2, #4]
 800e682:	4630      	mov	r0, r6
 800e684:	f000 f834 	bl	800e6f0 <__malloc_unlock>
 800e688:	f104 000b 	add.w	r0, r4, #11
 800e68c:	1d23      	adds	r3, r4, #4
 800e68e:	f020 0007 	bic.w	r0, r0, #7
 800e692:	1ac2      	subs	r2, r0, r3
 800e694:	d0cc      	beq.n	800e630 <_malloc_r+0x20>
 800e696:	1a1b      	subs	r3, r3, r0
 800e698:	50a3      	str	r3, [r4, r2]
 800e69a:	e7c9      	b.n	800e630 <_malloc_r+0x20>
 800e69c:	4622      	mov	r2, r4
 800e69e:	6864      	ldr	r4, [r4, #4]
 800e6a0:	e7cc      	b.n	800e63c <_malloc_r+0x2c>
 800e6a2:	1cc4      	adds	r4, r0, #3
 800e6a4:	f024 0403 	bic.w	r4, r4, #3
 800e6a8:	42a0      	cmp	r0, r4
 800e6aa:	d0e3      	beq.n	800e674 <_malloc_r+0x64>
 800e6ac:	1a21      	subs	r1, r4, r0
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f000 f808 	bl	800e6c4 <_sbrk_r>
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d1dd      	bne.n	800e674 <_malloc_r+0x64>
 800e6b8:	e7cf      	b.n	800e65a <_malloc_r+0x4a>
 800e6ba:	bf00      	nop
 800e6bc:	20002184 	.word	0x20002184
 800e6c0:	20002188 	.word	0x20002188

0800e6c4 <_sbrk_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4d06      	ldr	r5, [pc, #24]	; (800e6e0 <_sbrk_r+0x1c>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	602b      	str	r3, [r5, #0]
 800e6d0:	f7f2 ff78 	bl	80015c4 <_sbrk>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	d102      	bne.n	800e6de <_sbrk_r+0x1a>
 800e6d8:	682b      	ldr	r3, [r5, #0]
 800e6da:	b103      	cbz	r3, 800e6de <_sbrk_r+0x1a>
 800e6dc:	6023      	str	r3, [r4, #0]
 800e6de:	bd38      	pop	{r3, r4, r5, pc}
 800e6e0:	200049d8 	.word	0x200049d8

0800e6e4 <__malloc_lock>:
 800e6e4:	4801      	ldr	r0, [pc, #4]	; (800e6ec <__malloc_lock+0x8>)
 800e6e6:	f000 b809 	b.w	800e6fc <__retarget_lock_acquire_recursive>
 800e6ea:	bf00      	nop
 800e6ec:	200049e0 	.word	0x200049e0

0800e6f0 <__malloc_unlock>:
 800e6f0:	4801      	ldr	r0, [pc, #4]	; (800e6f8 <__malloc_unlock+0x8>)
 800e6f2:	f000 b804 	b.w	800e6fe <__retarget_lock_release_recursive>
 800e6f6:	bf00      	nop
 800e6f8:	200049e0 	.word	0x200049e0

0800e6fc <__retarget_lock_acquire_recursive>:
 800e6fc:	4770      	bx	lr

0800e6fe <__retarget_lock_release_recursive>:
 800e6fe:	4770      	bx	lr

0800e700 <_init>:
 800e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e702:	bf00      	nop
 800e704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e706:	bc08      	pop	{r3}
 800e708:	469e      	mov	lr, r3
 800e70a:	4770      	bx	lr

0800e70c <_fini>:
 800e70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e70e:	bf00      	nop
 800e710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e712:	bc08      	pop	{r3}
 800e714:	469e      	mov	lr, r3
 800e716:	4770      	bx	lr
